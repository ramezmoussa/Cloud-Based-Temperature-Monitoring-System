
send_to_esp32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f88  08003f88  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f88  08003f88  00013f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f90  08003f90  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08004008  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004008  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecc4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fbd  00000000  00000000  0002ed64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  00030d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  00031758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f8b8  00000000  00000000  000320c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5f7  00000000  00000000  00051978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf80d  00000000  00000000  0005df6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d77c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c14  00000000  00000000  0011d7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ef0 	.word	0x08003ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003ef0 	.word	0x08003ef0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 faca 	bl	8000b06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f83b 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8fb 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057a:	f000 f8c9 	bl	8000710 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800057e:	f000 f897 	bl	80006b0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char uartBuf [1] = {0};
 8000582:	2300      	movs	r3, #0
 8000584:	703b      	strb	r3, [r7, #0]
	  sprintf(uartBuf, "%d", counter + 1);
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <main+0x74>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	1c5a      	adds	r2, r3, #1
 800058c:	463b      	mov	r3, r7
 800058e:	4914      	ldr	r1, [pc, #80]	; (80005e0 <main+0x78>)
 8000590:	4618      	mov	r0, r3
 8000592:	f003 f87f 	bl	8003694 <siprintf>
	  HAL_UART_Transmit(&huart1, uartBuf, 1, 10);
 8000596:	4639      	mov	r1, r7
 8000598:	230a      	movs	r3, #10
 800059a:	2201      	movs	r2, #1
 800059c:	4811      	ldr	r0, [pc, #68]	; (80005e4 <main+0x7c>)
 800059e:	f002 f84b 	bl	8002638 <HAL_UART_Transmit>
	  counter = (counter + 1)%3;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <main+0x74>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	1c5a      	adds	r2, r3, #1
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <main+0x80>)
 80005aa:	fb83 3102 	smull	r3, r1, r3, r2
 80005ae:	17d3      	asrs	r3, r2, #31
 80005b0:	1ac9      	subs	r1, r1, r3
 80005b2:	460b      	mov	r3, r1
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	440b      	add	r3, r1
 80005b8:	1ad1      	subs	r1, r2, r3
 80005ba:	b2ca      	uxtb	r2, r1
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0x74>)
 80005be:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 15; i ++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	e006      	b.n	80005d4 <main+0x6c>
			  HAL_Delay(1000);
 80005c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ca:	f000 fb11 	bl	8000bf0 <HAL_Delay>
	  for(int i = 0; i < 15; i ++)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3301      	adds	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b0e      	cmp	r3, #14
 80005d8:	ddf5      	ble.n	80005c6 <main+0x5e>
  {
 80005da:	e7d2      	b.n	8000582 <main+0x1a>
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	08003f08 	.word	0x08003f08
 80005e4:	20000100 	.word	0x20000100
 80005e8:	55555556 	.word	0x55555556

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	; 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 f842 	bl	8003684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000612:	f000 fe41 	bl	8001298 <HAL_PWREx_ControlVoltageScaling>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061c:	f000 f8f2 	bl	8000804 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000620:	f000 fe1c 	bl	800125c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <SystemClock_Config+0xc0>)
 8000626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <SystemClock_Config+0xc0>)
 800062c:	f023 0318 	bic.w	r3, r3, #24
 8000630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000634:	2314      	movs	r3, #20
 8000636:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800064c:	2301      	movs	r3, #1
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000654:	2310      	movs	r3, #16
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000658:	2307      	movs	r3, #7
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fe6b 	bl	8001344 <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000674:	f000 f8c6 	bl	8000804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2303      	movs	r3, #3
 800067e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800068c:	463b      	mov	r3, r7
 800068e:	2101      	movs	r1, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fa69 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800069c:	f000 f8b2 	bl	8000804 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006a0:	f001 fe7a 	bl	8002398 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006a4:	bf00      	nop
 80006a6:	3758      	adds	r7, #88	; 0x58
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000

080006b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART1_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006f4:	f001 ff52 	bl	800259c <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f881 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000100 	.word	0x20000100
 800070c:	40013800 	.word	0x40013800

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	f001 ff22 	bl	800259c <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f851 	bl	8000804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000184 	.word	0x20000184
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_GPIO_Init+0x8c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_GPIO_Init+0x8c>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_GPIO_Init+0x8c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_GPIO_Init+0x8c>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <MX_GPIO_Init+0x8c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_GPIO_Init+0x8c>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_GPIO_Init+0x8c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a10      	ldr	r2, [pc, #64]	; (80007fc <MX_GPIO_Init+0x8c>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0x90>)
 80007d4:	f000 fd2a 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007d8:	2308      	movs	r3, #8
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0x90>)
 80007f0:	f000 fbb2 	bl	8000f58 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48000400 	.word	0x48000400

08000804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000808:	b672      	cpsid	i
}
 800080a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800080c:	e7fe      	b.n	800080c <Error_Handler+0x8>
	...

08000810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x44>)
 8000818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <HAL_MspInit+0x44>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6613      	str	r3, [r2, #96]	; 0x60
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x44>)
 8000830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x44>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6593      	str	r3, [r2, #88]	; 0x58
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0a0      	sub	sp, #128	; 0x80
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000870:	f107 0318 	add.w	r3, r7, #24
 8000874:	2254      	movs	r2, #84	; 0x54
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f002 ff03 	bl	8003684 <memset>
  if(huart->Instance==USART1)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a4b      	ldr	r2, [pc, #300]	; (80009b0 <HAL_UART_MspInit+0x158>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d140      	bne.n	800090a <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000888:	2301      	movs	r3, #1
 800088a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800088c:	2300      	movs	r3, #0
 800088e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fb8b 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008a0:	f7ff ffb0 	bl	8000804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a4:	4b43      	ldr	r3, [pc, #268]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 80008a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a8:	4a42      	ldr	r2, [pc, #264]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ae:	6613      	str	r3, [r2, #96]	; 0x60
 80008b0:	4b40      	ldr	r3, [pc, #256]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 80008b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c0:	4a3c      	ldr	r2, [pc, #240]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c8:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008cc:	f003 0301 	and.w	r3, r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008e6:	2307      	movs	r3, #7
 80008e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008ee:	4619      	mov	r1, r3
 80008f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f4:	f000 fb30 	bl	8000f58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2025      	movs	r0, #37	; 0x25
 80008fe:	f000 fa76 	bl	8000dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000902:	2025      	movs	r0, #37	; 0x25
 8000904:	f000 fa8f 	bl	8000e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000908:	e04d      	b.n	80009a6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a2a      	ldr	r2, [pc, #168]	; (80009b8 <HAL_UART_MspInit+0x160>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d148      	bne.n	80009a6 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000918:	2300      	movs	r3, #0
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800091c:	f107 0318 	add.w	r3, r7, #24
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fb45 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800092c:	f7ff ff6a 	bl	8000804 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 8000932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 8000936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800093a:	6593      	str	r3, [r2, #88]	; 0x58
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 800093e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 800094a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0x15c>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000970:	2307      	movs	r3, #7
 8000972:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000978:	4619      	mov	r1, r3
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f000 faeb 	bl	8000f58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000986:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000994:	2303      	movs	r3, #3
 8000996:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800099c:	4619      	mov	r1, r3
 800099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a2:	f000 fad9 	bl	8000f58 <HAL_GPIO_Init>
}
 80009a6:	bf00      	nop
 80009a8:	3780      	adds	r7, #128	; 0x80
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40013800 	.word	0x40013800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40004400 	.word	0x40004400

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f8d2 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART1_IRQHandler+0x10>)
 8000a16:	f001 fea3 	bl	8002760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000100 	.word	0x20000100

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f002 fdec 	bl	8003630 <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20010000 	.word	0x20010000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	20000090 	.word	0x20000090
 8000a8c:	20000220 	.word	0x20000220

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	; (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	; (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	; (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f002 fdab 	bl	800363c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae6:	f7ff fd3f 	bl	8000568 <main>

08000aea <LoopForever>:

LoopForever:
    b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000af8:	08003f98 	.word	0x08003f98
  ldr r2, =_sbss
 8000afc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b00:	2000021c 	.word	0x2000021c

08000b04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_IRQHandler>

08000b06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f961 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f80e 	bl	8000b38 <HAL_InitTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	e001      	b.n	8000b2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b28:	f7ff fe72 	bl	8000810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_InitTick+0x6c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d023      	beq.n	8000b94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <HAL_InitTick+0x70>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <HAL_InitTick+0x6c>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f96d 	bl	8000e42 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10f      	bne.n	8000b8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b0f      	cmp	r3, #15
 8000b72:	d809      	bhi.n	8000b88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b74:	2200      	movs	r2, #0
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	f04f 30ff 	mov.w	r0, #4294967295
 8000b7c:	f000 f937 	bl	8000dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_InitTick+0x74>)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e007      	b.n	8000b98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	73fb      	strb	r3, [r7, #15]
 8000b8c:	e004      	b.n	8000b98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e001      	b.n	8000b98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000004 	.word	0x20000004

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000208 	.word	0x20000208

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000208 	.word	0x20000208

08000bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf8:	f7ff ffee 	bl	8000bd8 <HAL_GetTick>
 8000bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c08:	d005      	beq.n	8000c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_Delay+0x44>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4413      	add	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c16:	bf00      	nop
 8000c18:	f7ff ffde 	bl	8000bd8 <HAL_GetTick>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	68fa      	ldr	r2, [r7, #12]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8f7      	bhi.n	8000c18 <HAL_Delay+0x28>
  {
  }
}
 8000c28:	bf00      	nop
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff3e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff31 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa2 	bl	8000d94 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b085      	sub	sp, #20
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d008      	beq.n	8000e84 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2204      	movs	r2, #4
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	e022      	b.n	8000eca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 020e 	bic.w	r2, r2, #14
 8000e92:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0201 	bic.w	r2, r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea8:	f003 021c 	and.w	r2, r3, #28
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d005      	beq.n	8000efa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e029      	b.n	8000f4e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 020e 	bic.w	r2, r2, #14
 8000f08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0201 	bic.w	r2, r2, #1
 8000f18:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f003 021c 	and.w	r2, r3, #28
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	4798      	blx	r3
    }
  }
  return status;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e148      	b.n	80011fa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 813a 	beq.w	80011f4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <HAL_GPIO_Init+0x40>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	f003 0201 	and.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b03      	cmp	r3, #3
 8001004:	d017      	beq.n	8001036 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d123      	bne.n	800108a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	220f      	movs	r2, #15
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	08da      	lsrs	r2, r3, #3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3208      	adds	r2, #8
 8001084:	6939      	ldr	r1, [r7, #16]
 8001086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f003 0203 	and.w	r2, r3, #3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8094 	beq.w	80011f4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	4b52      	ldr	r3, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x2c0>)
 80010ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x2c0>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6613      	str	r3, [r2, #96]	; 0x60
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x2c0>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010e4:	4a4d      	ldr	r2, [pc, #308]	; (800121c <HAL_GPIO_Init+0x2c4>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110e:	d00d      	beq.n	800112c <HAL_GPIO_Init+0x1d4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a43      	ldr	r2, [pc, #268]	; (8001220 <HAL_GPIO_Init+0x2c8>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d007      	beq.n	8001128 <HAL_GPIO_Init+0x1d0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a42      	ldr	r2, [pc, #264]	; (8001224 <HAL_GPIO_Init+0x2cc>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d101      	bne.n	8001124 <HAL_GPIO_Init+0x1cc>
 8001120:	2302      	movs	r3, #2
 8001122:	e004      	b.n	800112e <HAL_GPIO_Init+0x1d6>
 8001124:	2307      	movs	r3, #7
 8001126:	e002      	b.n	800112e <HAL_GPIO_Init+0x1d6>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <HAL_GPIO_Init+0x1d6>
 800112c:	2300      	movs	r3, #0
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	f002 0203 	and.w	r2, r2, #3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	4093      	lsls	r3, r2
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800113e:	4937      	ldr	r1, [pc, #220]	; (800121c <HAL_GPIO_Init+0x2c4>)
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001170:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001176:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800119a:	4a23      	ldr	r2, [pc, #140]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011c4:	4a18      	ldr	r2, [pc, #96]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_GPIO_Init+0x2d0>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3301      	adds	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f aeaf 	bne.w	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000
 800121c:	40010000 	.word	0x40010000
 8001220:	48000400 	.word	0x48000400
 8001224:	48000800 	.word	0x48000800
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
 8001238:	4613      	mov	r3, r2
 800123a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001248:	e002      	b.n	8001250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800124a:	887a      	ldrh	r2, [r7, #2]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40007000 	.word	0x40007000

0800127c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <HAL_PWREx_GetVoltageRange+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000

08001298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012a6:	d130      	bne.n	800130a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a8:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b4:	d038      	beq.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012be:	4a1e      	ldr	r2, [pc, #120]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2232      	movs	r2, #50	; 0x32
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012dc:	e002      	b.n	80012e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f0:	d102      	bne.n	80012f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f2      	bne.n	80012de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001304:	d110      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e00f      	b.n	800132a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001316:	d007      	beq.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001326:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000
 800133c:	20000000 	.word	0x20000000
 8001340:	431bde83 	.word	0x431bde83

08001344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e3fe      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001356:	4ba1      	ldr	r3, [pc, #644]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001360:	4b9e      	ldr	r3, [pc, #632]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0310 	and.w	r3, r3, #16
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 80e4 	beq.w	8001540 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_RCC_OscConfig+0x4a>
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b0c      	cmp	r3, #12
 8001382:	f040 808b 	bne.w	800149c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b01      	cmp	r3, #1
 800138a:	f040 8087 	bne.w	800149c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800138e:	4b93      	ldr	r3, [pc, #588]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x62>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e3d6      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1a      	ldr	r2, [r3, #32]
 80013aa:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_RCC_OscConfig+0x7c>
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013be:	e005      	b.n	80013cc <HAL_RCC_OscConfig+0x88>
 80013c0:	4b86      	ldr	r3, [pc, #536]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80013c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d223      	bcs.n	8001418 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 fd8b 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e3b7      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e4:	4b7d      	ldr	r3, [pc, #500]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a7c      	ldr	r2, [pc, #496]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80013ea:	f043 0308 	orr.w	r3, r3, #8
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b7a      	ldr	r3, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4977      	ldr	r1, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001402:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	4972      	ldr	r1, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001412:	4313      	orrs	r3, r2
 8001414:	604b      	str	r3, [r1, #4]
 8001416:	e025      	b.n	8001464 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001418:	4b70      	ldr	r3, [pc, #448]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a6f      	ldr	r2, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 800141e:	f043 0308 	orr.w	r3, r3, #8
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	496a      	ldr	r1, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001436:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	4965      	ldr	r1, [pc, #404]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d109      	bne.n	8001464 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd4b 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e377      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001464:	f000 fc80 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	495a      	ldr	r1, [pc, #360]	; (80015e0 <HAL_RCC_OscConfig+0x29c>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	4a58      	ldr	r2, [pc, #352]	; (80015e4 <HAL_RCC_OscConfig+0x2a0>)
 8001482:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001484:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <HAL_RCC_OscConfig+0x2a4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fb55 	bl	8000b38 <HAL_InitTick>
 800148e:	4603      	mov	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d052      	beq.n	800153e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	e35b      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d032      	beq.n	800150a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014a4:	4b4d      	ldr	r3, [pc, #308]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a4c      	ldr	r2, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb92 	bl	8000bd8 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014b8:	f7ff fb8e 	bl	8000bd8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e344      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a40      	ldr	r2, [pc, #256]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	4b3e      	ldr	r3, [pc, #248]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	493b      	ldr	r1, [pc, #236]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f4:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	4936      	ldr	r1, [pc, #216]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e01a      	b.n	8001540 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800150a:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a33      	ldr	r2, [pc, #204]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001516:	f7ff fb5f 	bl	8000bd8 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800151e:	f7ff fb5b 	bl	8000bd8 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e311      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x1da>
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d074      	beq.n	8001636 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	2b08      	cmp	r3, #8
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x21a>
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b0c      	cmp	r3, #12
 8001556:	d10e      	bne.n	8001576 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d10b      	bne.n	8001576 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155e:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d064      	beq.n	8001634 <HAL_RCC_OscConfig+0x2f0>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d160      	bne.n	8001634 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e2ee      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x24a>
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a15      	ldr	r2, [pc, #84]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e01d      	b.n	80015ca <HAL_RCC_OscConfig+0x286>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0x26e>
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 800159e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80015aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e00b      	b.n	80015ca <HAL_RCC_OscConfig+0x286>
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a09      	ldr	r2, [pc, #36]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80015b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_RCC_OscConfig+0x298>)
 80015c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01c      	beq.n	800160c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fb01 	bl	8000bd8 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d8:	e011      	b.n	80015fe <HAL_RCC_OscConfig+0x2ba>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	08003f0c 	.word	0x08003f0c
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff faf4 	bl	8000bd8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e2aa      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fe:	4baf      	ldr	r3, [pc, #700]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x2a8>
 800160a:	e014      	b.n	8001636 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fae4 	bl	8000bd8 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fae0 	bl	8000bd8 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e296      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001626:	4ba5      	ldr	r3, [pc, #660]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x2d0>
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d060      	beq.n	8001704 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b04      	cmp	r3, #4
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x310>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b0c      	cmp	r3, #12
 800164c:	d119      	bne.n	8001682 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d116      	bne.n	8001682 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001654:	4b99      	ldr	r3, [pc, #612]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x328>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e273      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b93      	ldr	r3, [pc, #588]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	4990      	ldr	r1, [pc, #576]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001680:	e040      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d023      	beq.n	80016d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168a:	4b8c      	ldr	r3, [pc, #560]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a8b      	ldr	r2, [pc, #556]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001696:	f7ff fa9f 	bl	8000bd8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fa9b 	bl	8000bd8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e251      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	4b82      	ldr	r3, [pc, #520]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b7f      	ldr	r3, [pc, #508]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	497c      	ldr	r1, [pc, #496]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	e018      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b7a      	ldr	r3, [pc, #488]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a79      	ldr	r2, [pc, #484]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80016d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fa7b 	bl	8000bd8 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e6:	f7ff fa77 	bl	8000bd8 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e22d      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d03c      	beq.n	800178a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01c      	beq.n	8001752 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	4a67      	ldr	r2, [pc, #412]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff fa56 	bl	8000bd8 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff fa52 	bl	8000bd8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e208      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001742:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ef      	beq.n	8001730 <HAL_RCC_OscConfig+0x3ec>
 8001750:	e01b      	b.n	800178a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001752:	4b5a      	ldr	r3, [pc, #360]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fa39 	bl	8000bd8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fa35 	bl	8000bd8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1eb      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800177c:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800177e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ef      	bne.n	800176a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 80a6 	beq.w	80018e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800179e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10d      	bne.n	80017c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	4b44      	ldr	r3, [pc, #272]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	4a43      	ldr	r2, [pc, #268]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6593      	str	r3, [r2, #88]	; 0x58
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c0:	2301      	movs	r3, #1
 80017c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <HAL_RCC_OscConfig+0x57c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d118      	bne.n	8001802 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_RCC_OscConfig+0x57c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3a      	ldr	r2, [pc, #232]	; (80018c0 <HAL_RCC_OscConfig+0x57c>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017dc:	f7ff f9fc 	bl	8000bd8 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e4:	f7ff f9f8 	bl	8000bd8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1ae      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f6:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <HAL_RCC_OscConfig+0x57c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d0f0      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <HAL_RCC_OscConfig+0x4d8>
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001810:	4a2a      	ldr	r2, [pc, #168]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181a:	e024      	b.n	8001866 <HAL_RCC_OscConfig+0x522>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d110      	bne.n	8001846 <HAL_RCC_OscConfig+0x502>
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182a:	4a24      	ldr	r2, [pc, #144]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183a:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001844:	e00f      	b.n	8001866 <HAL_RCC_OscConfig+0x522>
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184c:	4a1b      	ldr	r2, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800184e:	f023 0301 	bic.w	r3, r3, #1
 8001852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185c:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800185e:	f023 0304 	bic.w	r3, r3, #4
 8001862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d016      	beq.n	800189c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186e:	f7ff f9b3 	bl	8000bd8 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001874:	e00a      	b.n	800188c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001876:	f7ff f9af 	bl	8000bd8 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	4293      	cmp	r3, r2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e163      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_OscConfig+0x578>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0ed      	beq.n	8001876 <HAL_RCC_OscConfig+0x532>
 800189a:	e01a      	b.n	80018d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189c:	f7ff f99c 	bl	8000bd8 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a2:	e00f      	b.n	80018c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a4:	f7ff f998 	bl	8000bd8 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d906      	bls.n	80018c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e14c      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	4ba5      	ldr	r3, [pc, #660]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1e8      	bne.n	80018a4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d2:	7ffb      	ldrb	r3, [r7, #31]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4ba0      	ldr	r3, [pc, #640]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	4a9f      	ldr	r2, [pc, #636]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d03c      	beq.n	800196a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01c      	beq.n	8001932 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018f8:	4b98      	ldr	r3, [pc, #608]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 80018fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fe:	4a97      	ldr	r2, [pc, #604]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001908:	f7ff f966 	bl	8000bd8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001910:	f7ff f962 	bl	8000bd8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e118      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001922:	4b8e      	ldr	r3, [pc, #568]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ef      	beq.n	8001910 <HAL_RCC_OscConfig+0x5cc>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001932:	4b8a      	ldr	r3, [pc, #552]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001938:	4a88      	ldr	r2, [pc, #544]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001942:	f7ff f949 	bl	8000bd8 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194a:	f7ff f945 	bl	8000bd8 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0fb      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800195c:	4b7f      	ldr	r3, [pc, #508]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ef      	bne.n	800194a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80ef 	beq.w	8001b52 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	2b02      	cmp	r3, #2
 800197a:	f040 80c5 	bne.w	8001b08 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800197e:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f003 0203 	and.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	429a      	cmp	r2, r3
 8001990:	d12c      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	3b01      	subs	r3, #1
 800199e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d123      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d11b      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d113      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	3b01      	subs	r3, #1
 80019d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d109      	bne.n	80019ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	085b      	lsrs	r3, r3, #1
 80019e4:	3b01      	subs	r3, #1
 80019e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d067      	beq.n	8001abc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d062      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0a8      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a02:	4b56      	ldr	r3, [pc, #344]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a0e:	f7ff f8e3 	bl	8000bd8 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a16:	f7ff f8df 	bl	8000bd8 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e095      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	4b49      	ldr	r3, [pc, #292]	; (8001b60 <HAL_RCC_OscConfig+0x81c>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a44:	3a01      	subs	r2, #1
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	4311      	orrs	r1, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a4e:	0212      	lsls	r2, r2, #8
 8001a50:	4311      	orrs	r1, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a56:	0852      	lsrs	r2, r2, #1
 8001a58:	3a01      	subs	r2, #1
 8001a5a:	0552      	lsls	r2, r2, #21
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a62:	0852      	lsrs	r2, r2, #1
 8001a64:	3a01      	subs	r2, #1
 8001a66:	0652      	lsls	r2, r2, #25
 8001a68:	4311      	orrs	r1, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a6e:	06d2      	lsls	r2, r2, #27
 8001a70:	430a      	orrs	r2, r1
 8001a72:	493a      	ldr	r1, [pc, #232]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a78:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a84:	4b35      	ldr	r3, [pc, #212]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4a34      	ldr	r2, [pc, #208]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a90:	f7ff f8a2 	bl	8000bd8 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a98:	f7ff f89e 	bl	8000bd8 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e054      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ab6:	e04c      	b.n	8001b52 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e04b      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d144      	bne.n	8001b52 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad4:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a20      	ldr	r2, [pc, #128]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ae0:	f7ff f87a 	bl	8000bd8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f876 	bl	8000bd8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e02c      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x7a4>
 8001b06:	e024      	b.n	8001b52 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d01f      	beq.n	8001b4e <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f85d 	bl	8000bd8 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f859 	bl	8000bd8 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e00f      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4905      	ldr	r1, [pc, #20]	; (8001b5c <HAL_RCC_OscConfig+0x818>)
 8001b46:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_RCC_OscConfig+0x820>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e001      	b.n	8001b52 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e000      	b.n	8001b54 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	019d808c 	.word	0x019d808c
 8001b64:	feeefffc 	.word	0xfeeefffc

08001b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0e7      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b7c:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d910      	bls.n	8001bac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0207 	bic.w	r2, r3, #7
 8001b92:	4970      	ldr	r1, [pc, #448]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d001      	beq.n	8001bac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e0cf      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d010      	beq.n	8001bda <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d908      	bls.n	8001bda <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b63      	ldr	r3, [pc, #396]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4960      	ldr	r1, [pc, #384]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d04c      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d121      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e0a6      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d115      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e09a      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c1e:	4b4e      	ldr	r3, [pc, #312]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e08e      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2e:	4b4a      	ldr	r3, [pc, #296]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e086      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c3e:	4b46      	ldr	r3, [pc, #280]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 0203 	bic.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	4943      	ldr	r1, [pc, #268]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c50:	f7fe ffc2 	bl	8000bd8 <HAL_GetTick>
 8001c54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c58:	f7fe ffbe 	bl	8000bd8 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e06e      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f003 020c 	and.w	r2, r3, #12
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d1eb      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d010      	beq.n	8001cae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	4b31      	ldr	r3, [pc, #196]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d208      	bcs.n	8001cae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	492b      	ldr	r1, [pc, #172]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d210      	bcs.n	8001cde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 0207 	bic.w	r2, r3, #7
 8001cc4:	4923      	ldr	r1, [pc, #140]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e036      	b.n	8001d4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	4918      	ldr	r1, [pc, #96]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d009      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4910      	ldr	r1, [pc, #64]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1c:	f000 f824 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HAL_RCC_ClockConfig+0x1f0>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	490b      	ldr	r1, [pc, #44]	; (8001d5c <HAL_RCC_ClockConfig+0x1f4>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_ClockConfig+0x1fc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fef9 	bl	8000b38 <HAL_InitTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d4a:	7afb      	ldrb	r3, [r7, #11]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40022000 	.word	0x40022000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	08003f0c 	.word	0x08003f0c
 8001d60:	20000000 	.word	0x20000000
 8001d64:	20000004 	.word	0x20000004

08001d68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d76:	4b3e      	ldr	r3, [pc, #248]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x34>
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d121      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d11e      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d9c:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e005      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	091b      	lsrs	r3, r3, #4
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dc4:	4a2b      	ldr	r2, [pc, #172]	; (8001e74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dcc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de0:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	e004      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001dee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d134      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d003      	beq.n	8001e0e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d003      	beq.n	8001e14 <HAL_RCC_GetSysClockFreq+0xac>
 8001e0c:	e005      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e10:	617b      	str	r3, [r7, #20]
      break;
 8001e12:	e005      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e14:	4b19      	ldr	r3, [pc, #100]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x114>)
 8001e16:	617b      	str	r3, [r7, #20]
      break;
 8001e18:	e002      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	617b      	str	r3, [r7, #20]
      break;
 8001e1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	fb02 f203 	mul.w	r2, r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	0e5b      	lsrs	r3, r3, #25
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	3301      	adds	r3, #1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e60:	69bb      	ldr	r3, [r7, #24]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08003f24 	.word	0x08003f24
 8001e78:	00f42400 	.word	0x00f42400
 8001e7c:	007a1200 	.word	0x007a1200

08001e80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000000 	.word	0x20000000

08001e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e9c:	f7ff fff0 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4904      	ldr	r1, [pc, #16]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08003f1c 	.word	0x08003f1c

08001ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ec8:	f7ff ffda 	bl	8001e80 <HAL_RCC_GetHCLKFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0adb      	lsrs	r3, r3, #11
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	4904      	ldr	r1, [pc, #16]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eda:	5ccb      	ldrb	r3, [r1, r3]
 8001edc:	f003 031f 	and.w	r3, r3, #31
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08003f1c 	.word	0x08003f1c

08001ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f08:	f7ff f9b8 	bl	800127c <HAL_PWREx_GetVoltageRange>
 8001f0c:	6178      	str	r0, [r7, #20]
 8001f0e:	e014      	b.n	8001f3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f28:	f7ff f9a8 	bl	800127c <HAL_PWREx_GetVoltageRange>
 8001f2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d10b      	bne.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b80      	cmp	r3, #128	; 0x80
 8001f46:	d919      	bls.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f4c:	d902      	bls.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4e:	2302      	movs	r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e013      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e010      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	; 0x80
 8001f5e:	d902      	bls.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e00a      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b80      	cmp	r3, #128	; 0x80
 8001f6a:	d102      	bne.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e004      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b70      	cmp	r3, #112	; 0x70
 8001f76:	d101      	bne.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f78:	2301      	movs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 0207 	bic.w	r2, r3, #7
 8001f84:	4909      	ldr	r1, [pc, #36]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d031      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fd4:	d01a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001fd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fda:	d814      	bhi.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fe4:	d10f      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fe6:	4bac      	ldr	r3, [pc, #688]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4aab      	ldr	r2, [pc, #684]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff2:	e00c      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 f9dc 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002004:	e003      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	74fb      	strb	r3, [r7, #19]
      break;
 800200a:	e000      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800200c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800200e:	7cfb      	ldrb	r3, [r7, #19]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002014:	4ba0      	ldr	r3, [pc, #640]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002022:	499d      	ldr	r1, [pc, #628]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800202a:	e001      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8099 	beq.w	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002042:	4b95      	ldr	r3, [pc, #596]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002052:	2300      	movs	r3, #0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a8e      	ldr	r2, [pc, #568]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
 8002064:	4b8c      	ldr	r3, [pc, #560]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002070:	2301      	movs	r3, #1
 8002072:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002074:	4b89      	ldr	r3, [pc, #548]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a88      	ldr	r2, [pc, #544]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800207a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800207e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002080:	f7fe fdaa 	bl	8000bd8 <HAL_GetTick>
 8002084:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002086:	e009      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002088:	f7fe fda6 	bl	8000bd8 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d902      	bls.n	800209c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	74fb      	strb	r3, [r7, #19]
        break;
 800209a:	e005      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800209c:	4b7f      	ldr	r3, [pc, #508]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ef      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d155      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ae:	4b7a      	ldr	r3, [pc, #488]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01e      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d019      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020d6:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	4a6e      	ldr	r2, [pc, #440]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020e6:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	4a6a      	ldr	r2, [pc, #424]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020f6:	4a68      	ldr	r2, [pc, #416]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d016      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe fd66 	bl	8000bd8 <HAL_GetTick>
 800210c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210e:	e00b      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002110:	f7fe fd62 	bl	8000bd8 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d902      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	74fb      	strb	r3, [r7, #19]
            break;
 8002126:	e006      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002128:	4b5b      	ldr	r3, [pc, #364]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0ec      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002136:	7cfb      	ldrb	r3, [r7, #19]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800213c:	4b56      	ldr	r3, [pc, #344]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800214a:	4953      	ldr	r1, [pc, #332]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002152:	e004      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
 8002158:	e001      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215e:	7c7b      	ldrb	r3, [r7, #17]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	4a4b      	ldr	r2, [pc, #300]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800216a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217c:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4943      	ldr	r1, [pc, #268]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800219e:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a4:	f023 020c 	bic.w	r2, r3, #12
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	493a      	ldr	r1, [pc, #232]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021c0:	4b35      	ldr	r3, [pc, #212]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ce:	4932      	ldr	r1, [pc, #200]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021e2:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f0:	4929      	ldr	r1, [pc, #164]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002204:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002212:	4921      	ldr	r1, [pc, #132]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	4918      	ldr	r1, [pc, #96]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4910      	ldr	r1, [pc, #64]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d02c      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800226a:	4b0b      	ldr	r3, [pc, #44]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4907      	ldr	r1, [pc, #28]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002288:	d10a      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800228a:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	4a02      	ldr	r2, [pc, #8]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002294:	60d3      	str	r3, [r2, #12]
 8002296:	e015      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3304      	adds	r3, #4
 80022ae:	2101      	movs	r1, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f881 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022ba:	7cfb      	ldrb	r3, [r7, #19]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d028      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022d0:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	492d      	ldr	r1, [pc, #180]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ee:	d106      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022f0:	4b28      	ldr	r3, [pc, #160]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4a27      	ldr	r2, [pc, #156]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022fa:	60d3      	str	r3, [r2, #12]
 80022fc:	e011      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002306:	d10c      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	2101      	movs	r1, #1
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f852 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01c      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	4915      	ldr	r1, [pc, #84]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800234c:	d10c      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2102      	movs	r1, #2
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f82f 	bl	80023b8 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	4904      	ldr	r1, [pc, #16]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800238a:	7cbb      	ldrb	r3, [r7, #18]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000

08002398 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000

080023b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023c6:	4b74      	ldr	r3, [pc, #464]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d018      	beq.n	8002404 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023d2:	4b71      	ldr	r3, [pc, #452]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f003 0203 	and.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d10d      	bne.n	80023fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
       ||
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ea:	4b6b      	ldr	r3, [pc, #428]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
       ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d047      	beq.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
 8002402:	e044      	b.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d018      	beq.n	800243e <RCCEx_PLLSAI1_Config+0x86>
 800240c:	2b03      	cmp	r3, #3
 800240e:	d825      	bhi.n	800245c <RCCEx_PLLSAI1_Config+0xa4>
 8002410:	2b01      	cmp	r3, #1
 8002412:	d002      	beq.n	800241a <RCCEx_PLLSAI1_Config+0x62>
 8002414:	2b02      	cmp	r3, #2
 8002416:	d009      	beq.n	800242c <RCCEx_PLLSAI1_Config+0x74>
 8002418:	e020      	b.n	800245c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800241a:	4b5f      	ldr	r3, [pc, #380]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11d      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242a:	e01a      	b.n	8002462 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800242c:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243c:	e013      	b.n	8002466 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800244a:	4b53      	ldr	r3, [pc, #332]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800245a:	e006      	b.n	800246a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
      break;
 8002460:	e004      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002462:	bf00      	nop
 8002464:	e002      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002466:	bf00      	nop
 8002468:	e000      	b.n	800246c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800246a:	bf00      	nop
    }

    if(status == HAL_OK)
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002472:	4b49      	ldr	r3, [pc, #292]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6819      	ldr	r1, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	3b01      	subs	r3, #1
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	430b      	orrs	r3, r1
 8002488:	4943      	ldr	r1, [pc, #268]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248a:	4313      	orrs	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d17c      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002494:	4b40      	ldr	r3, [pc, #256]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a3f      	ldr	r2, [pc, #252]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800249a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800249e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe fb9a 	bl	8000bd8 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024a6:	e009      	b.n	80024bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a8:	f7fe fb96 	bl	8000bd8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ba:	e005      	b.n	80024c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1ef      	bne.n	80024a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d15f      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d110      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6892      	ldr	r2, [r2, #8]
 80024e4:	0211      	lsls	r1, r2, #8
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68d2      	ldr	r2, [r2, #12]
 80024ea:	06d2      	lsls	r2, r2, #27
 80024ec:	430a      	orrs	r2, r1
 80024ee:	492a      	ldr	r1, [pc, #168]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	610b      	str	r3, [r1, #16]
 80024f4:	e027      	b.n	8002546 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d112      	bne.n	8002522 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fc:	4b26      	ldr	r3, [pc, #152]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002504:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6892      	ldr	r2, [r2, #8]
 800250c:	0211      	lsls	r1, r2, #8
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6912      	ldr	r2, [r2, #16]
 8002512:	0852      	lsrs	r2, r2, #1
 8002514:	3a01      	subs	r2, #1
 8002516:	0552      	lsls	r2, r2, #21
 8002518:	430a      	orrs	r2, r1
 800251a:	491f      	ldr	r1, [pc, #124]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	610b      	str	r3, [r1, #16]
 8002520:	e011      	b.n	8002546 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800252a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6892      	ldr	r2, [r2, #8]
 8002532:	0211      	lsls	r1, r2, #8
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6952      	ldr	r2, [r2, #20]
 8002538:	0852      	lsrs	r2, r2, #1
 800253a:	3a01      	subs	r2, #1
 800253c:	0652      	lsls	r2, r2, #25
 800253e:	430a      	orrs	r2, r1
 8002540:	4915      	ldr	r1, [pc, #84]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002546:	4b14      	ldr	r3, [pc, #80]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002550:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7fe fb41 	bl	8000bd8 <HAL_GetTick>
 8002556:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002558:	e009      	b.n	800256e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800255a:	f7fe fb3d 	bl	8000bd8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d902      	bls.n	800256e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	73fb      	strb	r3, [r7, #15]
          break;
 800256c:	e005      	b.n	800257a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0ef      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4903      	ldr	r1, [pc, #12]	; (8002598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e040      	b.n	8002630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe f94a 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 fbc2 	bl	8002d64 <UART_SetConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e022      	b.n	8002630 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fdc0 	bl	8003178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 fe47 	bl	80032bc <UART_CheckIdleState>
 800262e:	4603      	mov	r3, r0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af02      	add	r7, sp, #8
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	4613      	mov	r3, r2
 8002646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800264c:	2b20      	cmp	r3, #32
 800264e:	f040 8082 	bne.w	8002756 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <HAL_UART_Transmit+0x26>
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07a      	b.n	8002758 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_UART_Transmit+0x38>
 800266c:	2302      	movs	r3, #2
 800266e:	e073      	b.n	8002758 <HAL_UART_Transmit+0x120>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2221      	movs	r2, #33	; 0x21
 8002684:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002686:	f7fe faa7 	bl	8000bd8 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	88fa      	ldrh	r2, [r7, #6]
 8002690:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a4:	d108      	bne.n	80026b8 <HAL_UART_Transmit+0x80>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	e003      	b.n	80026c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80026c8:	e02d      	b.n	8002726 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2180      	movs	r1, #128	; 0x80
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fe3a 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e039      	b.n	8002758 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10b      	bne.n	8002702 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	881a      	ldrh	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026f6:	b292      	uxth	r2, r2
 80026f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	3302      	adds	r3, #2
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	e008      	b.n	8002714 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	b292      	uxth	r2, r2
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800271a:	b29b      	uxth	r3, r3
 800271c:	3b01      	subs	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800272c:	b29b      	uxth	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1cb      	bne.n	80026ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2140      	movs	r1, #64	; 0x40
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fe06 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e005      	b.n	8002758 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2220      	movs	r2, #32
 8002750:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
  }
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b0ba      	sub	sp, #232	; 0xe8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002786:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800278a:	f640 030f 	movw	r3, #2063	; 0x80f
 800278e:	4013      	ands	r3, r2
 8002790:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002794:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800279c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00f      	beq.n	80027c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 82a6 	beq.w	8002d0a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
      }
      return;
 80027c6:	e2a0      	b.n	8002d0a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80027c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8117 	beq.w	8002a00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80027de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80027e2:	4b85      	ldr	r3, [pc, #532]	; (80029f8 <HAL_UART_IRQHandler+0x298>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 810a 	beq.w	8002a00 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d011      	beq.n	800281c <HAL_UART_IRQHandler+0xbc>
 80027f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2201      	movs	r2, #1
 800280a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800281c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d011      	beq.n	800284c <HAL_UART_IRQHandler+0xec>
 8002828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00b      	beq.n	800284c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2202      	movs	r2, #2
 800283a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002842:	f043 0204 	orr.w	r2, r3, #4
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800284c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d011      	beq.n	800287c <HAL_UART_IRQHandler+0x11c>
 8002858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2204      	movs	r2, #4
 800286a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002872:	f043 0202 	orr.w	r2, r3, #2
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d017      	beq.n	80028b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00b      	beq.n	80028b8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2208      	movs	r2, #8
 80028a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ae:	f043 0208 	orr.w	r2, r3, #8
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d012      	beq.n	80028ea <HAL_UART_IRQHandler+0x18a>
 80028c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e0:	f043 0220 	orr.w	r2, r3, #32
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 820c 	beq.w	8002d0e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80028f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002924:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d005      	beq.n	8002942 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800293a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800293e:	2b00      	cmp	r3, #0
 8002940:	d04f      	beq.n	80029e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fdc7 	bl	80034d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d141      	bne.n	80029da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3308      	adds	r3, #8
 800295c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800296c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3308      	adds	r3, #8
 800297e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002982:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800298e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800299a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1d9      	bne.n	8002956 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d013      	beq.n	80029d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <HAL_UART_IRQHandler+0x29c>)
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fa8d 	bl	8000ed6 <HAL_DMA_Abort_IT>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d017      	beq.n	80029f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80029cc:	4610      	mov	r0, r2
 80029ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d0:	e00f      	b.n	80029f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f9b0 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	e00b      	b.n	80029f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f9ac 	bl	8002d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e0:	e007      	b.n	80029f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f9a8 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80029f0:	e18d      	b.n	8002d0e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029f2:	bf00      	nop
    return;
 80029f4:	e18b      	b.n	8002d0e <HAL_UART_IRQHandler+0x5ae>
 80029f6:	bf00      	nop
 80029f8:	04000120 	.word	0x04000120
 80029fc:	0800359d 	.word	0x0800359d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	f040 8146 	bne.w	8002c96 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 813f 	beq.w	8002c96 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8138 	beq.w	8002c96 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2210      	movs	r2, #16
 8002a2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	2b40      	cmp	r3, #64	; 0x40
 8002a3a:	f040 80b4 	bne.w	8002ba6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002a4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 815f 	beq.w	8002d12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	f080 8157 	bcs.w	8002d12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002a6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 8085 	bne.w	8002b8a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002a94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002aae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ab6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1da      	bne.n	8002a80 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3308      	adds	r3, #8
 8002ad0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ada:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002adc:	f023 0301 	bic.w	r3, r3, #1
 8002ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3308      	adds	r3, #8
 8002aea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002aee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002af2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002af6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e1      	bne.n	8002aca <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3308      	adds	r3, #8
 8002b26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e3      	bne.n	8002b06 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5a:	f023 0310 	bic.w	r3, r3, #16
 8002b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b6e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b74:	e841 2300 	strex	r3, r2, [r1]
 8002b78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e4      	bne.n	8002b4a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f968 	bl	8000e5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8d4 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ba4:	e0b5      	b.n	8002d12 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80a7 	beq.w	8002d16 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002bc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80a2 	beq.w	8002d16 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	e853 3f00 	ldrex	r3, [r3]
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8002bf6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e4      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	623b      	str	r3, [r7, #32]
   return(result);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3308      	adds	r3, #8
 8002c28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002c2c:	633a      	str	r2, [r7, #48]	; 0x30
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e3      	bne.n	8002c08 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0310 	bic.w	r3, r3, #16
 8002c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	69b9      	ldr	r1, [r7, #24]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	617b      	str	r3, [r7, #20]
   return(result);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e4      	bne.n	8002c52 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f85c 	bl	8002d4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c94:	e03f      	b.n	8002d16 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x560>
 8002ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d008      	beq.n	8002cc0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fcaf 	bl	800361c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cbe:	e02d      	b.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00e      	beq.n	8002cea <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01c      	beq.n	8002d1a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e017      	b.n	8002d1a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
 8002cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fc60 	bl	80035c8 <UART_EndTransmit_IT>
    return;
 8002d08:	e008      	b.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d0a:	bf00      	nop
 8002d0c:	e006      	b.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d0e:	bf00      	nop
 8002d10:	e004      	b.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d12:	bf00      	nop
 8002d14:	e002      	b.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d16:	bf00      	nop
 8002d18:	e000      	b.n	8002d1c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d1a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d1c:	37e8      	adds	r7, #232	; 0xe8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4baf      	ldr	r3, [pc, #700]	; (800304c <UART_SetConfig+0x2e8>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	69f9      	ldr	r1, [r7, #28]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4aa4      	ldr	r2, [pc, #656]	; (8003050 <UART_SetConfig+0x2ec>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	69fa      	ldr	r2, [r7, #28]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a9b      	ldr	r2, [pc, #620]	; (8003054 <UART_SetConfig+0x2f0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d121      	bne.n	8002e2e <UART_SetConfig+0xca>
 8002dea:	4b9b      	ldr	r3, [pc, #620]	; (8003058 <UART_SetConfig+0x2f4>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d817      	bhi.n	8002e28 <UART_SetConfig+0xc4>
 8002df8:	a201      	add	r2, pc, #4	; (adr r2, 8002e00 <UART_SetConfig+0x9c>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e1d 	.word	0x08002e1d
 8002e08:	08002e17 	.word	0x08002e17
 8002e0c:	08002e23 	.word	0x08002e23
 8002e10:	2301      	movs	r3, #1
 8002e12:	76fb      	strb	r3, [r7, #27]
 8002e14:	e070      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e16:	2302      	movs	r3, #2
 8002e18:	76fb      	strb	r3, [r7, #27]
 8002e1a:	e06d      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	76fb      	strb	r3, [r7, #27]
 8002e20:	e06a      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e22:	2308      	movs	r3, #8
 8002e24:	76fb      	strb	r3, [r7, #27]
 8002e26:	e067      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	76fb      	strb	r3, [r7, #27]
 8002e2c:	e064      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a8a      	ldr	r2, [pc, #552]	; (800305c <UART_SetConfig+0x2f8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d132      	bne.n	8002e9e <UART_SetConfig+0x13a>
 8002e38:	4b87      	ldr	r3, [pc, #540]	; (8003058 <UART_SetConfig+0x2f4>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d828      	bhi.n	8002e98 <UART_SetConfig+0x134>
 8002e46:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0xe8>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e81 	.word	0x08002e81
 8002e50:	08002e99 	.word	0x08002e99
 8002e54:	08002e99 	.word	0x08002e99
 8002e58:	08002e99 	.word	0x08002e99
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e99 	.word	0x08002e99
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002e99 	.word	0x08002e99
 8002e6c:	08002e87 	.word	0x08002e87
 8002e70:	08002e99 	.word	0x08002e99
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08002e99 	.word	0x08002e99
 8002e7c:	08002e93 	.word	0x08002e93
 8002e80:	2300      	movs	r3, #0
 8002e82:	76fb      	strb	r3, [r7, #27]
 8002e84:	e038      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e86:	2302      	movs	r3, #2
 8002e88:	76fb      	strb	r3, [r7, #27]
 8002e8a:	e035      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	76fb      	strb	r3, [r7, #27]
 8002e90:	e032      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e92:	2308      	movs	r3, #8
 8002e94:	76fb      	strb	r3, [r7, #27]
 8002e96:	e02f      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e98:	2310      	movs	r3, #16
 8002e9a:	76fb      	strb	r3, [r7, #27]
 8002e9c:	e02c      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6b      	ldr	r2, [pc, #428]	; (8003050 <UART_SetConfig+0x2ec>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d125      	bne.n	8002ef4 <UART_SetConfig+0x190>
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <UART_SetConfig+0x2f4>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002eb6:	d017      	beq.n	8002ee8 <UART_SetConfig+0x184>
 8002eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ebc:	d817      	bhi.n	8002eee <UART_SetConfig+0x18a>
 8002ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec2:	d00b      	beq.n	8002edc <UART_SetConfig+0x178>
 8002ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec8:	d811      	bhi.n	8002eee <UART_SetConfig+0x18a>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <UART_SetConfig+0x172>
 8002ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed2:	d006      	beq.n	8002ee2 <UART_SetConfig+0x17e>
 8002ed4:	e00b      	b.n	8002eee <UART_SetConfig+0x18a>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	76fb      	strb	r3, [r7, #27]
 8002eda:	e00d      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002edc:	2302      	movs	r3, #2
 8002ede:	76fb      	strb	r3, [r7, #27]
 8002ee0:	e00a      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	76fb      	strb	r3, [r7, #27]
 8002ee6:	e007      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002ee8:	2308      	movs	r3, #8
 8002eea:	76fb      	strb	r3, [r7, #27]
 8002eec:	e004      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002eee:	2310      	movs	r3, #16
 8002ef0:	76fb      	strb	r3, [r7, #27]
 8002ef2:	e001      	b.n	8002ef8 <UART_SetConfig+0x194>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a54      	ldr	r2, [pc, #336]	; (8003050 <UART_SetConfig+0x2ec>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d173      	bne.n	8002fea <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f02:	7efb      	ldrb	r3, [r7, #27]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d824      	bhi.n	8002f52 <UART_SetConfig+0x1ee>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <UART_SetConfig+0x1ac>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f35 	.word	0x08002f35
 8002f14:	08002f53 	.word	0x08002f53
 8002f18:	08002f3d 	.word	0x08002f3d
 8002f1c:	08002f53 	.word	0x08002f53
 8002f20:	08002f43 	.word	0x08002f43
 8002f24:	08002f53 	.word	0x08002f53
 8002f28:	08002f53 	.word	0x08002f53
 8002f2c:	08002f53 	.word	0x08002f53
 8002f30:	08002f4b 	.word	0x08002f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f34:	f7fe ffb0 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 8002f38:	6178      	str	r0, [r7, #20]
        break;
 8002f3a:	e00f      	b.n	8002f5c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f3c:	4b48      	ldr	r3, [pc, #288]	; (8003060 <UART_SetConfig+0x2fc>)
 8002f3e:	617b      	str	r3, [r7, #20]
        break;
 8002f40:	e00c      	b.n	8002f5c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f42:	f7fe ff11 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 8002f46:	6178      	str	r0, [r7, #20]
        break;
 8002f48:	e008      	b.n	8002f5c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4e:	617b      	str	r3, [r7, #20]
        break;
 8002f50:	e004      	b.n	8002f5c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	76bb      	strb	r3, [r7, #26]
        break;
 8002f5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 80fc 	beq.w	800315c <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d305      	bcc.n	8002f80 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d902      	bls.n	8002f86 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	76bb      	strb	r3, [r7, #26]
 8002f84:	e0ea      	b.n	800315c <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f04f 0100 	mov.w	r1, #0
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	f04f 0300 	mov.w	r3, #0
 8002f96:	020b      	lsls	r3, r1, #8
 8002f98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f9c:	0202      	lsls	r2, r0, #8
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	6849      	ldr	r1, [r1, #4]
 8002fa2:	0849      	lsrs	r1, r1, #1
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	f04f 0100 	mov.w	r1, #0
 8002faa:	1814      	adds	r4, r2, r0
 8002fac:	eb43 0501 	adc.w	r5, r3, r1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	4620      	mov	r0, r4
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	f7fd f957 	bl	8000270 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd0:	d308      	bcc.n	8002fe4 <UART_SetConfig+0x280>
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd8:	d204      	bcs.n	8002fe4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	e0bb      	b.n	800315c <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	76bb      	strb	r3, [r7, #26]
 8002fe8:	e0b8      	b.n	800315c <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff2:	d167      	bne.n	80030c4 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8002ff4:	7efb      	ldrb	r3, [r7, #27]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d834      	bhi.n	8003064 <UART_SetConfig+0x300>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <UART_SetConfig+0x29c>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	08003025 	.word	0x08003025
 8003004:	0800302d 	.word	0x0800302d
 8003008:	08003035 	.word	0x08003035
 800300c:	08003065 	.word	0x08003065
 8003010:	0800303b 	.word	0x0800303b
 8003014:	08003065 	.word	0x08003065
 8003018:	08003065 	.word	0x08003065
 800301c:	08003065 	.word	0x08003065
 8003020:	08003043 	.word	0x08003043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7fe ff38 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 8003028:	6178      	str	r0, [r7, #20]
        break;
 800302a:	e020      	b.n	800306e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800302c:	f7fe ff4a 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8003030:	6178      	str	r0, [r7, #20]
        break;
 8003032:	e01c      	b.n	800306e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <UART_SetConfig+0x2fc>)
 8003036:	617b      	str	r3, [r7, #20]
        break;
 8003038:	e019      	b.n	800306e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800303a:	f7fe fe95 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 800303e:	6178      	str	r0, [r7, #20]
        break;
 8003040:	e015      	b.n	800306e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003046:	617b      	str	r3, [r7, #20]
        break;
 8003048:	e011      	b.n	800306e <UART_SetConfig+0x30a>
 800304a:	bf00      	nop
 800304c:	efff69f3 	.word	0xefff69f3
 8003050:	40008000 	.word	0x40008000
 8003054:	40013800 	.word	0x40013800
 8003058:	40021000 	.word	0x40021000
 800305c:	40004400 	.word	0x40004400
 8003060:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	76bb      	strb	r3, [r7, #26]
        break;
 800306c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d073      	beq.n	800315c <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	005a      	lsls	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	441a      	add	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	2b0f      	cmp	r3, #15
 800308e:	d916      	bls.n	80030be <UART_SetConfig+0x35a>
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003096:	d212      	bcs.n	80030be <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	b29b      	uxth	r3, r3
 800309c:	f023 030f 	bic.w	r3, r3, #15
 80030a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	89fb      	ldrh	r3, [r7, #14]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	89fa      	ldrh	r2, [r7, #14]
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	e04e      	b.n	800315c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	76bb      	strb	r3, [r7, #26]
 80030c2:	e04b      	b.n	800315c <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030c4:	7efb      	ldrb	r3, [r7, #27]
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d827      	bhi.n	800311a <UART_SetConfig+0x3b6>
 80030ca:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <UART_SetConfig+0x36c>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	080030f5 	.word	0x080030f5
 80030d4:	080030fd 	.word	0x080030fd
 80030d8:	08003105 	.word	0x08003105
 80030dc:	0800311b 	.word	0x0800311b
 80030e0:	0800310b 	.word	0x0800310b
 80030e4:	0800311b 	.word	0x0800311b
 80030e8:	0800311b 	.word	0x0800311b
 80030ec:	0800311b 	.word	0x0800311b
 80030f0:	08003113 	.word	0x08003113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f4:	f7fe fed0 	bl	8001e98 <HAL_RCC_GetPCLK1Freq>
 80030f8:	6178      	str	r0, [r7, #20]
        break;
 80030fa:	e013      	b.n	8003124 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030fc:	f7fe fee2 	bl	8001ec4 <HAL_RCC_GetPCLK2Freq>
 8003100:	6178      	str	r0, [r7, #20]
        break;
 8003102:	e00f      	b.n	8003124 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <UART_SetConfig+0x410>)
 8003106:	617b      	str	r3, [r7, #20]
        break;
 8003108:	e00c      	b.n	8003124 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310a:	f7fe fe2d 	bl	8001d68 <HAL_RCC_GetSysClockFreq>
 800310e:	6178      	str	r0, [r7, #20]
        break;
 8003110:	e008      	b.n	8003124 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003116:	617b      	str	r3, [r7, #20]
        break;
 8003118:	e004      	b.n	8003124 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	76bb      	strb	r3, [r7, #26]
        break;
 8003122:	bf00      	nop
    }

    if (pclk != 0U)
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d018      	beq.n	800315c <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	085a      	lsrs	r2, r3, #1
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	441a      	add	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b0f      	cmp	r3, #15
 8003142:	d909      	bls.n	8003158 <UART_SetConfig+0x3f4>
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314a:	d205      	bcs.n	8003158 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	e001      	b.n	800315c <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003168:	7ebb      	ldrb	r3, [r7, #26]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bdb0      	pop	{r4, r5, r7, pc}
 8003172:	bf00      	nop
 8003174:	00f42400 	.word	0x00f42400

08003178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0320 	and.w	r3, r3, #32
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01a      	beq.n	800328e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003276:	d10a      	bne.n	800328e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]
  }
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032cc:	f7fd fc84 	bl	8000bd8 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d10e      	bne.n	80032fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f82d 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e023      	b.n	8003346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0304 	and.w	r3, r3, #4
 8003308:	2b04      	cmp	r3, #4
 800330a:	d10e      	bne.n	800332a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f817 	bl	800334e <UART_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e00d      	b.n	8003346 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b09c      	sub	sp, #112	; 0x70
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	603b      	str	r3, [r7, #0]
 800335a:	4613      	mov	r3, r2
 800335c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335e:	e0a5      	b.n	80034ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003366:	f000 80a1 	beq.w	80034ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336a:	f7fd fc35 	bl	8000bd8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003376:	429a      	cmp	r2, r3
 8003378:	d302      	bcc.n	8003380 <UART_WaitOnFlagUntilTimeout+0x32>
 800337a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337c:	2b00      	cmp	r3, #0
 800337e:	d13e      	bne.n	80033fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003388:	e853 3f00 	ldrex	r3, [r3]
 800338c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800338e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003394:	667b      	str	r3, [r7, #100]	; 0x64
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800339e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033a6:	e841 2300 	strex	r3, r2, [r1]
 80033aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e6      	bne.n	8003380 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3308      	adds	r3, #8
 80033b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	663b      	str	r3, [r7, #96]	; 0x60
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3308      	adds	r3, #8
 80033d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e5      	bne.n	80033b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e067      	b.n	80034ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d04f      	beq.n	80034ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341a:	d147      	bne.n	80034ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003424:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800343a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
 8003446:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800344a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800344c:	e841 2300 	strex	r3, r2, [r1]
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e6      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3308      	adds	r3, #8
 800345e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	613b      	str	r3, [r7, #16]
   return(result);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3308      	adds	r3, #8
 8003476:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003478:	623a      	str	r2, [r7, #32]
 800347a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	69f9      	ldr	r1, [r7, #28]
 800347e:	6a3a      	ldr	r2, [r7, #32]
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	61bb      	str	r3, [r7, #24]
   return(result);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e5      	bne.n	8003458 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2220      	movs	r2, #32
 800349c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e010      	b.n	80034ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	f43f af4a 	beq.w	8003360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3770      	adds	r7, #112	; 0x70
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b095      	sub	sp, #84	; 0x54
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fc:	643b      	str	r3, [r7, #64]	; 0x40
 80034fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800350a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e6      	bne.n	80034de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	64bb      	str	r3, [r7, #72]	; 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3308      	adds	r3, #8
 800352e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003532:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003548:	2b01      	cmp	r3, #1
 800354a:	d118      	bne.n	800357e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	60bb      	str	r3, [r7, #8]
   return(result);
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f023 0310 	bic.w	r3, r3, #16
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	613b      	str	r3, [r7, #16]
   return(result);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e6      	bne.n	800354c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003590:	bf00      	nop
 8003592:	3754      	adds	r7, #84	; 0x54
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7ff fbbc 	bl	8002d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	61bb      	str	r3, [r7, #24]
 80035f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6979      	ldr	r1, [r7, #20]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	613b      	str	r3, [r7, #16]
   return(result);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e6      	bne.n	80035d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff fb88 	bl	8002d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003614:	bf00      	nop
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <__errno>:
 8003630:	4b01      	ldr	r3, [pc, #4]	; (8003638 <__errno+0x8>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	2000000c 	.word	0x2000000c

0800363c <__libc_init_array>:
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	4d0d      	ldr	r5, [pc, #52]	; (8003674 <__libc_init_array+0x38>)
 8003640:	4c0d      	ldr	r4, [pc, #52]	; (8003678 <__libc_init_array+0x3c>)
 8003642:	1b64      	subs	r4, r4, r5
 8003644:	10a4      	asrs	r4, r4, #2
 8003646:	2600      	movs	r6, #0
 8003648:	42a6      	cmp	r6, r4
 800364a:	d109      	bne.n	8003660 <__libc_init_array+0x24>
 800364c:	4d0b      	ldr	r5, [pc, #44]	; (800367c <__libc_init_array+0x40>)
 800364e:	4c0c      	ldr	r4, [pc, #48]	; (8003680 <__libc_init_array+0x44>)
 8003650:	f000 fc4e 	bl	8003ef0 <_init>
 8003654:	1b64      	subs	r4, r4, r5
 8003656:	10a4      	asrs	r4, r4, #2
 8003658:	2600      	movs	r6, #0
 800365a:	42a6      	cmp	r6, r4
 800365c:	d105      	bne.n	800366a <__libc_init_array+0x2e>
 800365e:	bd70      	pop	{r4, r5, r6, pc}
 8003660:	f855 3b04 	ldr.w	r3, [r5], #4
 8003664:	4798      	blx	r3
 8003666:	3601      	adds	r6, #1
 8003668:	e7ee      	b.n	8003648 <__libc_init_array+0xc>
 800366a:	f855 3b04 	ldr.w	r3, [r5], #4
 800366e:	4798      	blx	r3
 8003670:	3601      	adds	r6, #1
 8003672:	e7f2      	b.n	800365a <__libc_init_array+0x1e>
 8003674:	08003f90 	.word	0x08003f90
 8003678:	08003f90 	.word	0x08003f90
 800367c:	08003f90 	.word	0x08003f90
 8003680:	08003f94 	.word	0x08003f94

08003684 <memset>:
 8003684:	4402      	add	r2, r0
 8003686:	4603      	mov	r3, r0
 8003688:	4293      	cmp	r3, r2
 800368a:	d100      	bne.n	800368e <memset+0xa>
 800368c:	4770      	bx	lr
 800368e:	f803 1b01 	strb.w	r1, [r3], #1
 8003692:	e7f9      	b.n	8003688 <memset+0x4>

08003694 <siprintf>:
 8003694:	b40e      	push	{r1, r2, r3}
 8003696:	b500      	push	{lr}
 8003698:	b09c      	sub	sp, #112	; 0x70
 800369a:	ab1d      	add	r3, sp, #116	; 0x74
 800369c:	9002      	str	r0, [sp, #8]
 800369e:	9006      	str	r0, [sp, #24]
 80036a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036a4:	4809      	ldr	r0, [pc, #36]	; (80036cc <siprintf+0x38>)
 80036a6:	9107      	str	r1, [sp, #28]
 80036a8:	9104      	str	r1, [sp, #16]
 80036aa:	4909      	ldr	r1, [pc, #36]	; (80036d0 <siprintf+0x3c>)
 80036ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80036b0:	9105      	str	r1, [sp, #20]
 80036b2:	6800      	ldr	r0, [r0, #0]
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	a902      	add	r1, sp, #8
 80036b8:	f000 f868 	bl	800378c <_svfiprintf_r>
 80036bc:	9b02      	ldr	r3, [sp, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
 80036c2:	b01c      	add	sp, #112	; 0x70
 80036c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036c8:	b003      	add	sp, #12
 80036ca:	4770      	bx	lr
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	ffff0208 	.word	0xffff0208

080036d4 <__ssputs_r>:
 80036d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d8:	688e      	ldr	r6, [r1, #8]
 80036da:	429e      	cmp	r6, r3
 80036dc:	4682      	mov	sl, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	4690      	mov	r8, r2
 80036e2:	461f      	mov	r7, r3
 80036e4:	d838      	bhi.n	8003758 <__ssputs_r+0x84>
 80036e6:	898a      	ldrh	r2, [r1, #12]
 80036e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036ec:	d032      	beq.n	8003754 <__ssputs_r+0x80>
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	6909      	ldr	r1, [r1, #16]
 80036f2:	eba5 0901 	sub.w	r9, r5, r1
 80036f6:	6965      	ldr	r5, [r4, #20]
 80036f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003700:	3301      	adds	r3, #1
 8003702:	444b      	add	r3, r9
 8003704:	106d      	asrs	r5, r5, #1
 8003706:	429d      	cmp	r5, r3
 8003708:	bf38      	it	cc
 800370a:	461d      	movcc	r5, r3
 800370c:	0553      	lsls	r3, r2, #21
 800370e:	d531      	bpl.n	8003774 <__ssputs_r+0xa0>
 8003710:	4629      	mov	r1, r5
 8003712:	f000 fb47 	bl	8003da4 <_malloc_r>
 8003716:	4606      	mov	r6, r0
 8003718:	b950      	cbnz	r0, 8003730 <__ssputs_r+0x5c>
 800371a:	230c      	movs	r3, #12
 800371c:	f8ca 3000 	str.w	r3, [sl]
 8003720:	89a3      	ldrh	r3, [r4, #12]
 8003722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003726:	81a3      	strh	r3, [r4, #12]
 8003728:	f04f 30ff 	mov.w	r0, #4294967295
 800372c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003730:	6921      	ldr	r1, [r4, #16]
 8003732:	464a      	mov	r2, r9
 8003734:	f000 fabe 	bl	8003cb4 <memcpy>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800373e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	6126      	str	r6, [r4, #16]
 8003746:	6165      	str	r5, [r4, #20]
 8003748:	444e      	add	r6, r9
 800374a:	eba5 0509 	sub.w	r5, r5, r9
 800374e:	6026      	str	r6, [r4, #0]
 8003750:	60a5      	str	r5, [r4, #8]
 8003752:	463e      	mov	r6, r7
 8003754:	42be      	cmp	r6, r7
 8003756:	d900      	bls.n	800375a <__ssputs_r+0x86>
 8003758:	463e      	mov	r6, r7
 800375a:	4632      	mov	r2, r6
 800375c:	6820      	ldr	r0, [r4, #0]
 800375e:	4641      	mov	r1, r8
 8003760:	f000 fab6 	bl	8003cd0 <memmove>
 8003764:	68a3      	ldr	r3, [r4, #8]
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	1b9b      	subs	r3, r3, r6
 800376a:	4432      	add	r2, r6
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	6022      	str	r2, [r4, #0]
 8003770:	2000      	movs	r0, #0
 8003772:	e7db      	b.n	800372c <__ssputs_r+0x58>
 8003774:	462a      	mov	r2, r5
 8003776:	f000 fb6f 	bl	8003e58 <_realloc_r>
 800377a:	4606      	mov	r6, r0
 800377c:	2800      	cmp	r0, #0
 800377e:	d1e1      	bne.n	8003744 <__ssputs_r+0x70>
 8003780:	6921      	ldr	r1, [r4, #16]
 8003782:	4650      	mov	r0, sl
 8003784:	f000 fabe 	bl	8003d04 <_free_r>
 8003788:	e7c7      	b.n	800371a <__ssputs_r+0x46>
	...

0800378c <_svfiprintf_r>:
 800378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003790:	4698      	mov	r8, r3
 8003792:	898b      	ldrh	r3, [r1, #12]
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	b09d      	sub	sp, #116	; 0x74
 8003798:	4607      	mov	r7, r0
 800379a:	460d      	mov	r5, r1
 800379c:	4614      	mov	r4, r2
 800379e:	d50e      	bpl.n	80037be <_svfiprintf_r+0x32>
 80037a0:	690b      	ldr	r3, [r1, #16]
 80037a2:	b963      	cbnz	r3, 80037be <_svfiprintf_r+0x32>
 80037a4:	2140      	movs	r1, #64	; 0x40
 80037a6:	f000 fafd 	bl	8003da4 <_malloc_r>
 80037aa:	6028      	str	r0, [r5, #0]
 80037ac:	6128      	str	r0, [r5, #16]
 80037ae:	b920      	cbnz	r0, 80037ba <_svfiprintf_r+0x2e>
 80037b0:	230c      	movs	r3, #12
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
 80037b8:	e0d1      	b.n	800395e <_svfiprintf_r+0x1d2>
 80037ba:	2340      	movs	r3, #64	; 0x40
 80037bc:	616b      	str	r3, [r5, #20]
 80037be:	2300      	movs	r3, #0
 80037c0:	9309      	str	r3, [sp, #36]	; 0x24
 80037c2:	2320      	movs	r3, #32
 80037c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80037cc:	2330      	movs	r3, #48	; 0x30
 80037ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003978 <_svfiprintf_r+0x1ec>
 80037d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037d6:	f04f 0901 	mov.w	r9, #1
 80037da:	4623      	mov	r3, r4
 80037dc:	469a      	mov	sl, r3
 80037de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037e2:	b10a      	cbz	r2, 80037e8 <_svfiprintf_r+0x5c>
 80037e4:	2a25      	cmp	r2, #37	; 0x25
 80037e6:	d1f9      	bne.n	80037dc <_svfiprintf_r+0x50>
 80037e8:	ebba 0b04 	subs.w	fp, sl, r4
 80037ec:	d00b      	beq.n	8003806 <_svfiprintf_r+0x7a>
 80037ee:	465b      	mov	r3, fp
 80037f0:	4622      	mov	r2, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	4638      	mov	r0, r7
 80037f6:	f7ff ff6d 	bl	80036d4 <__ssputs_r>
 80037fa:	3001      	adds	r0, #1
 80037fc:	f000 80aa 	beq.w	8003954 <_svfiprintf_r+0x1c8>
 8003800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003802:	445a      	add	r2, fp
 8003804:	9209      	str	r2, [sp, #36]	; 0x24
 8003806:	f89a 3000 	ldrb.w	r3, [sl]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f000 80a2 	beq.w	8003954 <_svfiprintf_r+0x1c8>
 8003810:	2300      	movs	r3, #0
 8003812:	f04f 32ff 	mov.w	r2, #4294967295
 8003816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800381a:	f10a 0a01 	add.w	sl, sl, #1
 800381e:	9304      	str	r3, [sp, #16]
 8003820:	9307      	str	r3, [sp, #28]
 8003822:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003826:	931a      	str	r3, [sp, #104]	; 0x68
 8003828:	4654      	mov	r4, sl
 800382a:	2205      	movs	r2, #5
 800382c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003830:	4851      	ldr	r0, [pc, #324]	; (8003978 <_svfiprintf_r+0x1ec>)
 8003832:	f7fc fccd 	bl	80001d0 <memchr>
 8003836:	9a04      	ldr	r2, [sp, #16]
 8003838:	b9d8      	cbnz	r0, 8003872 <_svfiprintf_r+0xe6>
 800383a:	06d0      	lsls	r0, r2, #27
 800383c:	bf44      	itt	mi
 800383e:	2320      	movmi	r3, #32
 8003840:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003844:	0711      	lsls	r1, r2, #28
 8003846:	bf44      	itt	mi
 8003848:	232b      	movmi	r3, #43	; 0x2b
 800384a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800384e:	f89a 3000 	ldrb.w	r3, [sl]
 8003852:	2b2a      	cmp	r3, #42	; 0x2a
 8003854:	d015      	beq.n	8003882 <_svfiprintf_r+0xf6>
 8003856:	9a07      	ldr	r2, [sp, #28]
 8003858:	4654      	mov	r4, sl
 800385a:	2000      	movs	r0, #0
 800385c:	f04f 0c0a 	mov.w	ip, #10
 8003860:	4621      	mov	r1, r4
 8003862:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003866:	3b30      	subs	r3, #48	; 0x30
 8003868:	2b09      	cmp	r3, #9
 800386a:	d94e      	bls.n	800390a <_svfiprintf_r+0x17e>
 800386c:	b1b0      	cbz	r0, 800389c <_svfiprintf_r+0x110>
 800386e:	9207      	str	r2, [sp, #28]
 8003870:	e014      	b.n	800389c <_svfiprintf_r+0x110>
 8003872:	eba0 0308 	sub.w	r3, r0, r8
 8003876:	fa09 f303 	lsl.w	r3, r9, r3
 800387a:	4313      	orrs	r3, r2
 800387c:	9304      	str	r3, [sp, #16]
 800387e:	46a2      	mov	sl, r4
 8003880:	e7d2      	b.n	8003828 <_svfiprintf_r+0x9c>
 8003882:	9b03      	ldr	r3, [sp, #12]
 8003884:	1d19      	adds	r1, r3, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	9103      	str	r1, [sp, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	bfbb      	ittet	lt
 800388e:	425b      	neglt	r3, r3
 8003890:	f042 0202 	orrlt.w	r2, r2, #2
 8003894:	9307      	strge	r3, [sp, #28]
 8003896:	9307      	strlt	r3, [sp, #28]
 8003898:	bfb8      	it	lt
 800389a:	9204      	strlt	r2, [sp, #16]
 800389c:	7823      	ldrb	r3, [r4, #0]
 800389e:	2b2e      	cmp	r3, #46	; 0x2e
 80038a0:	d10c      	bne.n	80038bc <_svfiprintf_r+0x130>
 80038a2:	7863      	ldrb	r3, [r4, #1]
 80038a4:	2b2a      	cmp	r3, #42	; 0x2a
 80038a6:	d135      	bne.n	8003914 <_svfiprintf_r+0x188>
 80038a8:	9b03      	ldr	r3, [sp, #12]
 80038aa:	1d1a      	adds	r2, r3, #4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	9203      	str	r2, [sp, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bfb8      	it	lt
 80038b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80038b8:	3402      	adds	r4, #2
 80038ba:	9305      	str	r3, [sp, #20]
 80038bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003988 <_svfiprintf_r+0x1fc>
 80038c0:	7821      	ldrb	r1, [r4, #0]
 80038c2:	2203      	movs	r2, #3
 80038c4:	4650      	mov	r0, sl
 80038c6:	f7fc fc83 	bl	80001d0 <memchr>
 80038ca:	b140      	cbz	r0, 80038de <_svfiprintf_r+0x152>
 80038cc:	2340      	movs	r3, #64	; 0x40
 80038ce:	eba0 000a 	sub.w	r0, r0, sl
 80038d2:	fa03 f000 	lsl.w	r0, r3, r0
 80038d6:	9b04      	ldr	r3, [sp, #16]
 80038d8:	4303      	orrs	r3, r0
 80038da:	3401      	adds	r4, #1
 80038dc:	9304      	str	r3, [sp, #16]
 80038de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038e2:	4826      	ldr	r0, [pc, #152]	; (800397c <_svfiprintf_r+0x1f0>)
 80038e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038e8:	2206      	movs	r2, #6
 80038ea:	f7fc fc71 	bl	80001d0 <memchr>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	d038      	beq.n	8003964 <_svfiprintf_r+0x1d8>
 80038f2:	4b23      	ldr	r3, [pc, #140]	; (8003980 <_svfiprintf_r+0x1f4>)
 80038f4:	bb1b      	cbnz	r3, 800393e <_svfiprintf_r+0x1b2>
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	3307      	adds	r3, #7
 80038fa:	f023 0307 	bic.w	r3, r3, #7
 80038fe:	3308      	adds	r3, #8
 8003900:	9303      	str	r3, [sp, #12]
 8003902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003904:	4433      	add	r3, r6
 8003906:	9309      	str	r3, [sp, #36]	; 0x24
 8003908:	e767      	b.n	80037da <_svfiprintf_r+0x4e>
 800390a:	fb0c 3202 	mla	r2, ip, r2, r3
 800390e:	460c      	mov	r4, r1
 8003910:	2001      	movs	r0, #1
 8003912:	e7a5      	b.n	8003860 <_svfiprintf_r+0xd4>
 8003914:	2300      	movs	r3, #0
 8003916:	3401      	adds	r4, #1
 8003918:	9305      	str	r3, [sp, #20]
 800391a:	4619      	mov	r1, r3
 800391c:	f04f 0c0a 	mov.w	ip, #10
 8003920:	4620      	mov	r0, r4
 8003922:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003926:	3a30      	subs	r2, #48	; 0x30
 8003928:	2a09      	cmp	r2, #9
 800392a:	d903      	bls.n	8003934 <_svfiprintf_r+0x1a8>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0c5      	beq.n	80038bc <_svfiprintf_r+0x130>
 8003930:	9105      	str	r1, [sp, #20]
 8003932:	e7c3      	b.n	80038bc <_svfiprintf_r+0x130>
 8003934:	fb0c 2101 	mla	r1, ip, r1, r2
 8003938:	4604      	mov	r4, r0
 800393a:	2301      	movs	r3, #1
 800393c:	e7f0      	b.n	8003920 <_svfiprintf_r+0x194>
 800393e:	ab03      	add	r3, sp, #12
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	462a      	mov	r2, r5
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <_svfiprintf_r+0x1f8>)
 8003946:	a904      	add	r1, sp, #16
 8003948:	4638      	mov	r0, r7
 800394a:	f3af 8000 	nop.w
 800394e:	1c42      	adds	r2, r0, #1
 8003950:	4606      	mov	r6, r0
 8003952:	d1d6      	bne.n	8003902 <_svfiprintf_r+0x176>
 8003954:	89ab      	ldrh	r3, [r5, #12]
 8003956:	065b      	lsls	r3, r3, #25
 8003958:	f53f af2c 	bmi.w	80037b4 <_svfiprintf_r+0x28>
 800395c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800395e:	b01d      	add	sp, #116	; 0x74
 8003960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003964:	ab03      	add	r3, sp, #12
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	462a      	mov	r2, r5
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <_svfiprintf_r+0x1f8>)
 800396c:	a904      	add	r1, sp, #16
 800396e:	4638      	mov	r0, r7
 8003970:	f000 f87a 	bl	8003a68 <_printf_i>
 8003974:	e7eb      	b.n	800394e <_svfiprintf_r+0x1c2>
 8003976:	bf00      	nop
 8003978:	08003f54 	.word	0x08003f54
 800397c:	08003f5e 	.word	0x08003f5e
 8003980:	00000000 	.word	0x00000000
 8003984:	080036d5 	.word	0x080036d5
 8003988:	08003f5a 	.word	0x08003f5a

0800398c <_printf_common>:
 800398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003990:	4616      	mov	r6, r2
 8003992:	4699      	mov	r9, r3
 8003994:	688a      	ldr	r2, [r1, #8]
 8003996:	690b      	ldr	r3, [r1, #16]
 8003998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800399c:	4293      	cmp	r3, r2
 800399e:	bfb8      	it	lt
 80039a0:	4613      	movlt	r3, r2
 80039a2:	6033      	str	r3, [r6, #0]
 80039a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039a8:	4607      	mov	r7, r0
 80039aa:	460c      	mov	r4, r1
 80039ac:	b10a      	cbz	r2, 80039b2 <_printf_common+0x26>
 80039ae:	3301      	adds	r3, #1
 80039b0:	6033      	str	r3, [r6, #0]
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	0699      	lsls	r1, r3, #26
 80039b6:	bf42      	ittt	mi
 80039b8:	6833      	ldrmi	r3, [r6, #0]
 80039ba:	3302      	addmi	r3, #2
 80039bc:	6033      	strmi	r3, [r6, #0]
 80039be:	6825      	ldr	r5, [r4, #0]
 80039c0:	f015 0506 	ands.w	r5, r5, #6
 80039c4:	d106      	bne.n	80039d4 <_printf_common+0x48>
 80039c6:	f104 0a19 	add.w	sl, r4, #25
 80039ca:	68e3      	ldr	r3, [r4, #12]
 80039cc:	6832      	ldr	r2, [r6, #0]
 80039ce:	1a9b      	subs	r3, r3, r2
 80039d0:	42ab      	cmp	r3, r5
 80039d2:	dc26      	bgt.n	8003a22 <_printf_common+0x96>
 80039d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039d8:	1e13      	subs	r3, r2, #0
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	bf18      	it	ne
 80039de:	2301      	movne	r3, #1
 80039e0:	0692      	lsls	r2, r2, #26
 80039e2:	d42b      	bmi.n	8003a3c <_printf_common+0xb0>
 80039e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039e8:	4649      	mov	r1, r9
 80039ea:	4638      	mov	r0, r7
 80039ec:	47c0      	blx	r8
 80039ee:	3001      	adds	r0, #1
 80039f0:	d01e      	beq.n	8003a30 <_printf_common+0xa4>
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	68e5      	ldr	r5, [r4, #12]
 80039f6:	6832      	ldr	r2, [r6, #0]
 80039f8:	f003 0306 	and.w	r3, r3, #6
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	bf08      	it	eq
 8003a00:	1aad      	subeq	r5, r5, r2
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	6922      	ldr	r2, [r4, #16]
 8003a06:	bf0c      	ite	eq
 8003a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a0c:	2500      	movne	r5, #0
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bfc4      	itt	gt
 8003a12:	1a9b      	subgt	r3, r3, r2
 8003a14:	18ed      	addgt	r5, r5, r3
 8003a16:	2600      	movs	r6, #0
 8003a18:	341a      	adds	r4, #26
 8003a1a:	42b5      	cmp	r5, r6
 8003a1c:	d11a      	bne.n	8003a54 <_printf_common+0xc8>
 8003a1e:	2000      	movs	r0, #0
 8003a20:	e008      	b.n	8003a34 <_printf_common+0xa8>
 8003a22:	2301      	movs	r3, #1
 8003a24:	4652      	mov	r2, sl
 8003a26:	4649      	mov	r1, r9
 8003a28:	4638      	mov	r0, r7
 8003a2a:	47c0      	blx	r8
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	d103      	bne.n	8003a38 <_printf_common+0xac>
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a38:	3501      	adds	r5, #1
 8003a3a:	e7c6      	b.n	80039ca <_printf_common+0x3e>
 8003a3c:	18e1      	adds	r1, r4, r3
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	2030      	movs	r0, #48	; 0x30
 8003a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a46:	4422      	add	r2, r4
 8003a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a50:	3302      	adds	r3, #2
 8003a52:	e7c7      	b.n	80039e4 <_printf_common+0x58>
 8003a54:	2301      	movs	r3, #1
 8003a56:	4622      	mov	r2, r4
 8003a58:	4649      	mov	r1, r9
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	47c0      	blx	r8
 8003a5e:	3001      	adds	r0, #1
 8003a60:	d0e6      	beq.n	8003a30 <_printf_common+0xa4>
 8003a62:	3601      	adds	r6, #1
 8003a64:	e7d9      	b.n	8003a1a <_printf_common+0x8e>
	...

08003a68 <_printf_i>:
 8003a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	4691      	mov	r9, r2
 8003a70:	7e27      	ldrb	r7, [r4, #24]
 8003a72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a74:	2f78      	cmp	r7, #120	; 0x78
 8003a76:	4680      	mov	r8, r0
 8003a78:	469a      	mov	sl, r3
 8003a7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a7e:	d807      	bhi.n	8003a90 <_printf_i+0x28>
 8003a80:	2f62      	cmp	r7, #98	; 0x62
 8003a82:	d80a      	bhi.n	8003a9a <_printf_i+0x32>
 8003a84:	2f00      	cmp	r7, #0
 8003a86:	f000 80d8 	beq.w	8003c3a <_printf_i+0x1d2>
 8003a8a:	2f58      	cmp	r7, #88	; 0x58
 8003a8c:	f000 80a3 	beq.w	8003bd6 <_printf_i+0x16e>
 8003a90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a98:	e03a      	b.n	8003b10 <_printf_i+0xa8>
 8003a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a9e:	2b15      	cmp	r3, #21
 8003aa0:	d8f6      	bhi.n	8003a90 <_printf_i+0x28>
 8003aa2:	a001      	add	r0, pc, #4	; (adr r0, 8003aa8 <_printf_i+0x40>)
 8003aa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003aa8:	08003b01 	.word	0x08003b01
 8003aac:	08003b15 	.word	0x08003b15
 8003ab0:	08003a91 	.word	0x08003a91
 8003ab4:	08003a91 	.word	0x08003a91
 8003ab8:	08003a91 	.word	0x08003a91
 8003abc:	08003a91 	.word	0x08003a91
 8003ac0:	08003b15 	.word	0x08003b15
 8003ac4:	08003a91 	.word	0x08003a91
 8003ac8:	08003a91 	.word	0x08003a91
 8003acc:	08003a91 	.word	0x08003a91
 8003ad0:	08003a91 	.word	0x08003a91
 8003ad4:	08003c21 	.word	0x08003c21
 8003ad8:	08003b45 	.word	0x08003b45
 8003adc:	08003c03 	.word	0x08003c03
 8003ae0:	08003a91 	.word	0x08003a91
 8003ae4:	08003a91 	.word	0x08003a91
 8003ae8:	08003c43 	.word	0x08003c43
 8003aec:	08003a91 	.word	0x08003a91
 8003af0:	08003b45 	.word	0x08003b45
 8003af4:	08003a91 	.word	0x08003a91
 8003af8:	08003a91 	.word	0x08003a91
 8003afc:	08003c0b 	.word	0x08003c0b
 8003b00:	680b      	ldr	r3, [r1, #0]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	600a      	str	r2, [r1, #0]
 8003b08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0a3      	b.n	8003c5c <_printf_i+0x1f4>
 8003b14:	6825      	ldr	r5, [r4, #0]
 8003b16:	6808      	ldr	r0, [r1, #0]
 8003b18:	062e      	lsls	r6, r5, #24
 8003b1a:	f100 0304 	add.w	r3, r0, #4
 8003b1e:	d50a      	bpl.n	8003b36 <_printf_i+0xce>
 8003b20:	6805      	ldr	r5, [r0, #0]
 8003b22:	600b      	str	r3, [r1, #0]
 8003b24:	2d00      	cmp	r5, #0
 8003b26:	da03      	bge.n	8003b30 <_printf_i+0xc8>
 8003b28:	232d      	movs	r3, #45	; 0x2d
 8003b2a:	426d      	negs	r5, r5
 8003b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b30:	485e      	ldr	r0, [pc, #376]	; (8003cac <_printf_i+0x244>)
 8003b32:	230a      	movs	r3, #10
 8003b34:	e019      	b.n	8003b6a <_printf_i+0x102>
 8003b36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b3a:	6805      	ldr	r5, [r0, #0]
 8003b3c:	600b      	str	r3, [r1, #0]
 8003b3e:	bf18      	it	ne
 8003b40:	b22d      	sxthne	r5, r5
 8003b42:	e7ef      	b.n	8003b24 <_printf_i+0xbc>
 8003b44:	680b      	ldr	r3, [r1, #0]
 8003b46:	6825      	ldr	r5, [r4, #0]
 8003b48:	1d18      	adds	r0, r3, #4
 8003b4a:	6008      	str	r0, [r1, #0]
 8003b4c:	0628      	lsls	r0, r5, #24
 8003b4e:	d501      	bpl.n	8003b54 <_printf_i+0xec>
 8003b50:	681d      	ldr	r5, [r3, #0]
 8003b52:	e002      	b.n	8003b5a <_printf_i+0xf2>
 8003b54:	0669      	lsls	r1, r5, #25
 8003b56:	d5fb      	bpl.n	8003b50 <_printf_i+0xe8>
 8003b58:	881d      	ldrh	r5, [r3, #0]
 8003b5a:	4854      	ldr	r0, [pc, #336]	; (8003cac <_printf_i+0x244>)
 8003b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b5e:	bf0c      	ite	eq
 8003b60:	2308      	moveq	r3, #8
 8003b62:	230a      	movne	r3, #10
 8003b64:	2100      	movs	r1, #0
 8003b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b6a:	6866      	ldr	r6, [r4, #4]
 8003b6c:	60a6      	str	r6, [r4, #8]
 8003b6e:	2e00      	cmp	r6, #0
 8003b70:	bfa2      	ittt	ge
 8003b72:	6821      	ldrge	r1, [r4, #0]
 8003b74:	f021 0104 	bicge.w	r1, r1, #4
 8003b78:	6021      	strge	r1, [r4, #0]
 8003b7a:	b90d      	cbnz	r5, 8003b80 <_printf_i+0x118>
 8003b7c:	2e00      	cmp	r6, #0
 8003b7e:	d04d      	beq.n	8003c1c <_printf_i+0x1b4>
 8003b80:	4616      	mov	r6, r2
 8003b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b86:	fb03 5711 	mls	r7, r3, r1, r5
 8003b8a:	5dc7      	ldrb	r7, [r0, r7]
 8003b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b90:	462f      	mov	r7, r5
 8003b92:	42bb      	cmp	r3, r7
 8003b94:	460d      	mov	r5, r1
 8003b96:	d9f4      	bls.n	8003b82 <_printf_i+0x11a>
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d10b      	bne.n	8003bb4 <_printf_i+0x14c>
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	07df      	lsls	r7, r3, #31
 8003ba0:	d508      	bpl.n	8003bb4 <_printf_i+0x14c>
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	6861      	ldr	r1, [r4, #4]
 8003ba6:	4299      	cmp	r1, r3
 8003ba8:	bfde      	ittt	le
 8003baa:	2330      	movle	r3, #48	; 0x30
 8003bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bb4:	1b92      	subs	r2, r2, r6
 8003bb6:	6122      	str	r2, [r4, #16]
 8003bb8:	f8cd a000 	str.w	sl, [sp]
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	aa03      	add	r2, sp, #12
 8003bc0:	4621      	mov	r1, r4
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	f7ff fee2 	bl	800398c <_printf_common>
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d14c      	bne.n	8003c66 <_printf_i+0x1fe>
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	b004      	add	sp, #16
 8003bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd6:	4835      	ldr	r0, [pc, #212]	; (8003cac <_printf_i+0x244>)
 8003bd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	680e      	ldr	r6, [r1, #0]
 8003be0:	061f      	lsls	r7, r3, #24
 8003be2:	f856 5b04 	ldr.w	r5, [r6], #4
 8003be6:	600e      	str	r6, [r1, #0]
 8003be8:	d514      	bpl.n	8003c14 <_printf_i+0x1ac>
 8003bea:	07d9      	lsls	r1, r3, #31
 8003bec:	bf44      	itt	mi
 8003bee:	f043 0320 	orrmi.w	r3, r3, #32
 8003bf2:	6023      	strmi	r3, [r4, #0]
 8003bf4:	b91d      	cbnz	r5, 8003bfe <_printf_i+0x196>
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f023 0320 	bic.w	r3, r3, #32
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	2310      	movs	r3, #16
 8003c00:	e7b0      	b.n	8003b64 <_printf_i+0xfc>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	f043 0320 	orr.w	r3, r3, #32
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	2378      	movs	r3, #120	; 0x78
 8003c0c:	4828      	ldr	r0, [pc, #160]	; (8003cb0 <_printf_i+0x248>)
 8003c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c12:	e7e3      	b.n	8003bdc <_printf_i+0x174>
 8003c14:	065e      	lsls	r6, r3, #25
 8003c16:	bf48      	it	mi
 8003c18:	b2ad      	uxthmi	r5, r5
 8003c1a:	e7e6      	b.n	8003bea <_printf_i+0x182>
 8003c1c:	4616      	mov	r6, r2
 8003c1e:	e7bb      	b.n	8003b98 <_printf_i+0x130>
 8003c20:	680b      	ldr	r3, [r1, #0]
 8003c22:	6826      	ldr	r6, [r4, #0]
 8003c24:	6960      	ldr	r0, [r4, #20]
 8003c26:	1d1d      	adds	r5, r3, #4
 8003c28:	600d      	str	r5, [r1, #0]
 8003c2a:	0635      	lsls	r5, r6, #24
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	d501      	bpl.n	8003c34 <_printf_i+0x1cc>
 8003c30:	6018      	str	r0, [r3, #0]
 8003c32:	e002      	b.n	8003c3a <_printf_i+0x1d2>
 8003c34:	0671      	lsls	r1, r6, #25
 8003c36:	d5fb      	bpl.n	8003c30 <_printf_i+0x1c8>
 8003c38:	8018      	strh	r0, [r3, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	6123      	str	r3, [r4, #16]
 8003c3e:	4616      	mov	r6, r2
 8003c40:	e7ba      	b.n	8003bb8 <_printf_i+0x150>
 8003c42:	680b      	ldr	r3, [r1, #0]
 8003c44:	1d1a      	adds	r2, r3, #4
 8003c46:	600a      	str	r2, [r1, #0]
 8003c48:	681e      	ldr	r6, [r3, #0]
 8003c4a:	6862      	ldr	r2, [r4, #4]
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4630      	mov	r0, r6
 8003c50:	f7fc fabe 	bl	80001d0 <memchr>
 8003c54:	b108      	cbz	r0, 8003c5a <_printf_i+0x1f2>
 8003c56:	1b80      	subs	r0, r0, r6
 8003c58:	6060      	str	r0, [r4, #4]
 8003c5a:	6863      	ldr	r3, [r4, #4]
 8003c5c:	6123      	str	r3, [r4, #16]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c64:	e7a8      	b.n	8003bb8 <_printf_i+0x150>
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	4640      	mov	r0, r8
 8003c6e:	47d0      	blx	sl
 8003c70:	3001      	adds	r0, #1
 8003c72:	d0ab      	beq.n	8003bcc <_printf_i+0x164>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	079b      	lsls	r3, r3, #30
 8003c78:	d413      	bmi.n	8003ca2 <_printf_i+0x23a>
 8003c7a:	68e0      	ldr	r0, [r4, #12]
 8003c7c:	9b03      	ldr	r3, [sp, #12]
 8003c7e:	4298      	cmp	r0, r3
 8003c80:	bfb8      	it	lt
 8003c82:	4618      	movlt	r0, r3
 8003c84:	e7a4      	b.n	8003bd0 <_printf_i+0x168>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4632      	mov	r2, r6
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	4640      	mov	r0, r8
 8003c8e:	47d0      	blx	sl
 8003c90:	3001      	adds	r0, #1
 8003c92:	d09b      	beq.n	8003bcc <_printf_i+0x164>
 8003c94:	3501      	adds	r5, #1
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	9903      	ldr	r1, [sp, #12]
 8003c9a:	1a5b      	subs	r3, r3, r1
 8003c9c:	42ab      	cmp	r3, r5
 8003c9e:	dcf2      	bgt.n	8003c86 <_printf_i+0x21e>
 8003ca0:	e7eb      	b.n	8003c7a <_printf_i+0x212>
 8003ca2:	2500      	movs	r5, #0
 8003ca4:	f104 0619 	add.w	r6, r4, #25
 8003ca8:	e7f5      	b.n	8003c96 <_printf_i+0x22e>
 8003caa:	bf00      	nop
 8003cac:	08003f65 	.word	0x08003f65
 8003cb0:	08003f76 	.word	0x08003f76

08003cb4 <memcpy>:
 8003cb4:	440a      	add	r2, r1
 8003cb6:	4291      	cmp	r1, r2
 8003cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cbc:	d100      	bne.n	8003cc0 <memcpy+0xc>
 8003cbe:	4770      	bx	lr
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cca:	4291      	cmp	r1, r2
 8003ccc:	d1f9      	bne.n	8003cc2 <memcpy+0xe>
 8003cce:	bd10      	pop	{r4, pc}

08003cd0 <memmove>:
 8003cd0:	4288      	cmp	r0, r1
 8003cd2:	b510      	push	{r4, lr}
 8003cd4:	eb01 0402 	add.w	r4, r1, r2
 8003cd8:	d902      	bls.n	8003ce0 <memmove+0x10>
 8003cda:	4284      	cmp	r4, r0
 8003cdc:	4623      	mov	r3, r4
 8003cde:	d807      	bhi.n	8003cf0 <memmove+0x20>
 8003ce0:	1e43      	subs	r3, r0, #1
 8003ce2:	42a1      	cmp	r1, r4
 8003ce4:	d008      	beq.n	8003cf8 <memmove+0x28>
 8003ce6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cee:	e7f8      	b.n	8003ce2 <memmove+0x12>
 8003cf0:	4402      	add	r2, r0
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	428a      	cmp	r2, r1
 8003cf6:	d100      	bne.n	8003cfa <memmove+0x2a>
 8003cf8:	bd10      	pop	{r4, pc}
 8003cfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d02:	e7f7      	b.n	8003cf4 <memmove+0x24>

08003d04 <_free_r>:
 8003d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d06:	2900      	cmp	r1, #0
 8003d08:	d048      	beq.n	8003d9c <_free_r+0x98>
 8003d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d0e:	9001      	str	r0, [sp, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f1a1 0404 	sub.w	r4, r1, #4
 8003d16:	bfb8      	it	lt
 8003d18:	18e4      	addlt	r4, r4, r3
 8003d1a:	f000 f8d3 	bl	8003ec4 <__malloc_lock>
 8003d1e:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <_free_r+0x9c>)
 8003d20:	9801      	ldr	r0, [sp, #4]
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	4615      	mov	r5, r2
 8003d26:	b933      	cbnz	r3, 8003d36 <_free_r+0x32>
 8003d28:	6063      	str	r3, [r4, #4]
 8003d2a:	6014      	str	r4, [r2, #0]
 8003d2c:	b003      	add	sp, #12
 8003d2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d32:	f000 b8cd 	b.w	8003ed0 <__malloc_unlock>
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	d90b      	bls.n	8003d52 <_free_r+0x4e>
 8003d3a:	6821      	ldr	r1, [r4, #0]
 8003d3c:	1862      	adds	r2, r4, r1
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	bf04      	itt	eq
 8003d42:	681a      	ldreq	r2, [r3, #0]
 8003d44:	685b      	ldreq	r3, [r3, #4]
 8003d46:	6063      	str	r3, [r4, #4]
 8003d48:	bf04      	itt	eq
 8003d4a:	1852      	addeq	r2, r2, r1
 8003d4c:	6022      	streq	r2, [r4, #0]
 8003d4e:	602c      	str	r4, [r5, #0]
 8003d50:	e7ec      	b.n	8003d2c <_free_r+0x28>
 8003d52:	461a      	mov	r2, r3
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	b10b      	cbz	r3, 8003d5c <_free_r+0x58>
 8003d58:	42a3      	cmp	r3, r4
 8003d5a:	d9fa      	bls.n	8003d52 <_free_r+0x4e>
 8003d5c:	6811      	ldr	r1, [r2, #0]
 8003d5e:	1855      	adds	r5, r2, r1
 8003d60:	42a5      	cmp	r5, r4
 8003d62:	d10b      	bne.n	8003d7c <_free_r+0x78>
 8003d64:	6824      	ldr	r4, [r4, #0]
 8003d66:	4421      	add	r1, r4
 8003d68:	1854      	adds	r4, r2, r1
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	6011      	str	r1, [r2, #0]
 8003d6e:	d1dd      	bne.n	8003d2c <_free_r+0x28>
 8003d70:	681c      	ldr	r4, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	6053      	str	r3, [r2, #4]
 8003d76:	4421      	add	r1, r4
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	e7d7      	b.n	8003d2c <_free_r+0x28>
 8003d7c:	d902      	bls.n	8003d84 <_free_r+0x80>
 8003d7e:	230c      	movs	r3, #12
 8003d80:	6003      	str	r3, [r0, #0]
 8003d82:	e7d3      	b.n	8003d2c <_free_r+0x28>
 8003d84:	6825      	ldr	r5, [r4, #0]
 8003d86:	1961      	adds	r1, r4, r5
 8003d88:	428b      	cmp	r3, r1
 8003d8a:	bf04      	itt	eq
 8003d8c:	6819      	ldreq	r1, [r3, #0]
 8003d8e:	685b      	ldreq	r3, [r3, #4]
 8003d90:	6063      	str	r3, [r4, #4]
 8003d92:	bf04      	itt	eq
 8003d94:	1949      	addeq	r1, r1, r5
 8003d96:	6021      	streq	r1, [r4, #0]
 8003d98:	6054      	str	r4, [r2, #4]
 8003d9a:	e7c7      	b.n	8003d2c <_free_r+0x28>
 8003d9c:	b003      	add	sp, #12
 8003d9e:	bd30      	pop	{r4, r5, pc}
 8003da0:	20000094 	.word	0x20000094

08003da4 <_malloc_r>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	1ccd      	adds	r5, r1, #3
 8003da8:	f025 0503 	bic.w	r5, r5, #3
 8003dac:	3508      	adds	r5, #8
 8003dae:	2d0c      	cmp	r5, #12
 8003db0:	bf38      	it	cc
 8003db2:	250c      	movcc	r5, #12
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	4606      	mov	r6, r0
 8003db8:	db01      	blt.n	8003dbe <_malloc_r+0x1a>
 8003dba:	42a9      	cmp	r1, r5
 8003dbc:	d903      	bls.n	8003dc6 <_malloc_r+0x22>
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	6033      	str	r3, [r6, #0]
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc6:	f000 f87d 	bl	8003ec4 <__malloc_lock>
 8003dca:	4921      	ldr	r1, [pc, #132]	; (8003e50 <_malloc_r+0xac>)
 8003dcc:	680a      	ldr	r2, [r1, #0]
 8003dce:	4614      	mov	r4, r2
 8003dd0:	b99c      	cbnz	r4, 8003dfa <_malloc_r+0x56>
 8003dd2:	4f20      	ldr	r7, [pc, #128]	; (8003e54 <_malloc_r+0xb0>)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	b923      	cbnz	r3, 8003de2 <_malloc_r+0x3e>
 8003dd8:	4621      	mov	r1, r4
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f000 f862 	bl	8003ea4 <_sbrk_r>
 8003de0:	6038      	str	r0, [r7, #0]
 8003de2:	4629      	mov	r1, r5
 8003de4:	4630      	mov	r0, r6
 8003de6:	f000 f85d 	bl	8003ea4 <_sbrk_r>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	d123      	bne.n	8003e36 <_malloc_r+0x92>
 8003dee:	230c      	movs	r3, #12
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	4630      	mov	r0, r6
 8003df4:	f000 f86c 	bl	8003ed0 <__malloc_unlock>
 8003df8:	e7e3      	b.n	8003dc2 <_malloc_r+0x1e>
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	1b5b      	subs	r3, r3, r5
 8003dfe:	d417      	bmi.n	8003e30 <_malloc_r+0x8c>
 8003e00:	2b0b      	cmp	r3, #11
 8003e02:	d903      	bls.n	8003e0c <_malloc_r+0x68>
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	441c      	add	r4, r3
 8003e08:	6025      	str	r5, [r4, #0]
 8003e0a:	e004      	b.n	8003e16 <_malloc_r+0x72>
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	42a2      	cmp	r2, r4
 8003e10:	bf0c      	ite	eq
 8003e12:	600b      	streq	r3, [r1, #0]
 8003e14:	6053      	strne	r3, [r2, #4]
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 f85a 	bl	8003ed0 <__malloc_unlock>
 8003e1c:	f104 000b 	add.w	r0, r4, #11
 8003e20:	1d23      	adds	r3, r4, #4
 8003e22:	f020 0007 	bic.w	r0, r0, #7
 8003e26:	1ac2      	subs	r2, r0, r3
 8003e28:	d0cc      	beq.n	8003dc4 <_malloc_r+0x20>
 8003e2a:	1a1b      	subs	r3, r3, r0
 8003e2c:	50a3      	str	r3, [r4, r2]
 8003e2e:	e7c9      	b.n	8003dc4 <_malloc_r+0x20>
 8003e30:	4622      	mov	r2, r4
 8003e32:	6864      	ldr	r4, [r4, #4]
 8003e34:	e7cc      	b.n	8003dd0 <_malloc_r+0x2c>
 8003e36:	1cc4      	adds	r4, r0, #3
 8003e38:	f024 0403 	bic.w	r4, r4, #3
 8003e3c:	42a0      	cmp	r0, r4
 8003e3e:	d0e3      	beq.n	8003e08 <_malloc_r+0x64>
 8003e40:	1a21      	subs	r1, r4, r0
 8003e42:	4630      	mov	r0, r6
 8003e44:	f000 f82e 	bl	8003ea4 <_sbrk_r>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d1dd      	bne.n	8003e08 <_malloc_r+0x64>
 8003e4c:	e7cf      	b.n	8003dee <_malloc_r+0x4a>
 8003e4e:	bf00      	nop
 8003e50:	20000094 	.word	0x20000094
 8003e54:	20000098 	.word	0x20000098

08003e58 <_realloc_r>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	4607      	mov	r7, r0
 8003e5c:	4614      	mov	r4, r2
 8003e5e:	460e      	mov	r6, r1
 8003e60:	b921      	cbnz	r1, 8003e6c <_realloc_r+0x14>
 8003e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e66:	4611      	mov	r1, r2
 8003e68:	f7ff bf9c 	b.w	8003da4 <_malloc_r>
 8003e6c:	b922      	cbnz	r2, 8003e78 <_realloc_r+0x20>
 8003e6e:	f7ff ff49 	bl	8003d04 <_free_r>
 8003e72:	4625      	mov	r5, r4
 8003e74:	4628      	mov	r0, r5
 8003e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e78:	f000 f830 	bl	8003edc <_malloc_usable_size_r>
 8003e7c:	42a0      	cmp	r0, r4
 8003e7e:	d20f      	bcs.n	8003ea0 <_realloc_r+0x48>
 8003e80:	4621      	mov	r1, r4
 8003e82:	4638      	mov	r0, r7
 8003e84:	f7ff ff8e 	bl	8003da4 <_malloc_r>
 8003e88:	4605      	mov	r5, r0
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d0f2      	beq.n	8003e74 <_realloc_r+0x1c>
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4622      	mov	r2, r4
 8003e92:	f7ff ff0f 	bl	8003cb4 <memcpy>
 8003e96:	4631      	mov	r1, r6
 8003e98:	4638      	mov	r0, r7
 8003e9a:	f7ff ff33 	bl	8003d04 <_free_r>
 8003e9e:	e7e9      	b.n	8003e74 <_realloc_r+0x1c>
 8003ea0:	4635      	mov	r5, r6
 8003ea2:	e7e7      	b.n	8003e74 <_realloc_r+0x1c>

08003ea4 <_sbrk_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d06      	ldr	r5, [pc, #24]	; (8003ec0 <_sbrk_r+0x1c>)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4608      	mov	r0, r1
 8003eae:	602b      	str	r3, [r5, #0]
 8003eb0:	f7fc fdb8 	bl	8000a24 <_sbrk>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d102      	bne.n	8003ebe <_sbrk_r+0x1a>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	b103      	cbz	r3, 8003ebe <_sbrk_r+0x1a>
 8003ebc:	6023      	str	r3, [r4, #0]
 8003ebe:	bd38      	pop	{r3, r4, r5, pc}
 8003ec0:	2000020c 	.word	0x2000020c

08003ec4 <__malloc_lock>:
 8003ec4:	4801      	ldr	r0, [pc, #4]	; (8003ecc <__malloc_lock+0x8>)
 8003ec6:	f000 b811 	b.w	8003eec <__retarget_lock_acquire_recursive>
 8003eca:	bf00      	nop
 8003ecc:	20000214 	.word	0x20000214

08003ed0 <__malloc_unlock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__malloc_unlock+0x8>)
 8003ed2:	f000 b80c 	b.w	8003eee <__retarget_lock_release_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	20000214 	.word	0x20000214

08003edc <_malloc_usable_size_r>:
 8003edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee0:	1f18      	subs	r0, r3, #4
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bfbc      	itt	lt
 8003ee6:	580b      	ldrlt	r3, [r1, r0]
 8003ee8:	18c0      	addlt	r0, r0, r3
 8003eea:	4770      	bx	lr

08003eec <__retarget_lock_acquire_recursive>:
 8003eec:	4770      	bx	lr

08003eee <__retarget_lock_release_recursive>:
 8003eee:	4770      	bx	lr

08003ef0 <_init>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr

08003efc <_fini>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr
