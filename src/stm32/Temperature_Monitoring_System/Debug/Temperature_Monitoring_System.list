
Temperature_Monitoring_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08009ae0  08009ae0  00019ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fdc  08009fdc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fe4  08009fe4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fe8  08009fe8  00019fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e4  0800a1d0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800a1d0  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f76  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3b  00000000  00000000  0003918a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003d128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022771  00000000  00000000  0003e370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b2e  00000000  00000000  00060ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce658  00000000  00000000  0007760f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c0  00000000  00000000  00145cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ac8 	.word	0x08009ac8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009ac8 	.word	0x08009ac8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b9a4 	b.w	8000f6c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff ff49 	bl	8000adc <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_dmul>
 8000c7a:	f7ff ff57 	bl	8000b2c <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fc40 	bl	8000504 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fcb6 	bl	80005f8 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faf8 	bl	8000288 <__aeabi_dsub>
 8000c98:	f7ff ff48 	bl	8000b2c <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f74:	b0c0      	sub	sp, #256	; 0x100
 8000f76:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f000 ff9d 	bl	8001eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 faba 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 fc4a 	bl	8001818 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 fc18 	bl	80017b8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f88:	f000 fb56 	bl	8001638 <MX_TIM1_Init>
  MX_I2C3_Init();
 8000f8c:	f000 fb14 	bl	80015b8 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8000f90:	f000 fbe2 	bl	8001758 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_UART_Receive_IT(&huart2,(uint8_t *)received_Temp, 5);
 8000f94:	2205      	movs	r2, #5
 8000f96:	4910      	ldr	r1, [pc, #64]	; (8000fd8 <main+0x68>)
 8000f98:	4810      	ldr	r0, [pc, #64]	; (8000fdc <main+0x6c>)
 8000f9a:	f004 fae1 	bl	8005560 <HAL_UART_Receive_IT>


  // Start the Timer for the Buzzer
  HAL_TIM_Base_Start(&htim1);
 8000f9e:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <main+0x70>)
 8000fa0:	f003 fb80 	bl	80046a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <main+0x70>)
 8000fa8:	f003 fc20 	bl	80047ec <HAL_TIM_PWM_Start>
  TIM1->CCR1 = 500;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <main+0x74>)
 8000fae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_PRESCALER(&htim1, 0);
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <main+0x70>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28


  // Check if the RTC module is ready
  if (HAL_I2C_IsDeviceReady(&hi2c3, 0xD0, 10, HAL_MAX_DELAY) == HAL_OK)
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	21d0      	movs	r1, #208	; 0xd0
 8000fc4:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <main+0x78>)
 8000fc6:	f001 fdb5 	bl	8002b34 <HAL_I2C_IsDeviceReady>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d11d      	bne.n	800100c <main+0x9c>
  {
	  for (int i = 1; i<=10;i++) // indicator of ready device
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8000fd6:	e015      	b.n	8001004 <main+0x94>
 8000fd8:	20000200 	.word	0x20000200
 8000fdc:	20000338 	.word	0x20000338
 8000fe0:	200002ec 	.word	0x200002ec
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	20000214 	.word	0x20000214
	  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000fec:	2108      	movs	r1, #8
 8000fee:	48dd      	ldr	r0, [pc, #884]	; (8001364 <main+0x3f4>)
 8000ff0:	f001 fb0c 	bl	800260c <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000ff4:	20fa      	movs	r0, #250	; 0xfa
 8000ff6:	f000 ffd3 	bl	8001fa0 <HAL_Delay>
	  for (int i = 1; i<=10;i++) // indicator of ready device
 8000ffa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000ffe:	3301      	adds	r3, #1
 8001000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001008:	2b0a      	cmp	r3, #10
 800100a:	ddef      	ble.n	8000fec <main+0x7c>
  uint8_t daybuffer[2], datebuffer[2], monthbuffer[2], yearbuffer[2];



  // seconds
  secbuffer[0] = 0x00; //register address
 800100c:	2300      	movs	r3, #0
 800100e:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
  secbuffer[1] = 0x00; //data to put in register --> 0 sec
 8001012:	2300      	movs	r3, #0
 8001014:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, secbuffer, 2, 10);
 8001018:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800101c:	230a      	movs	r3, #10
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2302      	movs	r3, #2
 8001022:	21d0      	movs	r1, #208	; 0xd0
 8001024:	48d0      	ldr	r0, [pc, #832]	; (8001368 <main+0x3f8>)
 8001026:	f001 fb9b 	bl	8002760 <HAL_I2C_Master_Transmit>

   // minutes
  minbuffer[0] = 0x01; //register address
 800102a:	2301      	movs	r3, #1
 800102c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
  minbuffer[1] = 0x00; //data to put in register --> 40 min
 8001030:	2300      	movs	r3, #0
 8001032:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, minbuffer, 2, 10);
 8001036:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800103a:	230a      	movs	r3, #10
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2302      	movs	r3, #2
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	48c9      	ldr	r0, [pc, #804]	; (8001368 <main+0x3f8>)
 8001044:	f001 fb8c 	bl	8002760 <HAL_I2C_Master_Transmit>
  // hours
  hourbuffer[0] = 0x02; //register address
 8001048:	2302      	movs	r3, #2
 800104a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
  hourbuffer[1] = 0x15; //data to put in register  --> 11 am
 800104e:	2315      	movs	r3, #21
 8001050:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, hourbuffer, 2, 10);
 8001054:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8001058:	230a      	movs	r3, #10
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	21d0      	movs	r1, #208	; 0xd0
 8001060:	48c1      	ldr	r0, [pc, #772]	; (8001368 <main+0x3f8>)
 8001062:	f001 fb7d 	bl	8002760 <HAL_I2C_Master_Transmit>

  // Set day to 1 to represent Monday
  daybuffer[0] = 0x03; //register address
 8001066:	2303      	movs	r3, #3
 8001068:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
  daybuffer[1] = 0x01; //data to put in register  --> 11 am
 800106c:	2301      	movs	r3, #1
 800106e:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, daybuffer, 2, 10);
 8001072:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001076:	230a      	movs	r3, #10
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	2302      	movs	r3, #2
 800107c:	21d0      	movs	r1, #208	; 0xd0
 800107e:	48ba      	ldr	r0, [pc, #744]	; (8001368 <main+0x3f8>)
 8001080:	f001 fb6e 	bl	8002760 <HAL_I2C_Master_Transmit>

  // Set date to the 11th
  datebuffer[0] = 0x04; //register address
 8001084:	2304      	movs	r3, #4
 8001086:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
  datebuffer[1] = 0x18; //data to put in register  --> 11 am
 800108a:	2318      	movs	r3, #24
 800108c:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, datebuffer, 2, 10);
 8001090:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001094:	230a      	movs	r3, #10
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2302      	movs	r3, #2
 800109a:	21d0      	movs	r1, #208	; 0xd0
 800109c:	48b2      	ldr	r0, [pc, #712]	; (8001368 <main+0x3f8>)
 800109e:	f001 fb5f 	bl	8002760 <HAL_I2C_Master_Transmit>

  // Set month to April
  monthbuffer[0] = 0x05; //register address
 80010a2:	2305      	movs	r3, #5
 80010a4:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
  monthbuffer[1] = 0x05; //data to put in register  --> 11 am
 80010a8:	2305      	movs	r3, #5
 80010aa:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, monthbuffer, 2, 10);
 80010ae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80010b2:	230a      	movs	r3, #10
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2302      	movs	r3, #2
 80010b8:	21d0      	movs	r1, #208	; 0xd0
 80010ba:	48ab      	ldr	r0, [pc, #684]	; (8001368 <main+0x3f8>)
 80010bc:	f001 fb50 	bl	8002760 <HAL_I2C_Master_Transmit>

  // Set year to 22
  yearbuffer[0] = 0x06; //register address
 80010c0:	2306      	movs	r3, #6
 80010c2:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
  yearbuffer[1] = 0x22; //data to put in register  --> 11 am
 80010c6:	2322      	movs	r3, #34	; 0x22
 80010c8:	f887 30a1 	strb.w	r3, [r7, #161]	; 0xa1
  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, yearbuffer, 2, 10);
 80010cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80010d0:	230a      	movs	r3, #10
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2302      	movs	r3, #2
 80010d6:	21d0      	movs	r1, #208	; 0xd0
 80010d8:	48a3      	ldr	r0, [pc, #652]	; (8001368 <main+0x3f8>)
 80010da:	f001 fb41 	bl	8002760 <HAL_I2C_Master_Transmit>


  uint8_t h1,h2,m1,m2,s1,s2, day1, day2, month1, month2, year1, year2;
  uint8_t dayname[10] = "";
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80010e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	809a      	strh	r2, [r3, #4]


  uint8_t tempMSB[2], tempLSB[2], busy[2], control[2];
  char uartBuf[100] = "";
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	2260      	movs	r2, #96	; 0x60
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fc60 	bl	80069c0 <memset>

  busy[0] = 0x0f;
 8001100:	230f      	movs	r3, #15
 8001102:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  control[0] = 0x0e;
 8001106:	230e      	movs	r3, #14
 8001108:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  control[1] = 0x38;
 800110c:	2338      	movs	r3, #56	; 0x38
 800110e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  tempMSB[0] = 0x11;
 8001112:	2311      	movs	r3, #17
 8001114:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
  tempLSB[0] = 0x12;
 8001118:	2312      	movs	r3, #18
 800111a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c


  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, control, 2, 10);
 800111e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001122:	230a      	movs	r3, #10
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2302      	movs	r3, #2
 8001128:	21d0      	movs	r1, #208	; 0xd0
 800112a:	488f      	ldr	r0, [pc, #572]	; (8001368 <main+0x3f8>)
 800112c:	f001 fb18 	bl	8002760 <HAL_I2C_Master_Transmit>
  HAL_Delay(50);
 8001130:	2032      	movs	r0, #50	; 0x32
 8001132:	f000 ff35 	bl	8001fa0 <HAL_Delay>
  while (1)
  {


	  //send seconds register address 00h to read from
	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, secbuffer, 1, 10);
 8001136:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800113a:	230a      	movs	r3, #10
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	21d0      	movs	r1, #208	; 0xd0
 8001142:	4889      	ldr	r0, [pc, #548]	; (8001368 <main+0x3f8>)
 8001144:	f001 fb0c 	bl	8002760 <HAL_I2C_Master_Transmit>
	  //read data of register 00h to secbuffer[1]
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, secbuffer+1, 1, 10);
 8001148:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 800114c:	3201      	adds	r2, #1
 800114e:	230a      	movs	r3, #10
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	21d1      	movs	r1, #209	; 0xd1
 8001156:	4884      	ldr	r0, [pc, #528]	; (8001368 <main+0x3f8>)
 8001158:	f001 fbf6 	bl	8002948 <HAL_I2C_Master_Receive>
	  //prepare UART output
	  s1 = secbuffer[1] >> 4;
 800115c:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	  s2 = secbuffer[1] & 0x0F;
 8001166:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, minbuffer, 1, 10);
 8001172:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001176:	230a      	movs	r3, #10
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	21d0      	movs	r1, #208	; 0xd0
 800117e:	487a      	ldr	r0, [pc, #488]	; (8001368 <main+0x3f8>)
 8001180:	f001 faee 	bl	8002760 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, minbuffer+1, 1, 10);
 8001184:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8001188:	3201      	adds	r2, #1
 800118a:	230a      	movs	r3, #10
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2301      	movs	r3, #1
 8001190:	21d1      	movs	r1, #209	; 0xd1
 8001192:	4875      	ldr	r0, [pc, #468]	; (8001368 <main+0x3f8>)
 8001194:	f001 fbd8 	bl	8002948 <HAL_I2C_Master_Receive>
	  m1 = minbuffer[1] >> 4;
 8001198:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
	  m2 = minbuffer[1] & 0x0F;
 80011a2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, hourbuffer, 1, 10);
 80011ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80011b2:	230a      	movs	r3, #10
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	21d0      	movs	r1, #208	; 0xd0
 80011ba:	486b      	ldr	r0, [pc, #428]	; (8001368 <main+0x3f8>)
 80011bc:	f001 fad0 	bl	8002760 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, hourbuffer+1, 1, 10);
 80011c0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80011c4:	3201      	adds	r2, #1
 80011c6:	230a      	movs	r3, #10
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	21d1      	movs	r1, #209	; 0xd1
 80011ce:	4866      	ldr	r0, [pc, #408]	; (8001368 <main+0x3f8>)
 80011d0:	f001 fbba 	bl	8002948 <HAL_I2C_Master_Receive>
	  h1 = (hourbuffer[1] >> 4) & 1;
 80011d4:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	  h2 = hourbuffer[1] & 0x0F;
 80011e4:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2

	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, daybuffer, 1, 10);
 80011f0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80011f4:	230a      	movs	r3, #10
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	21d0      	movs	r1, #208	; 0xd0
 80011fc:	485a      	ldr	r0, [pc, #360]	; (8001368 <main+0x3f8>)
 80011fe:	f001 faaf 	bl	8002760 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, daybuffer+1, 1, 10);
 8001202:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001206:	3201      	adds	r2, #1
 8001208:	230a      	movs	r3, #10
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	21d1      	movs	r1, #209	; 0xd1
 8001210:	4855      	ldr	r0, [pc, #340]	; (8001368 <main+0x3f8>)
 8001212:	f001 fb99 	bl	8002948 <HAL_I2C_Master_Receive>


	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, datebuffer, 1, 10);
 8001216:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800121a:	230a      	movs	r3, #10
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	21d0      	movs	r1, #208	; 0xd0
 8001222:	4851      	ldr	r0, [pc, #324]	; (8001368 <main+0x3f8>)
 8001224:	f001 fa9c 	bl	8002760 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, datebuffer+1, 1, 10);
 8001228:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800122c:	3201      	adds	r2, #1
 800122e:	230a      	movs	r3, #10
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	21d1      	movs	r1, #209	; 0xd1
 8001236:	484c      	ldr	r0, [pc, #304]	; (8001368 <main+0x3f8>)
 8001238:	f001 fb86 	bl	8002948 <HAL_I2C_Master_Receive>

	  day1 = (datebuffer[1] >> 4) & 3;
 800123c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
	  day2 = datebuffer[1] & 0xf;
 800124c:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0

	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, monthbuffer, 1, 10);
 8001258:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800125c:	230a      	movs	r3, #10
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2301      	movs	r3, #1
 8001262:	21d0      	movs	r1, #208	; 0xd0
 8001264:	4840      	ldr	r0, [pc, #256]	; (8001368 <main+0x3f8>)
 8001266:	f001 fa7b 	bl	8002760 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, monthbuffer+1, 1, 10);
 800126a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800126e:	3201      	adds	r2, #1
 8001270:	230a      	movs	r3, #10
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	21d1      	movs	r1, #209	; 0xd1
 8001278:	483b      	ldr	r0, [pc, #236]	; (8001368 <main+0x3f8>)
 800127a:	f001 fb65 	bl	8002948 <HAL_I2C_Master_Receive>

	  month1 = (monthbuffer[1] >> 4) & 1;
 800127e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	  month2 = monthbuffer[1] & 0xf;
 800128e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe

	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, yearbuffer, 1, 10);
 800129a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800129e:	230a      	movs	r3, #10
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	21d0      	movs	r1, #208	; 0xd0
 80012a6:	4830      	ldr	r0, [pc, #192]	; (8001368 <main+0x3f8>)
 80012a8:	f001 fa5a 	bl	8002760 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, yearbuffer+1, 1, 10);
 80012ac:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80012b0:	3201      	adds	r2, #1
 80012b2:	230a      	movs	r3, #10
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	21d1      	movs	r1, #209	; 0xd1
 80012ba:	482b      	ldr	r0, [pc, #172]	; (8001368 <main+0x3f8>)
 80012bc:	f001 fb44 	bl	8002948 <HAL_I2C_Master_Receive>

	  year1 = (yearbuffer[1] >> 4 & 15);
 80012c0:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
	  year2 = (yearbuffer[1] & 15);
 80012ca:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc


	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, busy, 1, 10);
 80012d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012da:	230a      	movs	r3, #10
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	21d0      	movs	r1, #208	; 0xd0
 80012e2:	4821      	ldr	r0, [pc, #132]	; (8001368 <main+0x3f8>)
 80012e4:	f001 fa3c 	bl	8002760 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c3, 0xD1, busy+1, 1, 10);
 80012e8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012ec:	3201      	adds	r2, #1
 80012ee:	230a      	movs	r3, #10
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	21d1      	movs	r1, #209	; 0xd1
 80012f6:	481c      	ldr	r0, [pc, #112]	; (8001368 <main+0x3f8>)
 80012f8:	f001 fb26 	bl	8002948 <HAL_I2C_Master_Receive>

	  // if not busy read the temperature and create a new conversion
	  if(!(busy[1] & 4))
 80012fc:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	f040 80d0 	bne.w	80014aa <main+0x53a>
	  {
		  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, tempMSB, 1, 10);
 800130a:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800130e:	230a      	movs	r3, #10
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	21d0      	movs	r1, #208	; 0xd0
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <main+0x3f8>)
 8001318:	f001 fa22 	bl	8002760 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c3, 0xD1, tempMSB+1, 1, 10);
 800131c:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001320:	3201      	adds	r2, #1
 8001322:	230a      	movs	r3, #10
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2301      	movs	r3, #1
 8001328:	21d1      	movs	r1, #209	; 0xd1
 800132a:	480f      	ldr	r0, [pc, #60]	; (8001368 <main+0x3f8>)
 800132c:	f001 fb0c 	bl	8002948 <HAL_I2C_Master_Receive>

		  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, tempLSB, 1, 10);
 8001330:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001334:	230a      	movs	r3, #10
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2301      	movs	r3, #1
 800133a:	21d0      	movs	r1, #208	; 0xd0
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <main+0x3f8>)
 800133e:	f001 fa0f 	bl	8002760 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c3, 0xD1, tempLSB+1, 1, 10);
 8001342:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001346:	3201      	adds	r2, #1
 8001348:	230a      	movs	r3, #10
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2301      	movs	r3, #1
 800134e:	21d1      	movs	r1, #209	; 0xd1
 8001350:	4805      	ldr	r0, [pc, #20]	; (8001368 <main+0x3f8>)
 8001352:	f001 faf9 	bl	8002948 <HAL_I2C_Master_Receive>

		  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, control, 2, 10);
 8001356:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800135a:	230a      	movs	r3, #10
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2302      	movs	r3, #2
 8001360:	21d0      	movs	r1, #208	; 0xd0
 8001362:	e003      	b.n	800136c <main+0x3fc>
 8001364:	48000400 	.word	0x48000400
 8001368:	20000214 	.word	0x20000214
 800136c:	4858      	ldr	r0, [pc, #352]	; (80014d0 <main+0x560>)
 800136e:	f001 f9f7 	bl	8002760 <HAL_I2C_Master_Transmit>

		  signed char tempDigit = tempMSB[1];
 8001372:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001376:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
		  char tempDigitChars[10];
		  itoa(tempDigit, tempDigitChars, 10);
 800137a:	f997 30bb 	ldrsb.w	r3, [r7, #187]	; 0xbb
 800137e:	f107 0114 	add.w	r1, r7, #20
 8001382:	220a      	movs	r2, #10
 8001384:	4618      	mov	r0, r3
 8001386:	f005 fb19 	bl	80069bc <itoa>
		  char tempFraction[2];

		  switch(tempLSB[1] >> 6)
 800138a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800138e:	099b      	lsrs	r3, r3, #6
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b03      	cmp	r3, #3
 8001394:	d830      	bhi.n	80013f8 <main+0x488>
 8001396:	a201      	add	r2, pc, #4	; (adr r2, 800139c <main+0x42c>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	080013ad 	.word	0x080013ad
 80013a0:	080013c1 	.word	0x080013c1
 80013a4:	080013d5 	.word	0x080013d5
 80013a8:	080013e7 	.word	0x080013e7
		  {
		  case 0:
			  strcpy(tempFraction, "00");
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <main+0x564>)
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	4611      	mov	r1, r2
 80013b6:	8019      	strh	r1, [r3, #0]
 80013b8:	3302      	adds	r3, #2
 80013ba:	0c12      	lsrs	r2, r2, #16
 80013bc:	701a      	strb	r2, [r3, #0]
			  break;
 80013be:	e01b      	b.n	80013f8 <main+0x488>
		  case 1:
			  strcpy(tempFraction, "25");
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <main+0x568>)
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	4611      	mov	r1, r2
 80013ca:	8019      	strh	r1, [r3, #0]
 80013cc:	3302      	adds	r3, #2
 80013ce:	0c12      	lsrs	r2, r2, #16
 80013d0:	701a      	strb	r2, [r3, #0]
			  break;
 80013d2:	e011      	b.n	80013f8 <main+0x488>
		  case 2:
			  strcpy(tempFraction, "50");
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4a40      	ldr	r2, [pc, #256]	; (80014dc <main+0x56c>)
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	4611      	mov	r1, r2
 80013de:	8019      	strh	r1, [r3, #0]
 80013e0:	3302      	adds	r3, #2
 80013e2:	0c12      	lsrs	r2, r2, #16
 80013e4:	701a      	strb	r2, [r3, #0]
		  case 3:
			  strcpy(tempFraction, "75");
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4a3d      	ldr	r2, [pc, #244]	; (80014e0 <main+0x570>)
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	4611      	mov	r1, r2
 80013f0:	8019      	strh	r1, [r3, #0]
 80013f2:	3302      	adds	r3, #2
 80013f4:	0c12      	lsrs	r2, r2, #16
 80013f6:	701a      	strb	r2, [r3, #0]
		  }



		  if(tempDigit >= criticalTemp)
 80013f8:	f997 30bb 	ldrsb.w	r3, [r7, #187]	; 0xbb
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <main+0x574>)
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	db04      	blt.n	800141e <main+0x4ae>
		  {
				__HAL_TIM_SET_PRESCALER(&htim1, 16);
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <main+0x578>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2210      	movs	r2, #16
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
 800141c:	e003      	b.n	8001426 <main+0x4b6>
		  }
		  else
		  {
				__HAL_TIM_SET_PRESCALER(&htim1, 0);
 800141e:	4b32      	ldr	r3, [pc, #200]	; (80014e8 <main+0x578>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	629a      	str	r2, [r3, #40]	; 0x28

		  }

		  sprintf(uartBuf, "~Timestamp: %d%d/%d%d/20%d%d %d%d:%d%d:%d%d Temperature: %s.%s \r\n#", day1, day2, month1, month2, year1, year2, h1,h2,m1,m2,s1,s2, tempDigitChars, tempFraction);
 8001426:	f897 e0c1 	ldrb.w	lr, [r7, #193]	; 0xc1
 800142a:	f897 80c0 	ldrb.w	r8, [r7, #192]	; 0xc0
 800142e:	f897 20bf 	ldrb.w	r2, [r7, #191]	; 0xbf
 8001432:	f897 10be 	ldrb.w	r1, [r7, #190]	; 0xbe
 8001436:	f897 00bd 	ldrb.w	r0, [r7, #189]	; 0xbd
 800143a:	f897 40bc 	ldrb.w	r4, [r7, #188]	; 0xbc
 800143e:	f897 50c3 	ldrb.w	r5, [r7, #195]	; 0xc3
 8001442:	f897 60c2 	ldrb.w	r6, [r7, #194]	; 0xc2
 8001446:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	f897 c0c4 	ldrb.w	ip, [r7, #196]	; 0xc4
 8001450:	4663      	mov	r3, ip
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	f897 c0c7 	ldrb.w	ip, [r7, #199]	; 0xc7
 8001458:	4663      	mov	r3, ip
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	f897 c0c6 	ldrb.w	ip, [r7, #198]	; 0xc6
 8001460:	4663      	mov	r3, ip
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	f107 0c20 	add.w	ip, r7, #32
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	930b      	str	r3, [sp, #44]	; 0x2c
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	930a      	str	r3, [sp, #40]	; 0x28
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	9309      	str	r3, [sp, #36]	; 0x24
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	9308      	str	r3, [sp, #32]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	9307      	str	r3, [sp, #28]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	9306      	str	r3, [sp, #24]
 8001484:	9605      	str	r6, [sp, #20]
 8001486:	9504      	str	r5, [sp, #16]
 8001488:	9403      	str	r4, [sp, #12]
 800148a:	9002      	str	r0, [sp, #8]
 800148c:	9101      	str	r1, [sp, #4]
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	4643      	mov	r3, r8
 8001492:	4672      	mov	r2, lr
 8001494:	4915      	ldr	r1, [pc, #84]	; (80014ec <main+0x57c>)
 8001496:	4660      	mov	r0, ip
 8001498:	f005 fa9a 	bl	80069d0 <siprintf>

		  HAL_UART_Transmit(&huart1, (uint8_t *)uartBuf, sizeof(uartBuf), 100);
 800149c:	f107 0120 	add.w	r1, r7, #32
 80014a0:	2364      	movs	r3, #100	; 0x64
 80014a2:	2264      	movs	r2, #100	; 0x64
 80014a4:	4812      	ldr	r0, [pc, #72]	; (80014f0 <main+0x580>)
 80014a6:	f003 ffc7 	bl	8005438 <HAL_UART_Transmit>

	  }
	  for(int i = 0; i < 5;i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80014b0:	e008      	b.n	80014c4 <main+0x554>
		  HAL_Delay(1000);
 80014b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014b6:	f000 fd73 	bl	8001fa0 <HAL_Delay>
	  for(int i = 0; i < 5;i++)
 80014ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014be:	3301      	adds	r3, #1
 80014c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80014c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	ddf2      	ble.n	80014b2 <main+0x542>
	  HAL_I2C_Master_Transmit(&hi2c3, 0xD0, secbuffer, 1, 10);
 80014cc:	e633      	b.n	8001136 <main+0x1c6>
 80014ce:	bf00      	nop
 80014d0:	20000214 	.word	0x20000214
 80014d4:	08009ae0 	.word	0x08009ae0
 80014d8:	08009ae4 	.word	0x08009ae4
 80014dc:	08009ae8 	.word	0x08009ae8
 80014e0:	08009aec 	.word	0x08009aec
 80014e4:	20000000 	.word	0x20000000
 80014e8:	200002ec 	.word	0x200002ec
 80014ec:	08009af0 	.word	0x08009af0
 80014f0:	20000268 	.word	0x20000268

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b096      	sub	sp, #88	; 0x58
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2244      	movs	r2, #68	; 0x44
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f005 fa5c 	bl	80069c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001516:	f44f 7000 	mov.w	r0, #512	; 0x200
 800151a:	f001 ff41 	bl	80033a0 <HAL_PWREx_ControlVoltageScaling>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001524:	f000 f9e8 	bl	80018f8 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001528:	f001 ff1c 	bl	8003364 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <SystemClock_Config+0xc0>)
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001532:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <SystemClock_Config+0xc0>)
 8001534:	f023 0318 	bic.w	r3, r3, #24
 8001538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800153c:	2314      	movs	r3, #20
 800153e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001540:	2301      	movs	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001544:	2301      	movs	r3, #1
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800154c:	2360      	movs	r3, #96	; 0x60
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001554:	2301      	movs	r3, #1
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800155c:	2310      	movs	r3, #16
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001560:	2307      	movs	r3, #7
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001564:	2302      	movs	r3, #2
 8001566:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001568:	2302      	movs	r3, #2
 800156a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4618      	mov	r0, r3
 8001572:	f001 ff6b 	bl	800344c <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800157c:	f000 f9bc 	bl	80018f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001580:	230f      	movs	r3, #15
 8001582:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	2303      	movs	r3, #3
 8001586:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	2101      	movs	r1, #1
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fb69 	bl	8003c70 <HAL_RCC_ClockConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015a4:	f000 f9a8 	bl	80018f8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015a8:	f002 ff7a 	bl	80044a0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015ac:	bf00      	nop
 80015ae:	3758      	adds	r7, #88	; 0x58
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000

080015b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_I2C3_Init+0x74>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <MX_I2C3_Init+0x78>)
 80015c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80015c2:	4b1a      	ldr	r3, [pc, #104]	; (800162c <MX_I2C3_Init+0x74>)
 80015c4:	4a1b      	ldr	r2, [pc, #108]	; (8001634 <MX_I2C3_Init+0x7c>)
 80015c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <MX_I2C3_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <MX_I2C3_Init+0x74>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <MX_I2C3_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_I2C3_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_I2C3_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_I2C3_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_I2C3_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <MX_I2C3_Init+0x74>)
 80015f4:	f001 f824 	bl	8002640 <HAL_I2C_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80015fe:	f000 f97b 	bl	80018f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001602:	2100      	movs	r1, #0
 8001604:	4809      	ldr	r0, [pc, #36]	; (800162c <MX_I2C3_Init+0x74>)
 8001606:	f001 fe15 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001610:	f000 f972 	bl	80018f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001614:	2100      	movs	r1, #0
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_I2C3_Init+0x74>)
 8001618:	f001 fe57 	bl	80032ca <HAL_I2CEx_ConfigDigitalFilter>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001622:	f000 f969 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000214 	.word	0x20000214
 8001630:	40005c00 	.word	0x40005c00
 8001634:	00707cbb 	.word	0x00707cbb

08001638 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b096      	sub	sp, #88	; 0x58
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	222c      	movs	r2, #44	; 0x2c
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f005 f9ab 	bl	80069c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166a:	4b39      	ldr	r3, [pc, #228]	; (8001750 <MX_TIM1_Init+0x118>)
 800166c:	4a39      	ldr	r2, [pc, #228]	; (8001754 <MX_TIM1_Init+0x11c>)
 800166e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <MX_TIM1_Init+0x118>)
 8001672:	f240 123f 	movw	r2, #319	; 0x13f
 8001676:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <MX_TIM1_Init+0x118>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <MX_TIM1_Init+0x118>)
 8001680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001684:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <MX_TIM1_Init+0x118>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <MX_TIM1_Init+0x118>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <MX_TIM1_Init+0x118>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001698:	482d      	ldr	r0, [pc, #180]	; (8001750 <MX_TIM1_Init+0x118>)
 800169a:	f003 f84f 	bl	800473c <HAL_TIM_PWM_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80016a4:	f000 f928 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016b8:	4619      	mov	r1, r3
 80016ba:	4825      	ldr	r0, [pc, #148]	; (8001750 <MX_TIM1_Init+0x118>)
 80016bc:	f003 fd90 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80016c6:	f000 f917 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	; 0x60
 80016cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ea:	2200      	movs	r2, #0
 80016ec:	4619      	mov	r1, r3
 80016ee:	4818      	ldr	r0, [pc, #96]	; (8001750 <MX_TIM1_Init+0x118>)
 80016f0:	f003 f95a 	bl	80049a8 <HAL_TIM_PWM_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80016fa:	f000 f8fd 	bl	80018f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001716:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4807      	ldr	r0, [pc, #28]	; (8001750 <MX_TIM1_Init+0x118>)
 8001734:	f003 fdba 	bl	80052ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 800173e:	f000 f8db 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001742:	4803      	ldr	r0, [pc, #12]	; (8001750 <MX_TIM1_Init+0x118>)
 8001744:	f000 f998 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 8001748:	bf00      	nop
 800174a:	3758      	adds	r7, #88	; 0x58
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200002ec 	.word	0x200002ec
 8001754:	40012c00 	.word	0x40012c00

08001758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <MX_USART1_UART_Init+0x5c>)
 8001760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001762:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_USART1_UART_Init+0x58>)
 800179c:	f003 fdfe 	bl	800539c <HAL_UART_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017a6:	f000 f8a7 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000268 	.word	0x20000268
 80017b4:	40013800 	.word	0x40013800

080017b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017be:	4a15      	ldr	r2, [pc, #84]	; (8001814 <MX_USART2_UART_Init+0x5c>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_USART2_UART_Init+0x58>)
 80017fc:	f003 fdce 	bl	800539c <HAL_UART_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001806:	f000 f877 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000338 	.word	0x20000338
 8001814:	40004400 	.word	0x40004400

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b088      	sub	sp, #32
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_GPIO_Init+0x8c>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_GPIO_Init+0x8c>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_GPIO_Init+0x8c>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_GPIO_Init+0x8c>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <MX_GPIO_Init+0x8c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_GPIO_Init+0x8c>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_GPIO_Init+0x8c>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a10      	ldr	r2, [pc, #64]	; (80018a4 <MX_GPIO_Init+0x8c>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_GPIO_Init+0x8c>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	2108      	movs	r1, #8
 800187a:	480b      	ldr	r0, [pc, #44]	; (80018a8 <MX_GPIO_Init+0x90>)
 800187c:	f000 feae 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001880:	2308      	movs	r3, #8
 8001882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	4619      	mov	r1, r3
 8001896:	4804      	ldr	r0, [pc, #16]	; (80018a8 <MX_GPIO_Init+0x90>)
 8001898:	f000 fd36 	bl	8002308 <HAL_GPIO_Init>

}
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000
 80018a8:	48000400 	.word	0x48000400

080018ac <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if(huart->Instance  == USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_UART_RxCpltCallback+0x3c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d110      	bne.n	80018e0 <HAL_UART_RxCpltCallback+0x34>
	{
		criticalTemp = atof((const char*)received_Temp);
 80018be:	480b      	ldr	r0, [pc, #44]	; (80018ec <HAL_UART_RxCpltCallback+0x40>)
 80018c0:	f005 f837 	bl	8006932 <atof>
 80018c4:	ec53 2b10 	vmov	r2, r3, d0
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f94e 	bl	8000b6c <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_UART_RxCpltCallback+0x44>)
 80018d4:	6013      	str	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart2, (uint8_t *) received_Temp, 5);
 80018d6:	2205      	movs	r2, #5
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <HAL_UART_RxCpltCallback+0x40>)
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <HAL_UART_RxCpltCallback+0x48>)
 80018dc:	f003 fe40 	bl	8005560 <HAL_UART_Receive_IT>
	}
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40004400 	.word	0x40004400
 80018ec:	20000200 	.word	0x20000200
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000338 	.word	0x20000338

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	e7fe      	b.n	8001900 <Error_Handler+0x8>
	...

08001904 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_MspInit+0x44>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <HAL_MspInit+0x44>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6613      	str	r3, [r2, #96]	; 0x60
 8001916:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <HAL_MspInit+0x44>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_MspInit+0x44>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <HAL_MspInit+0x44>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6593      	str	r3, [r2, #88]	; 0x58
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_MspInit+0x44>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	603b      	str	r3, [r7, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b0a0      	sub	sp, #128	; 0x80
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	2254      	movs	r2, #84	; 0x54
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f005 f827 	bl	80069c0 <memset>
  if(hi2c->Instance==I2C3)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a2d      	ldr	r2, [pc, #180]	; (8001a2c <HAL_I2C_MspInit+0xe0>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d153      	bne.n	8001a24 <HAL_I2C_MspInit+0xd8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800197c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001980:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001982:	2300      	movs	r3, #0
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	4618      	mov	r0, r3
 800198c:	f002 fb94 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001996:	f7ff ffaf 	bl	80018f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ce:	2312      	movs	r3, #18
 80019d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019da:	2304      	movs	r3, #4
 80019dc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e8:	f000 fc8e 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019ec:	2310      	movs	r3, #16
 80019ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f0:	2312      	movs	r3, #18
 80019f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019fc:	2304      	movs	r3, #4
 80019fe:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a04:	4619      	mov	r1, r3
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <HAL_I2C_MspInit+0xe8>)
 8001a08:	f000 fc7e 	bl	8002308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 8001a12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_I2C_MspInit+0xe4>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a24:	bf00      	nop
 8001a26:	3780      	adds	r7, #128	; 0x80
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40005c00 	.word	0x40005c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	48000400 	.word	0x48000400

08001a38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_TIM_PWM_MspInit+0x38>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10b      	bne.n	8001a62 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a54:	6613      	str	r3, [r2, #96]	; 0x60
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_TIM_MspPostInit+0x68>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d11d      	bne.n	8001ad6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_TIM_MspPostInit+0x6c>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_TIM_MspPostInit+0x6c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_TIM_MspPostInit+0x6c>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ab2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad2:	f000 fc19 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40012c00 	.word	0x40012c00
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a0      	sub	sp, #128	; 0x80
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b00:	f107 0318 	add.w	r3, r7, #24
 8001b04:	2254      	movs	r2, #84	; 0x54
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 ff59 	bl	80069c0 <memset>
  if(huart->Instance==USART1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a46      	ldr	r2, [pc, #280]	; (8001c2c <HAL_UART_MspInit+0x144>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d140      	bne.n	8001b9a <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b20:	f107 0318 	add.w	r3, r7, #24
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fac7 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b30:	f7ff fee2 	bl	80018f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b34:	4b3e      	ldr	r3, [pc, #248]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b38:	4a3d      	ldr	r2, [pc, #244]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	4a37      	ldr	r2, [pc, #220]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	613b      	str	r3, [r7, #16]
 8001b62:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	2303      	movs	r3, #3
 8001b74:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b76:	2307      	movs	r3, #7
 8001b78:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	f000 fbc0 	bl	8002308 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2025      	movs	r0, #37	; 0x25
 8001b8e:	f000 fb06 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b92:	2025      	movs	r0, #37	; 0x25
 8001b94:	f000 fb1f 	bl	80021d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b98:	e043      	b.n	8001c22 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_UART_MspInit+0x14c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d13e      	bne.n	8001c22 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 fa81 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001bbc:	f7ff fe9c 	bl	80018f8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	4a1a      	ldr	r2, [pc, #104]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6593      	str	r3, [r2, #88]	; 0x58
 8001bcc:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_UART_MspInit+0x148>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001bf0:	230c      	movs	r3, #12
 8001bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c00:	2307      	movs	r3, #7
 8001c02:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c0e:	f000 fb7b 	bl	8002308 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2100      	movs	r1, #0
 8001c16:	2026      	movs	r0, #38	; 0x26
 8001c18:	f000 fac1 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c1c:	2026      	movs	r0, #38	; 0x26
 8001c1e:	f000 fada 	bl	80021d6 <HAL_NVIC_EnableIRQ>
}
 8001c22:	bf00      	nop
 8001c24:	3780      	adds	r7, #128	; 0x80
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40004400 	.word	0x40004400

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c84:	f000 f96c 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <USART1_IRQHandler+0x10>)
 8001c92:	f003 fcbb 	bl	800560c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000268 	.word	0x20000268

08001ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <USART2_IRQHandler+0x10>)
 8001ca6:	f003 fcb1 	bl	800560c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000338 	.word	0x20000338

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
	return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cce:	f004 fe33 	bl	8006938 <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cf6:	e7fe      	b.n	8001cf6 <_exit+0x12>

08001cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
	}

return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e009      	b.n	8001d58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <_write+0x12>
	}
	return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
	return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f004 fd98 	bl	8006938 <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20010000 	.word	0x20010000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000208 	.word	0x20000208
 8001e3c:	200003d0 	.word	0x200003d0

08001e40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e68:	f7ff ffea 	bl	8001e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6e:	490d      	ldr	r1, [pc, #52]	; (8001ea4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <LoopForever+0xe>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e74:	e002      	b.n	8001e7c <LoopCopyDataInit>

08001e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7a:	3304      	adds	r3, #4

08001e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e80:	d3f9      	bcc.n	8001e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e82:	4a0a      	ldr	r2, [pc, #40]	; (8001eac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e84:	4c0a      	ldr	r4, [pc, #40]	; (8001eb0 <LoopForever+0x16>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e88:	e001      	b.n	8001e8e <LoopFillZerobss>

08001e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e8c:	3204      	adds	r2, #4

08001e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e90:	d3fb      	bcc.n	8001e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e92:	f004 fd57 	bl	8006944 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e96:	f7ff f86b 	bl	8000f70 <main>

08001e9a <LoopForever>:

LoopForever:
    b LoopForever
 8001e9a:	e7fe      	b.n	8001e9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001ea8:	08009fec 	.word	0x08009fec
  ldr r2, =_sbss
 8001eac:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001eb0:	200003d0 	.word	0x200003d0

08001eb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_IRQHandler>

08001eb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f000 f961 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 f80e 	bl	8001ee8 <HAL_InitTick>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	71fb      	strb	r3, [r7, #7]
 8001ed6:	e001      	b.n	8001edc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ed8:	f7ff fd14 	bl	8001904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ef4:	4b17      	ldr	r3, [pc, #92]	; (8001f54 <HAL_InitTick+0x6c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_InitTick+0x70>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_InitTick+0x6c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f96d 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d809      	bhi.n	8001f38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2c:	f000 f937 	bl	800219e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f30:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <HAL_InitTick+0x74>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e007      	b.n	8001f48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
 8001f3c:	e004      	b.n	8001f48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e001      	b.n	8001f48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000000c 	.word	0x2000000c
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	200003bc 	.word	0x200003bc

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200003bc 	.word	0x200003bc

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000000c 	.word	0x2000000c

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	; (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	; (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	; (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	; 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	; 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d008      	beq.n	8002234 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2204      	movs	r2, #4
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e022      	b.n	800227a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 020e 	bic.w	r2, r2, #14
 8002242:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0201 	bic.w	r2, r2, #1
 8002252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f003 021c 	and.w	r2, r3, #28
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f202 	lsl.w	r2, r1, r2
 8002266:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d005      	beq.n	80022aa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e029      	b.n	80022fe <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 020e 	bic.w	r2, r2, #14
 80022b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f003 021c 	and.w	r2, r3, #28
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4798      	blx	r3
    }
  }
  return status;
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002316:	e148      	b.n	80025aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	fa01 f303 	lsl.w	r3, r1, r3
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 813a 	beq.w	80025a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d005      	beq.n	8002348 <HAL_GPIO_Init+0x40>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d130      	bne.n	80023aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237e:	2201      	movs	r2, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 0201 	and.w	r2, r3, #1
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d017      	beq.n	80023e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d123      	bne.n	800243a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	6939      	ldr	r1, [r7, #16]
 8002436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0203 	and.w	r2, r3, #3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8094 	beq.w	80025a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_GPIO_Init+0x2c0>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	4a51      	ldr	r2, [pc, #324]	; (80025c8 <HAL_GPIO_Init+0x2c0>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6613      	str	r3, [r2, #96]	; 0x60
 8002488:	4b4f      	ldr	r3, [pc, #316]	; (80025c8 <HAL_GPIO_Init+0x2c0>)
 800248a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002494:	4a4d      	ldr	r2, [pc, #308]	; (80025cc <HAL_GPIO_Init+0x2c4>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024be:	d00d      	beq.n	80024dc <HAL_GPIO_Init+0x1d4>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4a43      	ldr	r2, [pc, #268]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d007      	beq.n	80024d8 <HAL_GPIO_Init+0x1d0>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <HAL_GPIO_Init+0x2cc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <HAL_GPIO_Init+0x1cc>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1d6>
 80024d4:	2307      	movs	r3, #7
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1d6>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1d6>
 80024dc:	2300      	movs	r3, #0
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024ee:	4937      	ldr	r1, [pc, #220]	; (80025cc <HAL_GPIO_Init+0x2c4>)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024fc:	4b36      	ldr	r3, [pc, #216]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002520:	4a2d      	ldr	r2, [pc, #180]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002526:	4b2c      	ldr	r3, [pc, #176]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4013      	ands	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800254a:	4a23      	ldr	r2, [pc, #140]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800259e:	4a0e      	ldr	r2, [pc, #56]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3301      	adds	r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f aeaf 	bne.w	8002318 <HAL_GPIO_Init+0x10>
  }
}
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40010000 	.word	0x40010000
 80025d0:	48000400 	.word	0x48000400
 80025d4:	48000800 	.word	0x48000800
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025f8:	e002      	b.n	8002600 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	041a      	lsls	r2, r3, #16
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	43d9      	mvns	r1, r3
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	400b      	ands	r3, r1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e081      	b.n	8002756 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff f970 	bl	800194c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	; 0x24
 8002670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	e006      	b.n	80026c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d104      	bne.n	80026da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69d9      	ldr	r1, [r3, #28]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1a      	ldr	r2, [r3, #32]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	461a      	mov	r2, r3
 800276c:	460b      	mov	r3, r1
 800276e:	817b      	strh	r3, [r7, #10]
 8002770:	4613      	mov	r3, r2
 8002772:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b20      	cmp	r3, #32
 800277e:	f040 80da 	bne.w	8002936 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_I2C_Master_Transmit+0x30>
 800278c:	2302      	movs	r3, #2
 800278e:	e0d3      	b.n	8002938 <HAL_I2C_Master_Transmit+0x1d8>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002798:	f7ff fbf6 	bl	8001f88 <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	2319      	movs	r3, #25
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 faed 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e0be      	b.n	8002938 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2221      	movs	r2, #33	; 0x21
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2210      	movs	r2, #16
 80027c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2bff      	cmp	r3, #255	; 0xff
 80027ea:	d90e      	bls.n	800280a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	22ff      	movs	r2, #255	; 0xff
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	8979      	ldrh	r1, [r7, #10]
 80027fa:	4b51      	ldr	r3, [pc, #324]	; (8002940 <HAL_I2C_Master_Transmit+0x1e0>)
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fce4 	bl	80031d0 <I2C_TransferConfig>
 8002808:	e06c      	b.n	80028e4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	b2da      	uxtb	r2, r3
 800281a:	8979      	ldrh	r1, [r7, #10]
 800281c:	4b48      	ldr	r3, [pc, #288]	; (8002940 <HAL_I2C_Master_Transmit+0x1e0>)
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fcd3 	bl	80031d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800282a:	e05b      	b.n	80028e4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	6a39      	ldr	r1, [r7, #32]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 faea 	bl	8002e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e07b      	b.n	8002938 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d034      	beq.n	80028e4 <HAL_I2C_Master_Transmit+0x184>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	2b00      	cmp	r3, #0
 8002880:	d130      	bne.n	80028e4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	2200      	movs	r2, #0
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fa7c 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e04d      	b.n	8002938 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2bff      	cmp	r3, #255	; 0xff
 80028a4:	d90e      	bls.n	80028c4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	22ff      	movs	r2, #255	; 0xff
 80028aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	8979      	ldrh	r1, [r7, #10]
 80028b4:	2300      	movs	r3, #0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fc87 	bl	80031d0 <I2C_TransferConfig>
 80028c2:	e00f      	b.n	80028e4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	8979      	ldrh	r1, [r7, #10]
 80028d6:	2300      	movs	r3, #0
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fc76 	bl	80031d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d19e      	bne.n	800282c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	6a39      	ldr	r1, [r7, #32]
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fac9 	bl	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e01a      	b.n	8002938 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2220      	movs	r2, #32
 8002908:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_I2C_Master_Transmit+0x1e4>)
 8002916:	400b      	ands	r3, r1
 8002918:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	e000      	b.n	8002938 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002936:	2302      	movs	r3, #2
  }
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	80002000 	.word	0x80002000
 8002944:	fe00e800 	.word	0xfe00e800

08002948 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af02      	add	r7, sp, #8
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	461a      	mov	r2, r3
 8002954:	460b      	mov	r3, r1
 8002956:	817b      	strh	r3, [r7, #10]
 8002958:	4613      	mov	r3, r2
 800295a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b20      	cmp	r3, #32
 8002966:	f040 80db 	bne.w	8002b20 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_I2C_Master_Receive+0x30>
 8002974:	2302      	movs	r3, #2
 8002976:	e0d4      	b.n	8002b22 <HAL_I2C_Master_Receive+0x1da>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002980:	f7ff fb02 	bl	8001f88 <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2319      	movs	r3, #25
 800298c:	2201      	movs	r2, #1
 800298e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f9f9 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0bf      	b.n	8002b22 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2222      	movs	r2, #34	; 0x22
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2210      	movs	r2, #16
 80029ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	893a      	ldrh	r2, [r7, #8]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2bff      	cmp	r3, #255	; 0xff
 80029d2:	d90e      	bls.n	80029f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	8979      	ldrh	r1, [r7, #10]
 80029e2:	4b52      	ldr	r3, [pc, #328]	; (8002b2c <HAL_I2C_Master_Receive+0x1e4>)
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fbf0 	bl	80031d0 <I2C_TransferConfig>
 80029f0:	e06d      	b.n	8002ace <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	8979      	ldrh	r1, [r7, #10]
 8002a04:	4b49      	ldr	r3, [pc, #292]	; (8002b2c <HAL_I2C_Master_Receive+0x1e4>)
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fbdf 	bl	80031d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a12:	e05c      	b.n	8002ace <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	6a39      	ldr	r1, [r7, #32]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 fa73 	bl	8002f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e07c      	b.n	8002b22 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d034      	beq.n	8002ace <HAL_I2C_Master_Receive+0x186>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d130      	bne.n	8002ace <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f987 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e04d      	b.n	8002b22 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2bff      	cmp	r3, #255	; 0xff
 8002a8e:	d90e      	bls.n	8002aae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fb92 	bl	80031d0 <I2C_TransferConfig>
 8002aac:	e00f      	b.n	8002ace <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	8979      	ldrh	r1, [r7, #10]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fb81 	bl	80031d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d19d      	bne.n	8002a14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	6a39      	ldr	r1, [r7, #32]
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f9d4 	bl	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e01a      	b.n	8002b22 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2220      	movs	r2, #32
 8002af2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <HAL_I2C_Master_Receive+0x1e8>)
 8002b00:	400b      	ands	r3, r1
 8002b02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	80002400 	.word	0x80002400
 8002b30:	fe00e800 	.word	0xfe00e800

08002b34 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	460b      	mov	r3, r1
 8002b42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	f040 80f1 	bne.w	8002d38 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0e7      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_I2C_IsDeviceReady+0x44>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e0e0      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d107      	bne.n	8002ba6 <HAL_I2C_IsDeviceReady+0x72>
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ba4:	e004      	b.n	8002bb0 <HAL_I2C_IsDeviceReady+0x7c>
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bac:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f9e7 	bl	8001f88 <HAL_GetTick>
 8002bba:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b20      	cmp	r3, #32
 8002bc8:	bf0c      	ite	eq
 8002bca:	2301      	moveq	r3, #1
 8002bcc:	2300      	movne	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0310 	and.w	r3, r3, #16
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002be8:	e034      	b.n	8002c54 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d01a      	beq.n	8002c28 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7ff f9c9 	bl	8001f88 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <HAL_I2C_IsDeviceReady+0xd4>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10f      	bne.n	8002c28 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	f043 0220 	orr.w	r2, r3, #32
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e088      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	bf0c      	ite	eq
 8002c36:	2301      	moveq	r3, #1
 8002c38:	2300      	movne	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002c54:	7ffb      	ldrb	r3, [r7, #31]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d102      	bne.n	8002c60 <HAL_I2C_IsDeviceReady+0x12c>
 8002c5a:	7fbb      	ldrb	r3, [r7, #30]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0c4      	beq.n	8002bea <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 0310 	and.w	r3, r3, #16
 8002c6a:	2b10      	cmp	r3, #16
 8002c6c:	d01a      	beq.n	8002ca4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2120      	movs	r1, #32
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f886 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e058      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e04a      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2200      	movs	r2, #0
 8002cac:	2120      	movs	r1, #32
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f86b 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e03d      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d118      	bne.n	8002d08 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2120      	movs	r1, #32
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f84a 	bl	8002d8a <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e01c      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2220      	movs	r2, #32
 8002d06:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	f63f af3b 	bhi.w	8002b8e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d103      	bne.n	8002d60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d007      	beq.n	8002d7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	619a      	str	r2, [r3, #24]
  }
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9a:	e022      	b.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da2:	d01e      	beq.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da4:	f7ff f8f0 	bl	8001f88 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d302      	bcc.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d113      	bne.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4013      	ands	r3, r2
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	bf0c      	ite	eq
 8002df2:	2301      	moveq	r3, #1
 8002df4:	2300      	movne	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d0cd      	beq.n	8002d9c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e16:	e02c      	b.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f8eb 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e02a      	b.n	8002e82 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d01e      	beq.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e34:	f7ff f8a8 	bl	8001f88 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d113      	bne.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e007      	b.n	8002e82 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d1cb      	bne.n	8002e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b084      	sub	sp, #16
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e96:	e028      	b.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f8ab 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e026      	b.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eac:	f7ff f86c 	bl	8001f88 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d302      	bcc.n	8002ec2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d113      	bne.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec6:	f043 0220 	orr.w	r2, r3, #32
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e007      	b.n	8002efa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d1cf      	bne.n	8002e98 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f10:	e064      	b.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f86e 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e062      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d138      	bne.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d105      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e04e      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d107      	bne.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2210      	movs	r2, #16
 8002f62:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2204      	movs	r2, #4
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
 8002f6a:	e002      	b.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2220      	movs	r2, #32
 8002f78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe ffef 	bl	8001f88 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e007      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d193      	bne.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	fe00e800 	.word	0xfe00e800

08002ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d075      	beq.n	8003110 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800302c:	e056      	b.n	80030dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d052      	beq.n	80030dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe ffa7 	bl	8001f88 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_IsErrorOccurred+0x54>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d147      	bne.n	80030dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800305e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306e:	d12e      	bne.n	80030ce <I2C_IsErrorOccurred+0xd6>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003076:	d02a      	beq.n	80030ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b20      	cmp	r3, #32
 800307c:	d027      	beq.n	80030ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800308e:	f7fe ff7b 	bl	8001f88 <HAL_GetTick>
 8003092:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	e01b      	b.n	80030ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003096:	f7fe ff77 	bl	8001f88 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b19      	cmp	r3, #25
 80030a2:	d914      	bls.n	80030ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d1dc      	bne.n	8003096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d003      	beq.n	80030f2 <I2C_IsErrorOccurred+0xfa>
 80030ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d09d      	beq.n	800302e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800317e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01c      	beq.n	80031c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff fddb 	bl	8002d42 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <I2C_IsErrorOccurred+0x1d4>)
 8003198:	400b      	ands	r3, r1
 800319a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	fe00e800 	.word	0xfe00e800

080031d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	4613      	mov	r3, r2
 80031e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031e8:	7a7b      	ldrb	r3, [r7, #9]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031fe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	0d5b      	lsrs	r3, r3, #21
 800320a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <I2C_TransferConfig+0x60>)
 8003210:	430b      	orrs	r3, r1
 8003212:	43db      	mvns	r3, r3
 8003214:	ea02 0103 	and.w	r1, r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	03ff63ff 	.word	0x03ff63ff

08003234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	d138      	bne.n	80032bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003254:	2302      	movs	r3, #2
 8003256:	e032      	b.n	80032be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	; 0x24
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6819      	ldr	r1, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d139      	bne.n	8003354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e033      	b.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2224      	movs	r2, #36	; 0x24
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800331c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40007000 	.word	0x40007000

08003384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_PWREx_GetVoltageRange+0x18>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003390:	4618      	mov	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40007000 	.word	0x40007000

080033a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ae:	d130      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033b0:	4b23      	ldr	r3, [pc, #140]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033bc:	d038      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2232      	movs	r2, #50	; 0x32
 80033d4:	fb02 f303 	mul.w	r3, r2, r3
 80033d8:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0c9b      	lsrs	r3, r3, #18
 80033e0:	3301      	adds	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033e4:	e002      	b.n	80033ec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3b01      	subs	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f8:	d102      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x60>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f2      	bne.n	80033e6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340c:	d110      	bne.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e00f      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800341a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341e:	d007      	beq.n	8003430 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003420:	4b07      	ldr	r3, [pc, #28]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003428:	4a05      	ldr	r2, [pc, #20]	; (8003440 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40007000 	.word	0x40007000
 8003444:	20000004 	.word	0x20000004
 8003448:	431bde83 	.word	0x431bde83

0800344c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e3fe      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	4ba1      	ldr	r3, [pc, #644]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003468:	4b9e      	ldr	r3, [pc, #632]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80e4 	beq.w	8003648 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d007      	beq.n	8003496 <HAL_RCC_OscConfig+0x4a>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b0c      	cmp	r3, #12
 800348a:	f040 808b 	bne.w	80035a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b01      	cmp	r3, #1
 8003492:	f040 8087 	bne.w	80035a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003496:	4b93      	ldr	r3, [pc, #588]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_RCC_OscConfig+0x62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e3d6      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1a      	ldr	r2, [r3, #32]
 80034b2:	4b8c      	ldr	r3, [pc, #560]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <HAL_RCC_OscConfig+0x7c>
 80034be:	4b89      	ldr	r3, [pc, #548]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c6:	e005      	b.n	80034d4 <HAL_RCC_OscConfig+0x88>
 80034c8:	4b86      	ldr	r3, [pc, #536]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80034ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d223      	bcs.n	8003520 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fd8b 	bl	8003ff8 <RCC_SetFlashLatencyFromMSIRange>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e3b7      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ec:	4b7d      	ldr	r3, [pc, #500]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a7c      	ldr	r2, [pc, #496]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80034f2:	f043 0308 	orr.w	r3, r3, #8
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b7a      	ldr	r3, [pc, #488]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4977      	ldr	r1, [pc, #476]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003506:	4313      	orrs	r3, r2
 8003508:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800350a:	4b76      	ldr	r3, [pc, #472]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	4972      	ldr	r1, [pc, #456]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
 800351e:	e025      	b.n	800356c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003520:	4b70      	ldr	r3, [pc, #448]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6f      	ldr	r2, [pc, #444]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003526:	f043 0308 	orr.w	r3, r3, #8
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b6d      	ldr	r3, [pc, #436]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	496a      	ldr	r1, [pc, #424]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800353e:	4b69      	ldr	r3, [pc, #420]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	4965      	ldr	r1, [pc, #404]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fd4b 	bl	8003ff8 <RCC_SetFlashLatencyFromMSIRange>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e377      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800356c:	f000 fc80 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b5c      	ldr	r3, [pc, #368]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	495a      	ldr	r1, [pc, #360]	; (80036e8 <HAL_RCC_OscConfig+0x29c>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_OscConfig+0x2a0>)
 800358a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800358c:	4b58      	ldr	r3, [pc, #352]	; (80036f0 <HAL_RCC_OscConfig+0x2a4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7fe fca9 	bl	8001ee8 <HAL_InitTick>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d052      	beq.n	8003646 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
 80035a2:	e35b      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d032      	beq.n	8003612 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035ac:	4b4d      	ldr	r3, [pc, #308]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035b8:	f7fe fce6 	bl	8001f88 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c0:	f7fe fce2 	bl	8001f88 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e344      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035d2:	4b44      	ldr	r3, [pc, #272]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035de:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a40      	ldr	r2, [pc, #256]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	493b      	ldr	r1, [pc, #236]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035fc:	4b39      	ldr	r3, [pc, #228]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	4936      	ldr	r1, [pc, #216]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800360c:	4313      	orrs	r3, r2
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	e01a      	b.n	8003648 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a33      	ldr	r2, [pc, #204]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800361e:	f7fe fcb3 	bl	8001f88 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003626:	f7fe fcaf 	bl	8001f88 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e311      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003638:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x1da>
 8003644:	e000      	b.n	8003648 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003646:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d074      	beq.n	800373e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b08      	cmp	r3, #8
 8003658:	d005      	beq.n	8003666 <HAL_RCC_OscConfig+0x21a>
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d10e      	bne.n	800367e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d10b      	bne.n	800367e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003666:	4b1f      	ldr	r3, [pc, #124]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d064      	beq.n	800373c <HAL_RCC_OscConfig+0x2f0>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d160      	bne.n	800373c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e2ee      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x24a>
 8003688:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e01d      	b.n	80036d2 <HAL_RCC_OscConfig+0x286>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800369e:	d10c      	bne.n	80036ba <HAL_RCC_OscConfig+0x26e>
 80036a0:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0c      	ldr	r2, [pc, #48]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	e00b      	b.n	80036d2 <HAL_RCC_OscConfig+0x286>
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a06      	ldr	r2, [pc, #24]	; (80036e4 <HAL_RCC_OscConfig+0x298>)
 80036cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d01c      	beq.n	8003714 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe fc55 	bl	8001f88 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036e0:	e011      	b.n	8003706 <HAL_RCC_OscConfig+0x2ba>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	08009b34 	.word	0x08009b34
 80036ec:	20000004 	.word	0x20000004
 80036f0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe fc48 	bl	8001f88 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e2aa      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003706:	4baf      	ldr	r3, [pc, #700]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x2a8>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe fc38 	bl	8001f88 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fe fc34 	bl	8001f88 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e296      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800372e:	4ba5      	ldr	r3, [pc, #660]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x2d0>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d060      	beq.n	800380c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x310>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	d119      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d116      	bne.n	800378a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800375c:	4b99      	ldr	r3, [pc, #612]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d005      	beq.n	8003774 <HAL_RCC_OscConfig+0x328>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e273      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b93      	ldr	r3, [pc, #588]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	061b      	lsls	r3, r3, #24
 8003782:	4990      	ldr	r1, [pc, #576]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003784:	4313      	orrs	r3, r2
 8003786:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	e040      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d023      	beq.n	80037da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003792:	4b8c      	ldr	r3, [pc, #560]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a8b      	ldr	r2, [pc, #556]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe fbf3 	bl	8001f88 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe fbef 	bl	8001f88 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e251      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b8:	4b82      	ldr	r3, [pc, #520]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b7f      	ldr	r3, [pc, #508]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	497c      	ldr	r1, [pc, #496]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	e018      	b.n	800380c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a79      	ldr	r2, [pc, #484]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80037e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fe fbcf 	bl	8001f88 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ee:	f7fe fbcb 	bl	8001f88 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e22d      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003800:	4b70      	ldr	r3, [pc, #448]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03c      	beq.n	8003892 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003820:	4b68      	ldr	r3, [pc, #416]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	4a67      	ldr	r2, [pc, #412]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fe fbaa 	bl	8001f88 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fe fba6 	bl	8001f88 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e208      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800384a:	4b5e      	ldr	r3, [pc, #376]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x3ec>
 8003858:	e01b      	b.n	8003892 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385a:	4b5a      	ldr	r3, [pc, #360]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 800385c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003860:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe fb8d 	bl	8001f88 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fe fb89 	bl	8001f88 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1eb      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003884:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ef      	bne.n	8003872 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a6 	beq.w	80039ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038a4:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10d      	bne.n	80038cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b0:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	4a43      	ldr	r2, [pc, #268]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80038b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ba:	6593      	str	r3, [r2, #88]	; 0x58
 80038bc:	4b41      	ldr	r3, [pc, #260]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038c8:	2301      	movs	r3, #1
 80038ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038cc:	4b3e      	ldr	r3, [pc, #248]	; (80039c8 <HAL_RCC_OscConfig+0x57c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d118      	bne.n	800390a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d8:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_OscConfig+0x57c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <HAL_RCC_OscConfig+0x57c>)
 80038de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038e4:	f7fe fb50 	bl	8001f88 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ec:	f7fe fb4c 	bl	8001f88 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1ae      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038fe:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_RCC_OscConfig+0x57c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d108      	bne.n	8003924 <HAL_RCC_OscConfig+0x4d8>
 8003912:	4b2c      	ldr	r3, [pc, #176]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003922:	e024      	b.n	800396e <HAL_RCC_OscConfig+0x522>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d110      	bne.n	800394e <HAL_RCC_OscConfig+0x502>
 800392c:	4b25      	ldr	r3, [pc, #148]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 800392e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003932:	4a24      	ldr	r2, [pc, #144]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800393c:	4b21      	ldr	r3, [pc, #132]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 800393e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003942:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800394c:	e00f      	b.n	800396e <HAL_RCC_OscConfig+0x522>
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003966:	f023 0304 	bic.w	r3, r3, #4
 800396a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003976:	f7fe fb07 	bl	8001f88 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397c:	e00a      	b.n	8003994 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800397e:	f7fe fb03 	bl	8001f88 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3288 	movw	r2, #5000	; 0x1388
 800398c:	4293      	cmp	r3, r2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e163      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_OscConfig+0x578>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ed      	beq.n	800397e <HAL_RCC_OscConfig+0x532>
 80039a2:	e01a      	b.n	80039da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fe faf0 	bl	8001f88 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039aa:	e00f      	b.n	80039cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fe faec 	bl	8001f88 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d906      	bls.n	80039cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e14c      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039cc:	4ba5      	ldr	r3, [pc, #660]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1e8      	bne.n	80039ac <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d105      	bne.n	80039ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e0:	4ba0      	ldr	r3, [pc, #640]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a9f      	ldr	r2, [pc, #636]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 80039e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03c      	beq.n	8003a72 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01c      	beq.n	8003a3a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a00:	4b98      	ldr	r3, [pc, #608]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a06:	4a97      	ldr	r2, [pc, #604]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe faba 	bl	8001f88 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a18:	f7fe fab6 	bl	8001f88 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e118      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a2a:	4b8e      	ldr	r3, [pc, #568]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ef      	beq.n	8003a18 <HAL_RCC_OscConfig+0x5cc>
 8003a38:	e01b      	b.n	8003a72 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a3a:	4b8a      	ldr	r3, [pc, #552]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a40:	4a88      	ldr	r2, [pc, #544]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003a42:	f023 0301 	bic.w	r3, r3, #1
 8003a46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fa9d 	bl	8001f88 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a52:	f7fe fa99 	bl	8001f88 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0fb      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a64:	4b7f      	ldr	r3, [pc, #508]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1ef      	bne.n	8003a52 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80ef 	beq.w	8003c5a <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	f040 80c5 	bne.w	8003c10 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a86:	4b77      	ldr	r3, [pc, #476]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0203 	and.w	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d12c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d123      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d11b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d113      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d109      	bne.n	8003af4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	3b01      	subs	r3, #1
 8003aee:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d067      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d062      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003afa:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0a8      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a55      	ldr	r2, [pc, #340]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b16:	f7fe fa37 	bl	8001f88 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fe fa33 	bl	8001f88 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e095      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b3c:	4b49      	ldr	r3, [pc, #292]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_RCC_OscConfig+0x81c>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	4311      	orrs	r1, r2
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b56:	0212      	lsls	r2, r2, #8
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b5e:	0852      	lsrs	r2, r2, #1
 8003b60:	3a01      	subs	r2, #1
 8003b62:	0552      	lsls	r2, r2, #21
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b6a:	0852      	lsrs	r2, r2, #1
 8003b6c:	3a01      	subs	r2, #1
 8003b6e:	0652      	lsls	r2, r2, #25
 8003b70:	4311      	orrs	r1, r2
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b76:	06d2      	lsls	r2, r2, #27
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	493a      	ldr	r1, [pc, #232]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b80:	4b38      	ldr	r3, [pc, #224]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a37      	ldr	r2, [pc, #220]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b8c:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b98:	f7fe f9f6 	bl	8001f88 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe f9f2 	bl	8001f88 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e054      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bbe:	e04c      	b.n	8003c5a <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e04b      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bc4:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d144      	bne.n	8003c5a <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003bd0:	4b24      	ldr	r3, [pc, #144]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bdc:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a20      	ldr	r2, [pc, #128]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003be8:	f7fe f9ce 	bl	8001f88 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe f9ca 	bl	8001f88 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e02c      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x7a4>
 8003c0e:	e024      	b.n	8003c5a <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d01f      	beq.n	8003c56 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c22:	f7fe f9b1 	bl	8001f88 <HAL_GetTick>
 8003c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c28:	e008      	b.n	8003c3c <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fe f9ad 	bl	8001f88 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e00f      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f0      	bne.n	8003c2a <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4905      	ldr	r1, [pc, #20]	; (8003c64 <HAL_RCC_OscConfig+0x818>)
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <HAL_RCC_OscConfig+0x820>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	60cb      	str	r3, [r1, #12]
 8003c54:	e001      	b.n	8003c5a <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	019d808c 	.word	0x019d808c
 8003c6c:	feeefffc 	.word	0xfeeefffc

08003c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0e7      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c84:	4b75      	ldr	r3, [pc, #468]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d910      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c92:	4b72      	ldr	r3, [pc, #456]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 0207 	bic.w	r2, r3, #7
 8003c9a:	4970      	ldr	r1, [pc, #448]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b6e      	ldr	r3, [pc, #440]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0cf      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d908      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd0:	4b63      	ldr	r3, [pc, #396]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4960      	ldr	r1, [pc, #384]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04c      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf6:	4b5a      	ldr	r3, [pc, #360]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d121      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0a6      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0e:	4b54      	ldr	r3, [pc, #336]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e09a      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d26:	4b4e      	ldr	r3, [pc, #312]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e08e      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d36:	4b4a      	ldr	r3, [pc, #296]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e086      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b46      	ldr	r3, [pc, #280]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	4943      	ldr	r1, [pc, #268]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fe f916 	bl	8001f88 <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5e:	e00a      	b.n	8003d76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d60:	f7fe f912 	bl	8001f88 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e06e      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 020c 	and.w	r2, r3, #12
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d1eb      	bne.n	8003d60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d010      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d208      	bcs.n	8003db6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	492b      	ldr	r1, [pc, #172]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db6:	4b29      	ldr	r3, [pc, #164]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d210      	bcs.n	8003de6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 0207 	bic.w	r2, r3, #7
 8003dcc:	4923      	ldr	r1, [pc, #140]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd4:	4b21      	ldr	r3, [pc, #132]	; (8003e5c <HAL_RCC_ClockConfig+0x1ec>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d001      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e036      	b.n	8003e54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df2:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	4918      	ldr	r1, [pc, #96]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0308 	and.w	r3, r3, #8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d009      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e10:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4910      	ldr	r1, [pc, #64]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e24:	f000 f824 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	490b      	ldr	r1, [pc, #44]	; (8003e64 <HAL_RCC_ClockConfig+0x1f4>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1f8>)
 8003e42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <HAL_RCC_ClockConfig+0x1fc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe f84d 	bl	8001ee8 <HAL_InitTick>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e52:	7afb      	ldrb	r3, [r7, #11]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40022000 	.word	0x40022000
 8003e60:	40021000 	.word	0x40021000
 8003e64:	08009b34 	.word	0x08009b34
 8003e68:	20000004 	.word	0x20000004
 8003e6c:	20000008 	.word	0x20000008

08003e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b089      	sub	sp, #36	; 0x24
 8003e74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7e:	4b3e      	ldr	r3, [pc, #248]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e88:	4b3b      	ldr	r3, [pc, #236]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d121      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d11e      	bne.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ea4:	4b34      	ldr	r3, [pc, #208]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003eb0:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e005      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ecc:	4a2b      	ldr	r2, [pc, #172]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d102      	bne.n	8003eee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ee8:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	e004      	b.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d101      	bne.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ef4:	4b23      	ldr	r3, [pc, #140]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ef6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b0c      	cmp	r3, #12
 8003efc:	d134      	bne.n	8003f68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d003      	beq.n	8003f1c <HAL_RCC_GetSysClockFreq+0xac>
 8003f14:	e005      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f16:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f18:	617b      	str	r3, [r7, #20]
      break;
 8003f1a:	e005      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f1c:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f1e:	617b      	str	r3, [r7, #20]
      break;
 8003f20:	e002      	b.n	8003f28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	617b      	str	r3, [r7, #20]
      break;
 8003f26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f28:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	3301      	adds	r3, #1
 8003f34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	fb02 f203 	mul.w	r2, r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	0e5b      	lsrs	r3, r3, #25
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	3301      	adds	r3, #1
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f68:	69bb      	ldr	r3, [r7, #24]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3724      	adds	r7, #36	; 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	08009b4c 	.word	0x08009b4c
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	007a1200 	.word	0x007a1200

08003f88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f8c:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	20000004 	.word	0x20000004

08003fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fa4:	f7ff fff0 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	08009b44 	.word	0x08009b44

08003fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fd0:	f7ff ffda 	bl	8003f88 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	0adb      	lsrs	r3, r3, #11
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	4904      	ldr	r1, [pc, #16]	; (8003ff4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fe2:	5ccb      	ldrb	r3, [r1, r3]
 8003fe4:	f003 031f 	and.w	r3, r3, #31
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	08009b44 	.word	0x08009b44

08003ff8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004004:	4b2a      	ldr	r3, [pc, #168]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004010:	f7ff f9b8 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004014:	6178      	str	r0, [r7, #20]
 8004016:	e014      	b.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800401e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004022:	6593      	str	r3, [r2, #88]	; 0x58
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004030:	f7ff f9a8 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004034:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004048:	d10b      	bne.n	8004062 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b80      	cmp	r3, #128	; 0x80
 800404e:	d919      	bls.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2ba0      	cmp	r3, #160	; 0xa0
 8004054:	d902      	bls.n	800405c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004056:	2302      	movs	r3, #2
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	e013      	b.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800405c:	2301      	movs	r3, #1
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	e010      	b.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b80      	cmp	r3, #128	; 0x80
 8004066:	d902      	bls.n	800406e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004068:	2303      	movs	r3, #3
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e00a      	b.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d102      	bne.n	800407a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004074:	2302      	movs	r3, #2
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e004      	b.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b70      	cmp	r3, #112	; 0x70
 800407e:	d101      	bne.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004080:	2301      	movs	r3, #1
 8004082:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004084:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 0207 	bic.w	r2, r3, #7
 800408c:	4909      	ldr	r1, [pc, #36]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004094:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d001      	beq.n	80040a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40022000 	.word	0x40022000

080040b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040c0:	2300      	movs	r3, #0
 80040c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040c4:	2300      	movs	r3, #0
 80040c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d031      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040dc:	d01a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80040de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80040e2:	d814      	bhi.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80040e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040ec:	d10f      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80040ee:	4bac      	ldr	r3, [pc, #688]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	4aab      	ldr	r2, [pc, #684]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040fa:	e00c      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	2100      	movs	r1, #0
 8004102:	4618      	mov	r0, r3
 8004104:	f000 f9dc 	bl	80044c0 <RCCEx_PLLSAI1_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800410c:	e003      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	74fb      	strb	r3, [r7, #19]
      break;
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411c:	4ba0      	ldr	r3, [pc, #640]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	499d      	ldr	r1, [pc, #628]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004132:	e001      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8099 	beq.w	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800414a:	4b95      	ldr	r3, [pc, #596]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800414c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800415a:	2300      	movs	r3, #0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	4b8f      	ldr	r3, [pc, #572]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004164:	4a8e      	ldr	r2, [pc, #568]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416a:	6593      	str	r3, [r2, #88]	; 0x58
 800416c:	4b8c      	ldr	r3, [pc, #560]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004178:	2301      	movs	r3, #1
 800417a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800417c:	4b89      	ldr	r3, [pc, #548]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a88      	ldr	r2, [pc, #544]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004188:	f7fd fefe 	bl	8001f88 <HAL_GetTick>
 800418c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800418e:	e009      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004190:	f7fd fefa 	bl	8001f88 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d902      	bls.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	74fb      	strb	r3, [r7, #19]
        break;
 80041a2:	e005      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041a4:	4b7f      	ldr	r3, [pc, #508]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0ef      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d155      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041b6:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d019      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041d2:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041de:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	4a6e      	ldr	r2, [pc, #440]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ee:	4b6c      	ldr	r3, [pc, #432]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	4a6a      	ldr	r2, [pc, #424]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041fe:	4a68      	ldr	r2, [pc, #416]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d016      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd feba 	bl	8001f88 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004216:	e00b      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004218:	f7fd feb6 	bl	8001f88 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d902      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	74fb      	strb	r3, [r7, #19]
            break;
 800422e:	e006      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004230:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ec      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10b      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004244:	4b56      	ldr	r3, [pc, #344]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004252:	4953      	ldr	r1, [pc, #332]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800425a:	e004      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800425c:	7cfb      	ldrb	r3, [r7, #19]
 800425e:	74bb      	strb	r3, [r7, #18]
 8004260:	e001      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004266:	7c7b      	ldrb	r3, [r7, #17]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800426c:	4b4c      	ldr	r3, [pc, #304]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	4a4b      	ldr	r2, [pc, #300]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004284:	4b46      	ldr	r3, [pc, #280]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	4943      	ldr	r1, [pc, #268]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042a6:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ac:	f023 020c 	bic.w	r2, r3, #12
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	493a      	ldr	r1, [pc, #232]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042c8:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	4932      	ldr	r1, [pc, #200]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ea:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f8:	4929      	ldr	r1, [pc, #164]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800430c:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	4921      	ldr	r1, [pc, #132]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	4918      	ldr	r1, [pc, #96]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	4910      	ldr	r1, [pc, #64]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d02c      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	4907      	ldr	r1, [pc, #28]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004390:	d10a      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004392:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4a02      	ldr	r2, [pc, #8]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800439c:	60d3      	str	r3, [r2, #12]
 800439e:	e015      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x314>
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3304      	adds	r3, #4
 80043b6:	2101      	movs	r1, #1
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f881 	bl	80044c0 <RCCEx_PLLSAI1_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043c2:	7cfb      	ldrb	r3, [r7, #19]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d028      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043d8:	4b30      	ldr	r3, [pc, #192]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	492d      	ldr	r1, [pc, #180]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f6:	d106      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a27      	ldr	r2, [pc, #156]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
 8004404:	e011      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800440e:	d10c      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f852 	bl	80044c0 <RCCEx_PLLSAI1_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d01c      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004444:	4915      	ldr	r1, [pc, #84]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004454:	d10c      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	2102      	movs	r1, #2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f82f 	bl	80044c0 <RCCEx_PLLSAI1_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004466:	7cfb      	ldrb	r3, [r7, #19]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	4904      	ldr	r1, [pc, #16]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004492:	7cbb      	ldrb	r3, [r7, #18]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000

080044a0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80044aa:	f043 0304 	orr.w	r3, r3, #4
 80044ae:	6013      	str	r3, [r2, #0]
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000

080044c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ce:	4b74      	ldr	r3, [pc, #464]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044da:	4b71      	ldr	r3, [pc, #452]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0203 	and.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d10d      	bne.n	8004506 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
       ||
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044f2:	4b6b      	ldr	r3, [pc, #428]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
       ||
 8004502:	429a      	cmp	r2, r3
 8004504:	d047      	beq.n	8004596 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	e044      	b.n	8004596 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d018      	beq.n	8004546 <RCCEx_PLLSAI1_Config+0x86>
 8004514:	2b03      	cmp	r3, #3
 8004516:	d825      	bhi.n	8004564 <RCCEx_PLLSAI1_Config+0xa4>
 8004518:	2b01      	cmp	r3, #1
 800451a:	d002      	beq.n	8004522 <RCCEx_PLLSAI1_Config+0x62>
 800451c:	2b02      	cmp	r3, #2
 800451e:	d009      	beq.n	8004534 <RCCEx_PLLSAI1_Config+0x74>
 8004520:	e020      	b.n	8004564 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004522:	4b5f      	ldr	r3, [pc, #380]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d11d      	bne.n	800456a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004532:	e01a      	b.n	800456a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004534:	4b5a      	ldr	r3, [pc, #360]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d116      	bne.n	800456e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004544:	e013      	b.n	800456e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004546:	4b56      	ldr	r3, [pc, #344]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10f      	bne.n	8004572 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004552:	4b53      	ldr	r3, [pc, #332]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004562:	e006      	b.n	8004572 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	73fb      	strb	r3, [r7, #15]
      break;
 8004568:	e004      	b.n	8004574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004572:	bf00      	nop
    }

    if(status == HAL_OK)
 8004574:	7bfb      	ldrb	r3, [r7, #15]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800457a:	4b49      	ldr	r3, [pc, #292]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	3b01      	subs	r3, #1
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	430b      	orrs	r3, r1
 8004590:	4943      	ldr	r1, [pc, #268]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004592:	4313      	orrs	r3, r2
 8004594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d17c      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800459c:	4b40      	ldr	r3, [pc, #256]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a3f      	ldr	r2, [pc, #252]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045a8:	f7fd fcee 	bl	8001f88 <HAL_GetTick>
 80045ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045ae:	e009      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b0:	f7fd fcea 	bl	8001f88 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d902      	bls.n	80045c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	73fb      	strb	r3, [r7, #15]
        break;
 80045c2:	e005      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1ef      	bne.n	80045b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d15f      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d110      	bne.n	80045fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045dc:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80045e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6892      	ldr	r2, [r2, #8]
 80045ec:	0211      	lsls	r1, r2, #8
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68d2      	ldr	r2, [r2, #12]
 80045f2:	06d2      	lsls	r2, r2, #27
 80045f4:	430a      	orrs	r2, r1
 80045f6:	492a      	ldr	r1, [pc, #168]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	610b      	str	r3, [r1, #16]
 80045fc:	e027      	b.n	800464e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d112      	bne.n	800462a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800460c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6892      	ldr	r2, [r2, #8]
 8004614:	0211      	lsls	r1, r2, #8
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6912      	ldr	r2, [r2, #16]
 800461a:	0852      	lsrs	r2, r2, #1
 800461c:	3a01      	subs	r2, #1
 800461e:	0552      	lsls	r2, r2, #21
 8004620:	430a      	orrs	r2, r1
 8004622:	491f      	ldr	r1, [pc, #124]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004624:	4313      	orrs	r3, r2
 8004626:	610b      	str	r3, [r1, #16]
 8004628:	e011      	b.n	800464e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800462a:	4b1d      	ldr	r3, [pc, #116]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004632:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	0211      	lsls	r1, r2, #8
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6952      	ldr	r2, [r2, #20]
 8004640:	0852      	lsrs	r2, r2, #1
 8004642:	3a01      	subs	r2, #1
 8004644:	0652      	lsls	r2, r2, #25
 8004646:	430a      	orrs	r2, r1
 8004648:	4915      	ldr	r1, [pc, #84]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800464e:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a13      	ldr	r2, [pc, #76]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004654:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004658:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fd fc95 	bl	8001f88 <HAL_GetTick>
 800465e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004660:	e009      	b.n	8004676 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004662:	f7fd fc91 	bl	8001f88 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d902      	bls.n	8004676 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	73fb      	strb	r3, [r7, #15]
          break;
 8004674:	e005      	b.n	8004682 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ef      	beq.n	8004662 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	4903      	ldr	r1, [pc, #12]	; (80046a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004692:	4313      	orrs	r3, r2
 8004694:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40021000 	.word	0x40021000

080046a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e033      	b.n	8004724 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a19      	ldr	r2, [pc, #100]	; (8004730 <HAL_TIM_Base_Start+0x8c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_TIM_Base_Start+0x3e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d6:	d004      	beq.n	80046e2 <HAL_TIM_Base_Start+0x3e>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <HAL_TIM_Base_Start+0x90>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d115      	bne.n	800470e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	4b13      	ldr	r3, [pc, #76]	; (8004738 <HAL_TIM_Base_Start+0x94>)
 80046ea:	4013      	ands	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b06      	cmp	r3, #6
 80046f2:	d015      	beq.n	8004720 <HAL_TIM_Base_Start+0x7c>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fa:	d011      	beq.n	8004720 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470c:	e008      	b.n	8004720 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 0201 	orr.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e000      	b.n	8004722 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40012c00 	.word	0x40012c00
 8004734:	40014000 	.word	0x40014000
 8004738:	00010007 	.word	0x00010007

0800473c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e049      	b.n	80047e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd f968 	bl	8001a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3304      	adds	r3, #4
 8004778:	4619      	mov	r1, r3
 800477a:	4610      	mov	r0, r2
 800477c:	f000 fa28 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d109      	bne.n	8004810 <HAL_TIM_PWM_Start+0x24>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b01      	cmp	r3, #1
 8004806:	bf14      	ite	ne
 8004808:	2301      	movne	r3, #1
 800480a:	2300      	moveq	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	e03c      	b.n	800488a <HAL_TIM_PWM_Start+0x9e>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d109      	bne.n	800482a <HAL_TIM_PWM_Start+0x3e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b01      	cmp	r3, #1
 8004820:	bf14      	ite	ne
 8004822:	2301      	movne	r3, #1
 8004824:	2300      	moveq	r3, #0
 8004826:	b2db      	uxtb	r3, r3
 8004828:	e02f      	b.n	800488a <HAL_TIM_PWM_Start+0x9e>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d109      	bne.n	8004844 <HAL_TIM_PWM_Start+0x58>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	e022      	b.n	800488a <HAL_TIM_PWM_Start+0x9e>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d109      	bne.n	800485e <HAL_TIM_PWM_Start+0x72>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b01      	cmp	r3, #1
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	e015      	b.n	800488a <HAL_TIM_PWM_Start+0x9e>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b10      	cmp	r3, #16
 8004862:	d109      	bne.n	8004878 <HAL_TIM_PWM_Start+0x8c>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	bf14      	ite	ne
 8004870:	2301      	movne	r3, #1
 8004872:	2300      	moveq	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	e008      	b.n	800488a <HAL_TIM_PWM_Start+0x9e>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e07e      	b.n	8004990 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d104      	bne.n	80048a2 <HAL_TIM_PWM_Start+0xb6>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a0:	e023      	b.n	80048ea <HAL_TIM_PWM_Start+0xfe>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d104      	bne.n	80048b2 <HAL_TIM_PWM_Start+0xc6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b0:	e01b      	b.n	80048ea <HAL_TIM_PWM_Start+0xfe>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_PWM_Start+0xd6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048c0:	e013      	b.n	80048ea <HAL_TIM_PWM_Start+0xfe>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_PWM_Start+0xe6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048d0:	e00b      	b.n	80048ea <HAL_TIM_PWM_Start+0xfe>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_PWM_Start+0xf6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e0:	e003      	b.n	80048ea <HAL_TIM_PWM_Start+0xfe>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fc4e 	bl	8005194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a26      	ldr	r2, [pc, #152]	; (8004998 <HAL_TIM_PWM_Start+0x1ac>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_TIM_PWM_Start+0x12a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a25      	ldr	r2, [pc, #148]	; (800499c <HAL_TIM_PWM_Start+0x1b0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_TIM_PWM_Start+0x12a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a23      	ldr	r2, [pc, #140]	; (80049a0 <HAL_TIM_PWM_Start+0x1b4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_TIM_PWM_Start+0x12e>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_TIM_PWM_Start+0x130>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d007      	beq.n	8004930 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800492e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_TIM_PWM_Start+0x1ac>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d009      	beq.n	800494e <HAL_TIM_PWM_Start+0x162>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004942:	d004      	beq.n	800494e <HAL_TIM_PWM_Start+0x162>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a14      	ldr	r2, [pc, #80]	; (800499c <HAL_TIM_PWM_Start+0x1b0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d115      	bne.n	800497a <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <HAL_TIM_PWM_Start+0x1b8>)
 8004956:	4013      	ands	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b06      	cmp	r3, #6
 800495e:	d015      	beq.n	800498c <HAL_TIM_PWM_Start+0x1a0>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004966:	d011      	beq.n	800498c <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	e008      	b.n	800498c <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e000      	b.n	800498e <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40012c00 	.word	0x40012c00
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	00010007 	.word	0x00010007

080049a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0ff      	b.n	8004bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b14      	cmp	r3, #20
 80049d2:	f200 80f0 	bhi.w	8004bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a31 	.word	0x08004a31
 80049e0:	08004bb7 	.word	0x08004bb7
 80049e4:	08004bb7 	.word	0x08004bb7
 80049e8:	08004bb7 	.word	0x08004bb7
 80049ec:	08004a71 	.word	0x08004a71
 80049f0:	08004bb7 	.word	0x08004bb7
 80049f4:	08004bb7 	.word	0x08004bb7
 80049f8:	08004bb7 	.word	0x08004bb7
 80049fc:	08004ab3 	.word	0x08004ab3
 8004a00:	08004bb7 	.word	0x08004bb7
 8004a04:	08004bb7 	.word	0x08004bb7
 8004a08:	08004bb7 	.word	0x08004bb7
 8004a0c:	08004af3 	.word	0x08004af3
 8004a10:	08004bb7 	.word	0x08004bb7
 8004a14:	08004bb7 	.word	0x08004bb7
 8004a18:	08004bb7 	.word	0x08004bb7
 8004a1c:	08004b35 	.word	0x08004b35
 8004a20:	08004bb7 	.word	0x08004bb7
 8004a24:	08004bb7 	.word	0x08004bb7
 8004a28:	08004bb7 	.word	0x08004bb7
 8004a2c:	08004b75 	.word	0x08004b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f92e 	bl	8004c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0208 	orr.w	r2, r2, #8
 8004a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0204 	bic.w	r2, r2, #4
 8004a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6999      	ldr	r1, [r3, #24]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	619a      	str	r2, [r3, #24]
      break;
 8004a6e:	e0a5      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68b9      	ldr	r1, [r7, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f98a 	bl	8004d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	619a      	str	r2, [r3, #24]
      break;
 8004ab0:	e084      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 f9e3 	bl	8004e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0208 	orr.w	r2, r2, #8
 8004acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0204 	bic.w	r2, r2, #4
 8004adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69d9      	ldr	r1, [r3, #28]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	61da      	str	r2, [r3, #28]
      break;
 8004af0:	e064      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fa3b 	bl	8004f74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69da      	ldr	r2, [r3, #28]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69d9      	ldr	r1, [r3, #28]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	021a      	lsls	r2, r3, #8
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	61da      	str	r2, [r3, #28]
      break;
 8004b32:	e043      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fa78 	bl	8005030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0208 	orr.w	r2, r2, #8
 8004b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0204 	bic.w	r2, r2, #4
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691a      	ldr	r2, [r3, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b72:	e023      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fab0 	bl	80050e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	021a      	lsls	r2, r3, #8
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bb4:	e002      	b.n	8004bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <TIM_Base_SetConfig+0xbc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0x20>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d108      	bne.n	8004c02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a21      	ldr	r2, [pc, #132]	; (8004c8c <TIM_Base_SetConfig+0xbc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_Base_SetConfig+0x52>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c10:	d007      	beq.n	8004c22 <TIM_Base_SetConfig+0x52>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <TIM_Base_SetConfig+0xc0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_Base_SetConfig+0x52>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	; (8004c94 <TIM_Base_SetConfig+0xc4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d108      	bne.n	8004c34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	; (8004c8c <TIM_Base_SetConfig+0xbc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <TIM_Base_SetConfig+0xa0>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a0b      	ldr	r2, [pc, #44]	; (8004c90 <TIM_Base_SetConfig+0xc0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d003      	beq.n	8004c70 <TIM_Base_SetConfig+0xa0>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <TIM_Base_SetConfig+0xc4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d103      	bne.n	8004c78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	615a      	str	r2, [r3, #20]
}
 8004c7e:	bf00      	nop
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40012c00 	.word	0x40012c00
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40014400 	.word	0x40014400

08004c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f023 0201 	bic.w	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f023 0302 	bic.w	r3, r3, #2
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a24      	ldr	r2, [pc, #144]	; (8004d84 <TIM_OC1_SetConfig+0xec>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d007      	beq.n	8004d08 <TIM_OC1_SetConfig+0x70>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a23      	ldr	r2, [pc, #140]	; (8004d88 <TIM_OC1_SetConfig+0xf0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d003      	beq.n	8004d08 <TIM_OC1_SetConfig+0x70>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a22      	ldr	r2, [pc, #136]	; (8004d8c <TIM_OC1_SetConfig+0xf4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10c      	bne.n	8004d22 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0308 	bic.w	r3, r3, #8
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <TIM_OC1_SetConfig+0xec>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d007      	beq.n	8004d3a <TIM_OC1_SetConfig+0xa2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a16      	ldr	r2, [pc, #88]	; (8004d88 <TIM_OC1_SetConfig+0xf0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_OC1_SetConfig+0xa2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <TIM_OC1_SetConfig+0xf4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d111      	bne.n	8004d5e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	621a      	str	r2, [r3, #32]
}
 8004d78:	bf00      	nop
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400

08004d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f023 0210 	bic.w	r2, r3, #16
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0320 	bic.w	r3, r3, #32
 8004dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <TIM_OC2_SetConfig+0xe8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d10d      	bne.n	8004e10 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <TIM_OC2_SetConfig+0xe8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_OC2_SetConfig+0x98>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <TIM_OC2_SetConfig+0xec>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_OC2_SetConfig+0x98>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <TIM_OC2_SetConfig+0xf0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d113      	bne.n	8004e50 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400

08004e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <TIM_OC3_SetConfig+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d10d      	bne.n	8004f02 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <TIM_OC3_SetConfig+0xe4>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_OC3_SetConfig+0x96>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <TIM_OC3_SetConfig+0xe8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_OC3_SetConfig+0x96>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <TIM_OC3_SetConfig+0xec>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d113      	bne.n	8004f42 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	621a      	str	r2, [r3, #32]
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	40012c00 	.word	0x40012c00
 8004f6c:	40014000 	.word	0x40014000
 8004f70:	40014400 	.word	0x40014400

08004f74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a1b      	ldr	r3, [r3, #32]
 8004f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	031b      	lsls	r3, r3, #12
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a14      	ldr	r2, [pc, #80]	; (8005024 <TIM_OC4_SetConfig+0xb0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_OC4_SetConfig+0x74>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a13      	ldr	r2, [pc, #76]	; (8005028 <TIM_OC4_SetConfig+0xb4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_OC4_SetConfig+0x74>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a12      	ldr	r2, [pc, #72]	; (800502c <TIM_OC4_SetConfig+0xb8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d109      	bne.n	8004ffc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	019b      	lsls	r3, r3, #6
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40012c00 	.word	0x40012c00
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400

08005030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005074:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <TIM_OC5_SetConfig+0xa4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d007      	beq.n	800509a <TIM_OC5_SetConfig+0x6a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a12      	ldr	r2, [pc, #72]	; (80050d8 <TIM_OC5_SetConfig+0xa8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d003      	beq.n	800509a <TIM_OC5_SetConfig+0x6a>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a11      	ldr	r2, [pc, #68]	; (80050dc <TIM_OC5_SetConfig+0xac>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d109      	bne.n	80050ae <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	621a      	str	r2, [r3, #32]
}
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400

080050e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	051b      	lsls	r3, r3, #20
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a14      	ldr	r2, [pc, #80]	; (8005188 <TIM_OC6_SetConfig+0xa8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_OC6_SetConfig+0x6c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <TIM_OC6_SetConfig+0xac>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_OC6_SetConfig+0x6c>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a12      	ldr	r2, [pc, #72]	; (8005190 <TIM_OC6_SetConfig+0xb0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d109      	bne.n	8005160 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005152:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	621a      	str	r2, [r3, #32]
}
 800517a:	bf00      	nop
 800517c:	371c      	adds	r7, #28
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400

08005194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	2201      	movs	r2, #1
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	401a      	ands	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	f003 031f 	and.w	r3, r3, #31
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	fa01 f303 	lsl.w	r3, r1, r3
 80051cc:	431a      	orrs	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e04f      	b.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d108      	bne.n	8005234 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005228:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a14      	ldr	r2, [pc, #80]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d004      	beq.n	800526c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d10c      	bne.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005272:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	4313      	orrs	r3, r2
 800527c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40014000 	.word	0x40014000

080052ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e060      	b.n	800538a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a14      	ldr	r2, [pc, #80]	; (8005398 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d115      	bne.n	8005378 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	051b      	lsls	r3, r3, #20
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	40012c00 	.word	0x40012c00

0800539c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e040      	b.n	8005430 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fc fb92 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2224      	movs	r2, #36	; 0x24
 80053c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 0201 	bic.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fc18 	bl	8005c10 <UART_SetConfig>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e022      	b.n	8005430 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 fe16 	bl	8006024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fe9d 	bl	8006168 <UART_CheckIdleState>
 800542e:	4603      	mov	r3, r0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08a      	sub	sp, #40	; 0x28
 800543c:	af02      	add	r7, sp, #8
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800544c:	2b20      	cmp	r3, #32
 800544e:	f040 8082 	bne.w	8005556 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <HAL_UART_Transmit+0x26>
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e07a      	b.n	8005558 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_UART_Transmit+0x38>
 800546c:	2302      	movs	r3, #2
 800546e:	e073      	b.n	8005558 <HAL_UART_Transmit+0x120>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2221      	movs	r2, #33	; 0x21
 8005484:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005486:	f7fc fd7f 	bl	8001f88 <HAL_GetTick>
 800548a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	88fa      	ldrh	r2, [r7, #6]
 8005490:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a4:	d108      	bne.n	80054b8 <HAL_UART_Transmit+0x80>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d104      	bne.n	80054b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	e003      	b.n	80054c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80054c8:	e02d      	b.n	8005526 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2200      	movs	r2, #0
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fe90 	bl	80061fa <UART_WaitOnFlagUntilTimeout>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e039      	b.n	8005558 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10b      	bne.n	8005502 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f6:	b292      	uxth	r2, r2
 80054f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	3302      	adds	r3, #2
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e008      	b.n	8005514 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	b292      	uxth	r2, r2
 800550c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3301      	adds	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1cb      	bne.n	80054ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	2140      	movs	r1, #64	; 0x40
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fe5c 	bl	80061fa <UART_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e005      	b.n	8005558 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2220      	movs	r2, #32
 8005550:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e000      	b.n	8005558 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005556:	2302      	movs	r3, #2
  }
}
 8005558:	4618      	mov	r0, r3
 800555a:	3720      	adds	r7, #32
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005572:	2b20      	cmp	r3, #32
 8005574:	d142      	bne.n	80055fc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_UART_Receive_IT+0x22>
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e03b      	b.n	80055fe <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_UART_Receive_IT+0x34>
 8005590:	2302      	movs	r3, #2
 8005592:	e034      	b.n	80055fe <HAL_UART_Receive_IT+0x9e>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_UART_Receive_IT+0xa8>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d01f      	beq.n	80055ec <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d018      	beq.n	80055ec <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	613b      	str	r3, [r7, #16]
   return(result);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	461a      	mov	r2, r3
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	623b      	str	r3, [r7, #32]
 80055da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055dc:	69f9      	ldr	r1, [r7, #28]
 80055de:	6a3a      	ldr	r2, [r7, #32]
 80055e0:	e841 2300 	strex	r3, r2, [r1]
 80055e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1e6      	bne.n	80055ba <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055ec:	88fb      	ldrh	r3, [r7, #6]
 80055ee:	461a      	mov	r2, r3
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fec6 	bl	8006384 <UART_Start_Receive_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	e000      	b.n	80055fe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80055fc:	2302      	movs	r3, #2
  }
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3728      	adds	r7, #40	; 0x28
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40008000 	.word	0x40008000

0800560c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b0ba      	sub	sp, #232	; 0xe8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	69db      	ldr	r3, [r3, #28]
 800561a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005636:	f640 030f 	movw	r3, #2063	; 0x80f
 800563a:	4013      	ands	r3, r2
 800563c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d115      	bne.n	8005674 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00f      	beq.n	8005674 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 82a6 	beq.w	8005bb6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
      }
      return;
 8005672:	e2a0      	b.n	8005bb6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8117 	beq.w	80058ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800567e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800568a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800568e:	4b85      	ldr	r3, [pc, #532]	; (80058a4 <HAL_UART_IRQHandler+0x298>)
 8005690:	4013      	ands	r3, r2
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 810a 	beq.w	80058ac <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d011      	beq.n	80056c8 <HAL_UART_IRQHandler+0xbc>
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2201      	movs	r2, #1
 80056b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056be:	f043 0201 	orr.w	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d011      	beq.n	80056f8 <HAL_UART_IRQHandler+0xec>
 80056d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00b      	beq.n	80056f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2202      	movs	r2, #2
 80056e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d011      	beq.n	8005728 <HAL_UART_IRQHandler+0x11c>
 8005704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2204      	movs	r2, #4
 8005716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800571e:	f043 0202 	orr.w	r2, r3, #2
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d017      	beq.n	8005764 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d105      	bne.n	800574c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005744:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00b      	beq.n	8005764 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2208      	movs	r2, #8
 8005752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800575a:	f043 0208 	orr.w	r2, r3, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <HAL_UART_IRQHandler+0x18a>
 8005770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005774:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00c      	beq.n	8005796 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005784:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800578c:	f043 0220 	orr.w	r2, r3, #32
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 820c 	beq.w	8005bba <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d007      	beq.n	80057ca <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d005      	beq.n	80057ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d04f      	beq.n	800588e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fe92 	bl	8006518 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d141      	bne.n	8005886 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3308      	adds	r3, #8
 8005808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800581c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	3308      	adds	r3, #8
 800582a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800582e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800583a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005846:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1d9      	bne.n	8005802 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	2b00      	cmp	r3, #0
 8005854:	d013      	beq.n	800587e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a13      	ldr	r2, [pc, #76]	; (80058a8 <HAL_UART_IRQHandler+0x29c>)
 800585c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	4618      	mov	r0, r3
 8005864:	f7fc fd0f 	bl	8002286 <HAL_DMA_Abort_IT>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d017      	beq.n	800589e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005878:	4610      	mov	r0, r2
 800587a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	e00f      	b.n	800589e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f9b0 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005884:	e00b      	b.n	800589e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f9ac 	bl	8005be4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e007      	b.n	800589e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9a8 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800589c:	e18d      	b.n	8005bba <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589e:	bf00      	nop
    return;
 80058a0:	e18b      	b.n	8005bba <HAL_UART_IRQHandler+0x5ae>
 80058a2:	bf00      	nop
 80058a4:	04000120 	.word	0x04000120
 80058a8:	080065df 	.word	0x080065df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	f040 8146 	bne.w	8005b42 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 813f 	beq.w	8005b42 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058c8:	f003 0310 	and.w	r3, r3, #16
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8138 	beq.w	8005b42 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2210      	movs	r2, #16
 80058d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	f040 80b4 	bne.w	8005a52 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 815f 	beq.w	8005bbe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005906:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800590a:	429a      	cmp	r2, r3
 800590c:	f080 8157 	bcs.w	8005bbe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005916:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	f040 8085 	bne.w	8005a36 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800595a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005962:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800596e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1da      	bne.n	800592c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3308      	adds	r3, #8
 800597c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005986:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	3308      	adds	r3, #8
 8005996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800599a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800599e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e1      	bne.n	8005976 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3308      	adds	r3, #8
 80059b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e3      	bne.n	80059b2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a06:	f023 0310 	bic.w	r3, r3, #16
 8005a0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a18:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a1a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e4      	bne.n	80059f6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fc fbea 	bl	800220a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f8d4 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a50:	e0b5      	b.n	8005bbe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 80a7 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a2 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e4      	bne.n	8005a7e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3308      	adds	r3, #8
 8005ad4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ad8:	633a      	str	r2, [r7, #48]	; 0x30
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e3      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2220      	movs	r2, #32
 8005af0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0310 	bic.w	r3, r3, #16
 8005b12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	69b9      	ldr	r1, [r7, #24]
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e4      	bne.n	8005afe <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b38:	4619      	mov	r1, r3
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f85c 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b40:	e03f      	b.n	8005bc2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <HAL_UART_IRQHandler+0x560>
 8005b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 feda 	bl	800691e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b6a:	e02d      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01c      	beq.n	8005bc6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
    }
    return;
 8005b94:	e017      	b.n	8005bc6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d012      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
 8005ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00c      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fd2b 	bl	800660a <UART_EndTransmit_IT>
    return;
 8005bb4:	e008      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005bb6:	bf00      	nop
 8005bb8:	e006      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005bba:	bf00      	nop
 8005bbc:	e004      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005bbe:	bf00      	nop
 8005bc0:	e002      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005bc2:	bf00      	nop
 8005bc4:	e000      	b.n	8005bc8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005bc6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bc8:	37e8      	adds	r7, #232	; 0xe8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop

08005bd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	460b      	mov	r3, r1
 8005c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	b5b0      	push	{r4, r5, r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4baf      	ldr	r3, [pc, #700]	; (8005ef8 <UART_SetConfig+0x2e8>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	69f9      	ldr	r1, [r7, #28]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4aa4      	ldr	r2, [pc, #656]	; (8005efc <UART_SetConfig+0x2ec>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a9b      	ldr	r2, [pc, #620]	; (8005f00 <UART_SetConfig+0x2f0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d121      	bne.n	8005cda <UART_SetConfig+0xca>
 8005c96:	4b9b      	ldr	r3, [pc, #620]	; (8005f04 <UART_SetConfig+0x2f4>)
 8005c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9c:	f003 0303 	and.w	r3, r3, #3
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d817      	bhi.n	8005cd4 <UART_SetConfig+0xc4>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <UART_SetConfig+0x9c>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005cc9 	.word	0x08005cc9
 8005cb4:	08005cc3 	.word	0x08005cc3
 8005cb8:	08005ccf 	.word	0x08005ccf
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	76fb      	strb	r3, [r7, #27]
 8005cc0:	e070      	b.n	8005da4 <UART_SetConfig+0x194>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	76fb      	strb	r3, [r7, #27]
 8005cc6:	e06d      	b.n	8005da4 <UART_SetConfig+0x194>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	76fb      	strb	r3, [r7, #27]
 8005ccc:	e06a      	b.n	8005da4 <UART_SetConfig+0x194>
 8005cce:	2308      	movs	r3, #8
 8005cd0:	76fb      	strb	r3, [r7, #27]
 8005cd2:	e067      	b.n	8005da4 <UART_SetConfig+0x194>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	76fb      	strb	r3, [r7, #27]
 8005cd8:	e064      	b.n	8005da4 <UART_SetConfig+0x194>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a8a      	ldr	r2, [pc, #552]	; (8005f08 <UART_SetConfig+0x2f8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d132      	bne.n	8005d4a <UART_SetConfig+0x13a>
 8005ce4:	4b87      	ldr	r3, [pc, #540]	; (8005f04 <UART_SetConfig+0x2f4>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	2b0c      	cmp	r3, #12
 8005cf0:	d828      	bhi.n	8005d44 <UART_SetConfig+0x134>
 8005cf2:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0xe8>)
 8005cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf8:	08005d2d 	.word	0x08005d2d
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d45 	.word	0x08005d45
 8005d04:	08005d45 	.word	0x08005d45
 8005d08:	08005d39 	.word	0x08005d39
 8005d0c:	08005d45 	.word	0x08005d45
 8005d10:	08005d45 	.word	0x08005d45
 8005d14:	08005d45 	.word	0x08005d45
 8005d18:	08005d33 	.word	0x08005d33
 8005d1c:	08005d45 	.word	0x08005d45
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d45 	.word	0x08005d45
 8005d28:	08005d3f 	.word	0x08005d3f
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	76fb      	strb	r3, [r7, #27]
 8005d30:	e038      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d32:	2302      	movs	r3, #2
 8005d34:	76fb      	strb	r3, [r7, #27]
 8005d36:	e035      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	76fb      	strb	r3, [r7, #27]
 8005d3c:	e032      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d3e:	2308      	movs	r3, #8
 8005d40:	76fb      	strb	r3, [r7, #27]
 8005d42:	e02f      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d44:	2310      	movs	r3, #16
 8005d46:	76fb      	strb	r3, [r7, #27]
 8005d48:	e02c      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a6b      	ldr	r2, [pc, #428]	; (8005efc <UART_SetConfig+0x2ec>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d125      	bne.n	8005da0 <UART_SetConfig+0x190>
 8005d54:	4b6b      	ldr	r3, [pc, #428]	; (8005f04 <UART_SetConfig+0x2f4>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d62:	d017      	beq.n	8005d94 <UART_SetConfig+0x184>
 8005d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d68:	d817      	bhi.n	8005d9a <UART_SetConfig+0x18a>
 8005d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d6e:	d00b      	beq.n	8005d88 <UART_SetConfig+0x178>
 8005d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d74:	d811      	bhi.n	8005d9a <UART_SetConfig+0x18a>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <UART_SetConfig+0x172>
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7e:	d006      	beq.n	8005d8e <UART_SetConfig+0x17e>
 8005d80:	e00b      	b.n	8005d9a <UART_SetConfig+0x18a>
 8005d82:	2300      	movs	r3, #0
 8005d84:	76fb      	strb	r3, [r7, #27]
 8005d86:	e00d      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d88:	2302      	movs	r3, #2
 8005d8a:	76fb      	strb	r3, [r7, #27]
 8005d8c:	e00a      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d8e:	2304      	movs	r3, #4
 8005d90:	76fb      	strb	r3, [r7, #27]
 8005d92:	e007      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d94:	2308      	movs	r3, #8
 8005d96:	76fb      	strb	r3, [r7, #27]
 8005d98:	e004      	b.n	8005da4 <UART_SetConfig+0x194>
 8005d9a:	2310      	movs	r3, #16
 8005d9c:	76fb      	strb	r3, [r7, #27]
 8005d9e:	e001      	b.n	8005da4 <UART_SetConfig+0x194>
 8005da0:	2310      	movs	r3, #16
 8005da2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a54      	ldr	r2, [pc, #336]	; (8005efc <UART_SetConfig+0x2ec>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d173      	bne.n	8005e96 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dae:	7efb      	ldrb	r3, [r7, #27]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d824      	bhi.n	8005dfe <UART_SetConfig+0x1ee>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x1ac>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005dff 	.word	0x08005dff
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005dff 	.word	0x08005dff
 8005dcc:	08005def 	.word	0x08005def
 8005dd0:	08005dff 	.word	0x08005dff
 8005dd4:	08005dff 	.word	0x08005dff
 8005dd8:	08005dff 	.word	0x08005dff
 8005ddc:	08005df7 	.word	0x08005df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de0:	f7fe f8de 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 8005de4:	6178      	str	r0, [r7, #20]
        break;
 8005de6:	e00f      	b.n	8005e08 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005de8:	4b48      	ldr	r3, [pc, #288]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005dea:	617b      	str	r3, [r7, #20]
        break;
 8005dec:	e00c      	b.n	8005e08 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dee:	f7fe f83f 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8005df2:	6178      	str	r0, [r7, #20]
        break;
 8005df4:	e008      	b.n	8005e08 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfa:	617b      	str	r3, [r7, #20]
        break;
 8005dfc:	e004      	b.n	8005e08 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	76bb      	strb	r3, [r7, #26]
        break;
 8005e06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80fc 	beq.w	8006008 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	4413      	add	r3, r2
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d305      	bcc.n	8005e2c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d902      	bls.n	8005e32 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	76bb      	strb	r3, [r7, #26]
 8005e30:	e0ea      	b.n	8006008 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	020b      	lsls	r3, r1, #8
 8005e44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e48:	0202      	lsls	r2, r0, #8
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	6849      	ldr	r1, [r1, #4]
 8005e4e:	0849      	lsrs	r1, r1, #1
 8005e50:	4608      	mov	r0, r1
 8005e52:	f04f 0100 	mov.w	r1, #0
 8005e56:	1814      	adds	r4, r2, r0
 8005e58:	eb43 0501 	adc.w	r5, r3, r1
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	461a      	mov	r2, r3
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	4620      	mov	r0, r4
 8005e68:	4629      	mov	r1, r5
 8005e6a:	f7fa fecf 	bl	8000c0c <__aeabi_uldivmod>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4613      	mov	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7c:	d308      	bcc.n	8005e90 <UART_SetConfig+0x280>
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e84:	d204      	bcs.n	8005e90 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	e0bb      	b.n	8006008 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	76bb      	strb	r3, [r7, #26]
 8005e94:	e0b8      	b.n	8006008 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9e:	d167      	bne.n	8005f70 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 8005ea0:	7efb      	ldrb	r3, [r7, #27]
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d834      	bhi.n	8005f10 <UART_SetConfig+0x300>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x29c>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005ee7 	.word	0x08005ee7
 8005ec0:	08005f11 	.word	0x08005f11
 8005ec4:	08005f11 	.word	0x08005f11
 8005ec8:	08005f11 	.word	0x08005f11
 8005ecc:	08005eef 	.word	0x08005eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fe f866 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	6178      	str	r0, [r7, #20]
        break;
 8005ed6:	e020      	b.n	8005f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed8:	f7fe f878 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 8005edc:	6178      	str	r0, [r7, #20]
        break;
 8005ede:	e01c      	b.n	8005f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee0:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <UART_SetConfig+0x2fc>)
 8005ee2:	617b      	str	r3, [r7, #20]
        break;
 8005ee4:	e019      	b.n	8005f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ee6:	f7fd ffc3 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8005eea:	6178      	str	r0, [r7, #20]
        break;
 8005eec:	e015      	b.n	8005f1a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef2:	617b      	str	r3, [r7, #20]
        break;
 8005ef4:	e011      	b.n	8005f1a <UART_SetConfig+0x30a>
 8005ef6:	bf00      	nop
 8005ef8:	efff69f3 	.word	0xefff69f3
 8005efc:	40008000 	.word	0x40008000
 8005f00:	40013800 	.word	0x40013800
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40004400 	.word	0x40004400
 8005f0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	76bb      	strb	r3, [r7, #26]
        break;
 8005f18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d073      	beq.n	8006008 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	005a      	lsls	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	441a      	add	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f34:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b0f      	cmp	r3, #15
 8005f3a:	d916      	bls.n	8005f6a <UART_SetConfig+0x35a>
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d212      	bcs.n	8005f6a <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f023 030f 	bic.w	r3, r3, #15
 8005f4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	89fb      	ldrh	r3, [r7, #14]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	89fa      	ldrh	r2, [r7, #14]
 8005f66:	60da      	str	r2, [r3, #12]
 8005f68:	e04e      	b.n	8006008 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	76bb      	strb	r3, [r7, #26]
 8005f6e:	e04b      	b.n	8006008 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f70:	7efb      	ldrb	r3, [r7, #27]
 8005f72:	2b08      	cmp	r3, #8
 8005f74:	d827      	bhi.n	8005fc6 <UART_SetConfig+0x3b6>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x36c>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005fa1 	.word	0x08005fa1
 8005f80:	08005fa9 	.word	0x08005fa9
 8005f84:	08005fb1 	.word	0x08005fb1
 8005f88:	08005fc7 	.word	0x08005fc7
 8005f8c:	08005fb7 	.word	0x08005fb7
 8005f90:	08005fc7 	.word	0x08005fc7
 8005f94:	08005fc7 	.word	0x08005fc7
 8005f98:	08005fc7 	.word	0x08005fc7
 8005f9c:	08005fbf 	.word	0x08005fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa0:	f7fd fffe 	bl	8003fa0 <HAL_RCC_GetPCLK1Freq>
 8005fa4:	6178      	str	r0, [r7, #20]
        break;
 8005fa6:	e013      	b.n	8005fd0 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa8:	f7fe f810 	bl	8003fcc <HAL_RCC_GetPCLK2Freq>
 8005fac:	6178      	str	r0, [r7, #20]
        break;
 8005fae:	e00f      	b.n	8005fd0 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb0:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <UART_SetConfig+0x410>)
 8005fb2:	617b      	str	r3, [r7, #20]
        break;
 8005fb4:	e00c      	b.n	8005fd0 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb6:	f7fd ff5b 	bl	8003e70 <HAL_RCC_GetSysClockFreq>
 8005fba:	6178      	str	r0, [r7, #20]
        break;
 8005fbc:	e008      	b.n	8005fd0 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc2:	617b      	str	r3, [r7, #20]
        break;
 8005fc4:	e004      	b.n	8005fd0 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	76bb      	strb	r3, [r7, #26]
        break;
 8005fce:	bf00      	nop
    }

    if (pclk != 0U)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d018      	beq.n	8006008 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085a      	lsrs	r2, r3, #1
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	441a      	add	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b0f      	cmp	r3, #15
 8005fee:	d909      	bls.n	8006004 <UART_SetConfig+0x3f4>
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff6:	d205      	bcs.n	8006004 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	e001      	b.n	8006008 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006014:	7ebb      	ldrb	r3, [r7, #26]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3720      	adds	r7, #32
 800601a:	46bd      	mov	sp, r7
 800601c:	bdb0      	pop	{r4, r5, r7, pc}
 800601e:	bf00      	nop
 8006020:	00f42400 	.word	0x00f42400

08006024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00a      	beq.n	800604e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00a      	beq.n	8006092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f003 0308 	and.w	r3, r3, #8
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	430a      	orrs	r2, r1
 80060b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01a      	beq.n	800613a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006122:	d10a      	bne.n	800613a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af02      	add	r7, sp, #8
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006178:	f7fb ff06 	bl	8001f88 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b08      	cmp	r3, #8
 800618a:	d10e      	bne.n	80061aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f82d 	bl	80061fa <UART_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e023      	b.n	80061f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d10e      	bne.n	80061d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f817 	bl	80061fa <UART_WaitOnFlagUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e00d      	b.n	80061f2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b09c      	sub	sp, #112	; 0x70
 80061fe:	af00      	add	r7, sp, #0
 8006200:	60f8      	str	r0, [r7, #12]
 8006202:	60b9      	str	r1, [r7, #8]
 8006204:	603b      	str	r3, [r7, #0]
 8006206:	4613      	mov	r3, r2
 8006208:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800620a:	e0a5      	b.n	8006358 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800620c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	f000 80a1 	beq.w	8006358 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006216:	f7fb feb7 	bl	8001f88 <HAL_GetTick>
 800621a:	4602      	mov	r2, r0
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006222:	429a      	cmp	r2, r3
 8006224:	d302      	bcc.n	800622c <UART_WaitOnFlagUntilTimeout+0x32>
 8006226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006228:	2b00      	cmp	r3, #0
 800622a:	d13e      	bne.n	80062aa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800623a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006240:	667b      	str	r3, [r7, #100]	; 0x64
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800624c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e6      	bne.n	800622c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800626e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	663b      	str	r3, [r7, #96]	; 0x60
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800627e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006280:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800628c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2220      	movs	r2, #32
 8006296:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2220      	movs	r2, #32
 800629c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e067      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0304 	and.w	r3, r3, #4
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d04f      	beq.n	8006358 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c6:	d147      	bne.n	8006358 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062d0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	e853 3f00 	ldrex	r3, [r3]
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f0:	637b      	str	r3, [r7, #52]	; 0x34
 80062f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e6      	bne.n	80062d2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	613b      	str	r3, [r7, #16]
   return(result);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	66bb      	str	r3, [r7, #104]	; 0x68
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3308      	adds	r3, #8
 8006322:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006324:	623a      	str	r2, [r7, #32]
 8006326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006328:	69f9      	ldr	r1, [r7, #28]
 800632a:	6a3a      	ldr	r2, [r7, #32]
 800632c:	e841 2300 	strex	r3, r2, [r1]
 8006330:	61bb      	str	r3, [r7, #24]
   return(result);
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1e5      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e010      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69da      	ldr	r2, [r3, #28]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4013      	ands	r3, r2
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	429a      	cmp	r2, r3
 8006366:	bf0c      	ite	eq
 8006368:	2301      	moveq	r3, #1
 800636a:	2300      	movne	r3, #0
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	79fb      	ldrb	r3, [r7, #7]
 8006372:	429a      	cmp	r2, r3
 8006374:	f43f af4a 	beq.w	800620c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3770      	adds	r7, #112	; 0x70
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
	...

08006384 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006384:	b480      	push	{r7}
 8006386:	b097      	sub	sp, #92	; 0x5c
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	88fa      	ldrh	r2, [r7, #6]
 800639c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d10e      	bne.n	80063d6 <UART_Start_Receive_IT+0x52>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d105      	bne.n	80063cc <UART_Start_Receive_IT+0x48>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80063c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ca:	e02d      	b.n	8006428 <UART_Start_Receive_IT+0xa4>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	22ff      	movs	r2, #255	; 0xff
 80063d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063d4:	e028      	b.n	8006428 <UART_Start_Receive_IT+0xa4>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10d      	bne.n	80063fa <UART_Start_Receive_IT+0x76>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <UART_Start_Receive_IT+0x6c>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	22ff      	movs	r2, #255	; 0xff
 80063ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063ee:	e01b      	b.n	8006428 <UART_Start_Receive_IT+0xa4>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	227f      	movs	r2, #127	; 0x7f
 80063f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80063f8:	e016      	b.n	8006428 <UART_Start_Receive_IT+0xa4>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006402:	d10d      	bne.n	8006420 <UART_Start_Receive_IT+0x9c>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d104      	bne.n	8006416 <UART_Start_Receive_IT+0x92>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	227f      	movs	r2, #127	; 0x7f
 8006410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006414:	e008      	b.n	8006428 <UART_Start_Receive_IT+0xa4>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	223f      	movs	r2, #63	; 0x3f
 800641a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800641e:	e003      	b.n	8006428 <UART_Start_Receive_IT+0xa4>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2222      	movs	r2, #34	; 0x22
 8006434:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3308      	adds	r3, #8
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	657b      	str	r3, [r7, #84]	; 0x54
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3308      	adds	r3, #8
 8006454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006456:	64ba      	str	r2, [r7, #72]	; 0x48
 8006458:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800645c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e5      	bne.n	8006436 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006472:	d107      	bne.n	8006484 <UART_Start_Receive_IT+0x100>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d103      	bne.n	8006484 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	4a24      	ldr	r2, [pc, #144]	; (8006510 <UART_Start_Receive_IT+0x18c>)
 8006480:	665a      	str	r2, [r3, #100]	; 0x64
 8006482:	e002      	b.n	800648a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4a23      	ldr	r2, [pc, #140]	; (8006514 <UART_Start_Receive_IT+0x190>)
 8006488:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d019      	beq.n	80064ce <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80064ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e6      	bne.n	800649a <UART_Start_Receive_IT+0x116>
 80064cc:	e018      	b.n	8006500 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	613b      	str	r3, [r7, #16]
   return(result);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f043 0320 	orr.w	r3, r3, #32
 80064e2:	653b      	str	r3, [r7, #80]	; 0x50
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	623b      	str	r3, [r7, #32]
 80064ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	69f9      	ldr	r1, [r7, #28]
 80064f2:	6a3a      	ldr	r2, [r7, #32]
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e6      	bne.n	80064ce <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	375c      	adds	r7, #92	; 0x5c
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	080067bf 	.word	0x080067bf
 8006514:	0800665f 	.word	0x0800665f

08006518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b095      	sub	sp, #84	; 0x54
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800653e:	643b      	str	r3, [r7, #64]	; 0x40
 8006540:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800654c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e6      	bne.n	8006520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3308      	adds	r3, #8
 8006558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	61fb      	str	r3, [r7, #28]
   return(result);
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	64bb      	str	r3, [r7, #72]	; 0x48
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3308      	adds	r3, #8
 8006570:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006574:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e5      	bne.n	8006552 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800658a:	2b01      	cmp	r3, #1
 800658c:	d118      	bne.n	80065c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60bb      	str	r3, [r7, #8]
   return(result);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	647b      	str	r3, [r7, #68]	; 0x44
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ac:	61bb      	str	r3, [r7, #24]
 80065ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b0:	6979      	ldr	r1, [r7, #20]
 80065b2:	69ba      	ldr	r2, [r7, #24]
 80065b4:	e841 2300 	strex	r3, r2, [r1]
 80065b8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1e6      	bne.n	800658e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80065d2:	bf00      	nop
 80065d4:	3754      	adds	r7, #84	; 0x54
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7ff faf1 	bl	8005be4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006602:	bf00      	nop
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b088      	sub	sp, #32
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006626:	61fb      	str	r3, [r7, #28]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	61bb      	str	r3, [r7, #24]
 8006632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	6979      	ldr	r1, [r7, #20]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	613b      	str	r3, [r7, #16]
   return(result);
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e6      	bne.n	8006612 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fabd 	bl	8005bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006656:	bf00      	nop
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b096      	sub	sp, #88	; 0x58
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800666c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006674:	2b22      	cmp	r3, #34	; 0x22
 8006676:	f040 8094 	bne.w	80067a2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006680:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006684:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006688:	b2d9      	uxtb	r1, r3
 800668a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800668e:	b2da      	uxtb	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006694:	400a      	ands	r2, r1
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	3b01      	subs	r3, #1
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d179      	bne.n	80067b6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066d6:	653b      	str	r3, [r7, #80]	; 0x50
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e0:	647b      	str	r3, [r7, #68]	; 0x44
 80066e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e6      	bne.n	80066c2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	623b      	str	r3, [r7, #32]
   return(result);
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3308      	adds	r3, #8
 8006712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006714:	633a      	str	r2, [r7, #48]	; 0x30
 8006716:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800671a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e5      	bne.n	80066f4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006738:	2b01      	cmp	r3, #1
 800673a:	d12e      	bne.n	800679a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	64bb      	str	r3, [r7, #72]	; 0x48
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	461a      	mov	r2, r3
 800675e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	69b9      	ldr	r1, [r7, #24]
 8006766:	69fa      	ldr	r2, [r7, #28]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	617b      	str	r3, [r7, #20]
   return(result);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e6      	bne.n	8006742 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f003 0310 	and.w	r3, r3, #16
 800677e:	2b10      	cmp	r3, #16
 8006780:	d103      	bne.n	800678a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2210      	movs	r2, #16
 8006788:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff fa30 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006798:	e00d      	b.n	80067b6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7fb f886 	bl	80018ac <HAL_UART_RxCpltCallback>
}
 80067a0:	e009      	b.n	80067b6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	8b1b      	ldrh	r3, [r3, #24]
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0208 	orr.w	r2, r2, #8
 80067b2:	b292      	uxth	r2, r2
 80067b4:	831a      	strh	r2, [r3, #24]
}
 80067b6:	bf00      	nop
 80067b8:	3758      	adds	r7, #88	; 0x58
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b096      	sub	sp, #88	; 0x58
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d4:	2b22      	cmp	r3, #34	; 0x22
 80067d6:	f040 8094 	bne.w	8006902 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80067ea:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80067ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067f2:	4013      	ands	r3, r2
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	1c9a      	adds	r2, r3, #2
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d179      	bne.n	8006916 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006840:	643b      	str	r3, [r7, #64]	; 0x40
 8006842:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3308      	adds	r3, #8
 800685a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	e853 3f00 	ldrex	r3, [r3]
 8006862:	61fb      	str	r3, [r7, #28]
   return(result);
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f023 0301 	bic.w	r3, r3, #1
 800686a:	64bb      	str	r3, [r7, #72]	; 0x48
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3308      	adds	r3, #8
 8006872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006874:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006876:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800687a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800687c:	e841 2300 	strex	r3, r2, [r1]
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e5      	bne.n	8006854 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2220      	movs	r2, #32
 800688c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006898:	2b01      	cmp	r3, #1
 800689a:	d12e      	bne.n	80068fa <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	e853 3f00 	ldrex	r3, [r3]
 80068ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f023 0310 	bic.w	r3, r3, #16
 80068b6:	647b      	str	r3, [r7, #68]	; 0x44
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068c0:	61bb      	str	r3, [r7, #24]
 80068c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	613b      	str	r3, [r7, #16]
   return(result);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e6      	bne.n	80068a2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f003 0310 	and.w	r3, r3, #16
 80068de:	2b10      	cmp	r3, #16
 80068e0:	d103      	bne.n	80068ea <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2210      	movs	r2, #16
 80068e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff f980 	bl	8005bf8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068f8:	e00d      	b.n	8006916 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7fa ffd6 	bl	80018ac <HAL_UART_RxCpltCallback>
}
 8006900:	e009      	b.n	8006916 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	8b1b      	ldrh	r3, [r3, #24]
 8006908:	b29a      	uxth	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0208 	orr.w	r2, r2, #8
 8006912:	b292      	uxth	r2, r2
 8006914:	831a      	strh	r2, [r3, #24]
}
 8006916:	bf00      	nop
 8006918:	3758      	adds	r7, #88	; 0x58
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <atof>:
 8006932:	2100      	movs	r1, #0
 8006934:	f000 be92 	b.w	800765c <strtod>

08006938 <__errno>:
 8006938:	4b01      	ldr	r3, [pc, #4]	; (8006940 <__errno+0x8>)
 800693a:	6818      	ldr	r0, [r3, #0]
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	20000010 	.word	0x20000010

08006944 <__libc_init_array>:
 8006944:	b570      	push	{r4, r5, r6, lr}
 8006946:	4d0d      	ldr	r5, [pc, #52]	; (800697c <__libc_init_array+0x38>)
 8006948:	4c0d      	ldr	r4, [pc, #52]	; (8006980 <__libc_init_array+0x3c>)
 800694a:	1b64      	subs	r4, r4, r5
 800694c:	10a4      	asrs	r4, r4, #2
 800694e:	2600      	movs	r6, #0
 8006950:	42a6      	cmp	r6, r4
 8006952:	d109      	bne.n	8006968 <__libc_init_array+0x24>
 8006954:	4d0b      	ldr	r5, [pc, #44]	; (8006984 <__libc_init_array+0x40>)
 8006956:	4c0c      	ldr	r4, [pc, #48]	; (8006988 <__libc_init_array+0x44>)
 8006958:	f003 f8b6 	bl	8009ac8 <_init>
 800695c:	1b64      	subs	r4, r4, r5
 800695e:	10a4      	asrs	r4, r4, #2
 8006960:	2600      	movs	r6, #0
 8006962:	42a6      	cmp	r6, r4
 8006964:	d105      	bne.n	8006972 <__libc_init_array+0x2e>
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	f855 3b04 	ldr.w	r3, [r5], #4
 800696c:	4798      	blx	r3
 800696e:	3601      	adds	r6, #1
 8006970:	e7ee      	b.n	8006950 <__libc_init_array+0xc>
 8006972:	f855 3b04 	ldr.w	r3, [r5], #4
 8006976:	4798      	blx	r3
 8006978:	3601      	adds	r6, #1
 800697a:	e7f2      	b.n	8006962 <__libc_init_array+0x1e>
 800697c:	08009fe4 	.word	0x08009fe4
 8006980:	08009fe4 	.word	0x08009fe4
 8006984:	08009fe4 	.word	0x08009fe4
 8006988:	08009fe8 	.word	0x08009fe8

0800698c <__itoa>:
 800698c:	1e93      	subs	r3, r2, #2
 800698e:	2b22      	cmp	r3, #34	; 0x22
 8006990:	b510      	push	{r4, lr}
 8006992:	460c      	mov	r4, r1
 8006994:	d904      	bls.n	80069a0 <__itoa+0x14>
 8006996:	2300      	movs	r3, #0
 8006998:	700b      	strb	r3, [r1, #0]
 800699a:	461c      	mov	r4, r3
 800699c:	4620      	mov	r0, r4
 800699e:	bd10      	pop	{r4, pc}
 80069a0:	2a0a      	cmp	r2, #10
 80069a2:	d109      	bne.n	80069b8 <__itoa+0x2c>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	da07      	bge.n	80069b8 <__itoa+0x2c>
 80069a8:	232d      	movs	r3, #45	; 0x2d
 80069aa:	700b      	strb	r3, [r1, #0]
 80069ac:	4240      	negs	r0, r0
 80069ae:	2101      	movs	r1, #1
 80069b0:	4421      	add	r1, r4
 80069b2:	f000 fe5f 	bl	8007674 <__utoa>
 80069b6:	e7f1      	b.n	800699c <__itoa+0x10>
 80069b8:	2100      	movs	r1, #0
 80069ba:	e7f9      	b.n	80069b0 <__itoa+0x24>

080069bc <itoa>:
 80069bc:	f7ff bfe6 	b.w	800698c <__itoa>

080069c0 <memset>:
 80069c0:	4402      	add	r2, r0
 80069c2:	4603      	mov	r3, r0
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d100      	bne.n	80069ca <memset+0xa>
 80069c8:	4770      	bx	lr
 80069ca:	f803 1b01 	strb.w	r1, [r3], #1
 80069ce:	e7f9      	b.n	80069c4 <memset+0x4>

080069d0 <siprintf>:
 80069d0:	b40e      	push	{r1, r2, r3}
 80069d2:	b500      	push	{lr}
 80069d4:	b09c      	sub	sp, #112	; 0x70
 80069d6:	ab1d      	add	r3, sp, #116	; 0x74
 80069d8:	9002      	str	r0, [sp, #8]
 80069da:	9006      	str	r0, [sp, #24]
 80069dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069e0:	4809      	ldr	r0, [pc, #36]	; (8006a08 <siprintf+0x38>)
 80069e2:	9107      	str	r1, [sp, #28]
 80069e4:	9104      	str	r1, [sp, #16]
 80069e6:	4909      	ldr	r1, [pc, #36]	; (8006a0c <siprintf+0x3c>)
 80069e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ec:	9105      	str	r1, [sp, #20]
 80069ee:	6800      	ldr	r0, [r0, #0]
 80069f0:	9301      	str	r3, [sp, #4]
 80069f2:	a902      	add	r1, sp, #8
 80069f4:	f001 ff90 	bl	8008918 <_svfiprintf_r>
 80069f8:	9b02      	ldr	r3, [sp, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	b01c      	add	sp, #112	; 0x70
 8006a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a04:	b003      	add	sp, #12
 8006a06:	4770      	bx	lr
 8006a08:	20000010 	.word	0x20000010
 8006a0c:	ffff0208 	.word	0xffff0208

08006a10 <sulp>:
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4604      	mov	r4, r0
 8006a14:	460d      	mov	r5, r1
 8006a16:	ec45 4b10 	vmov	d0, r4, r5
 8006a1a:	4616      	mov	r6, r2
 8006a1c:	f001 fd68 	bl	80084f0 <__ulp>
 8006a20:	ec51 0b10 	vmov	r0, r1, d0
 8006a24:	b17e      	cbz	r6, 8006a46 <sulp+0x36>
 8006a26:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dd09      	ble.n	8006a46 <sulp+0x36>
 8006a32:	051b      	lsls	r3, r3, #20
 8006a34:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006a38:	2400      	movs	r4, #0
 8006a3a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	f7f9 fdd9 	bl	80005f8 <__aeabi_dmul>
 8006a46:	bd70      	pop	{r4, r5, r6, pc}

08006a48 <_strtod_l>:
 8006a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a4c:	b0a3      	sub	sp, #140	; 0x8c
 8006a4e:	461f      	mov	r7, r3
 8006a50:	2300      	movs	r3, #0
 8006a52:	931e      	str	r3, [sp, #120]	; 0x78
 8006a54:	4ba4      	ldr	r3, [pc, #656]	; (8006ce8 <_strtod_l+0x2a0>)
 8006a56:	9219      	str	r2, [sp, #100]	; 0x64
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	9307      	str	r3, [sp, #28]
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	4688      	mov	r8, r1
 8006a62:	f7f9 fbb5 	bl	80001d0 <strlen>
 8006a66:	f04f 0a00 	mov.w	sl, #0
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	f04f 0b00 	mov.w	fp, #0
 8006a70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006a74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006a76:	781a      	ldrb	r2, [r3, #0]
 8006a78:	2a2b      	cmp	r2, #43	; 0x2b
 8006a7a:	d04c      	beq.n	8006b16 <_strtod_l+0xce>
 8006a7c:	d839      	bhi.n	8006af2 <_strtod_l+0xaa>
 8006a7e:	2a0d      	cmp	r2, #13
 8006a80:	d832      	bhi.n	8006ae8 <_strtod_l+0xa0>
 8006a82:	2a08      	cmp	r2, #8
 8006a84:	d832      	bhi.n	8006aec <_strtod_l+0xa4>
 8006a86:	2a00      	cmp	r2, #0
 8006a88:	d03c      	beq.n	8006b04 <_strtod_l+0xbc>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	930e      	str	r3, [sp, #56]	; 0x38
 8006a8e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006a90:	7833      	ldrb	r3, [r6, #0]
 8006a92:	2b30      	cmp	r3, #48	; 0x30
 8006a94:	f040 80b4 	bne.w	8006c00 <_strtod_l+0x1b8>
 8006a98:	7873      	ldrb	r3, [r6, #1]
 8006a9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a9e:	2b58      	cmp	r3, #88	; 0x58
 8006aa0:	d16c      	bne.n	8006b7c <_strtod_l+0x134>
 8006aa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	ab1e      	add	r3, sp, #120	; 0x78
 8006aa8:	9702      	str	r7, [sp, #8]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	4a8f      	ldr	r2, [pc, #572]	; (8006cec <_strtod_l+0x2a4>)
 8006aae:	ab1f      	add	r3, sp, #124	; 0x7c
 8006ab0:	a91d      	add	r1, sp, #116	; 0x74
 8006ab2:	4620      	mov	r0, r4
 8006ab4:	f000 fe88 	bl	80077c8 <__gethex>
 8006ab8:	f010 0707 	ands.w	r7, r0, #7
 8006abc:	4605      	mov	r5, r0
 8006abe:	d005      	beq.n	8006acc <_strtod_l+0x84>
 8006ac0:	2f06      	cmp	r7, #6
 8006ac2:	d12a      	bne.n	8006b1a <_strtod_l+0xd2>
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	961d      	str	r6, [sp, #116]	; 0x74
 8006aca:	930e      	str	r3, [sp, #56]	; 0x38
 8006acc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8596 	bne.w	8007600 <_strtod_l+0xbb8>
 8006ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad6:	b1db      	cbz	r3, 8006b10 <_strtod_l+0xc8>
 8006ad8:	4652      	mov	r2, sl
 8006ada:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ade:	ec43 2b10 	vmov	d0, r2, r3
 8006ae2:	b023      	add	sp, #140	; 0x8c
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	2a20      	cmp	r2, #32
 8006aea:	d1ce      	bne.n	8006a8a <_strtod_l+0x42>
 8006aec:	3301      	adds	r3, #1
 8006aee:	931d      	str	r3, [sp, #116]	; 0x74
 8006af0:	e7c0      	b.n	8006a74 <_strtod_l+0x2c>
 8006af2:	2a2d      	cmp	r2, #45	; 0x2d
 8006af4:	d1c9      	bne.n	8006a8a <_strtod_l+0x42>
 8006af6:	2201      	movs	r2, #1
 8006af8:	920e      	str	r2, [sp, #56]	; 0x38
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	921d      	str	r2, [sp, #116]	; 0x74
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1c4      	bne.n	8006a8e <_strtod_l+0x46>
 8006b04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b06:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f040 8576 	bne.w	80075fc <_strtod_l+0xbb4>
 8006b10:	4652      	mov	r2, sl
 8006b12:	465b      	mov	r3, fp
 8006b14:	e7e3      	b.n	8006ade <_strtod_l+0x96>
 8006b16:	2200      	movs	r2, #0
 8006b18:	e7ee      	b.n	8006af8 <_strtod_l+0xb0>
 8006b1a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006b1c:	b13a      	cbz	r2, 8006b2e <_strtod_l+0xe6>
 8006b1e:	2135      	movs	r1, #53	; 0x35
 8006b20:	a820      	add	r0, sp, #128	; 0x80
 8006b22:	f001 fdf0 	bl	8008706 <__copybits>
 8006b26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f001 f9b5 	bl	8007e98 <_Bfree>
 8006b2e:	3f01      	subs	r7, #1
 8006b30:	2f05      	cmp	r7, #5
 8006b32:	d807      	bhi.n	8006b44 <_strtod_l+0xfc>
 8006b34:	e8df f007 	tbb	[pc, r7]
 8006b38:	1d180b0e 	.word	0x1d180b0e
 8006b3c:	030e      	.short	0x030e
 8006b3e:	f04f 0b00 	mov.w	fp, #0
 8006b42:	46da      	mov	sl, fp
 8006b44:	0728      	lsls	r0, r5, #28
 8006b46:	d5c1      	bpl.n	8006acc <_strtod_l+0x84>
 8006b48:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006b4c:	e7be      	b.n	8006acc <_strtod_l+0x84>
 8006b4e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006b52:	e7f7      	b.n	8006b44 <_strtod_l+0xfc>
 8006b54:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006b58:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006b5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b5e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006b62:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006b66:	e7ed      	b.n	8006b44 <_strtod_l+0xfc>
 8006b68:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006cf0 <_strtod_l+0x2a8>
 8006b6c:	f04f 0a00 	mov.w	sl, #0
 8006b70:	e7e8      	b.n	8006b44 <_strtod_l+0xfc>
 8006b72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006b76:	f04f 3aff 	mov.w	sl, #4294967295
 8006b7a:	e7e3      	b.n	8006b44 <_strtod_l+0xfc>
 8006b7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	921d      	str	r2, [sp, #116]	; 0x74
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b30      	cmp	r3, #48	; 0x30
 8006b86:	d0f9      	beq.n	8006b7c <_strtod_l+0x134>
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d09f      	beq.n	8006acc <_strtod_l+0x84>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f04f 0900 	mov.w	r9, #0
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b96:	930a      	str	r3, [sp, #40]	; 0x28
 8006b98:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b9c:	464f      	mov	r7, r9
 8006b9e:	220a      	movs	r2, #10
 8006ba0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8006ba2:	7806      	ldrb	r6, [r0, #0]
 8006ba4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006ba8:	b2d9      	uxtb	r1, r3
 8006baa:	2909      	cmp	r1, #9
 8006bac:	d92a      	bls.n	8006c04 <_strtod_l+0x1bc>
 8006bae:	9907      	ldr	r1, [sp, #28]
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	f002 f95d 	bl	8008e70 <strncmp>
 8006bb6:	b398      	cbz	r0, 8006c20 <_strtod_l+0x1d8>
 8006bb8:	2000      	movs	r0, #0
 8006bba:	4633      	mov	r3, r6
 8006bbc:	463d      	mov	r5, r7
 8006bbe:	9007      	str	r0, [sp, #28]
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	2b65      	cmp	r3, #101	; 0x65
 8006bc4:	d001      	beq.n	8006bca <_strtod_l+0x182>
 8006bc6:	2b45      	cmp	r3, #69	; 0x45
 8006bc8:	d118      	bne.n	8006bfc <_strtod_l+0x1b4>
 8006bca:	b91d      	cbnz	r5, 8006bd4 <_strtod_l+0x18c>
 8006bcc:	9b04      	ldr	r3, [sp, #16]
 8006bce:	4303      	orrs	r3, r0
 8006bd0:	d098      	beq.n	8006b04 <_strtod_l+0xbc>
 8006bd2:	2500      	movs	r5, #0
 8006bd4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006bd8:	f108 0301 	add.w	r3, r8, #1
 8006bdc:	931d      	str	r3, [sp, #116]	; 0x74
 8006bde:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006be2:	2b2b      	cmp	r3, #43	; 0x2b
 8006be4:	d075      	beq.n	8006cd2 <_strtod_l+0x28a>
 8006be6:	2b2d      	cmp	r3, #45	; 0x2d
 8006be8:	d07b      	beq.n	8006ce2 <_strtod_l+0x29a>
 8006bea:	f04f 0c00 	mov.w	ip, #0
 8006bee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006bf2:	2909      	cmp	r1, #9
 8006bf4:	f240 8082 	bls.w	8006cfc <_strtod_l+0x2b4>
 8006bf8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006bfc:	2600      	movs	r6, #0
 8006bfe:	e09d      	b.n	8006d3c <_strtod_l+0x2f4>
 8006c00:	2300      	movs	r3, #0
 8006c02:	e7c4      	b.n	8006b8e <_strtod_l+0x146>
 8006c04:	2f08      	cmp	r7, #8
 8006c06:	bfd8      	it	le
 8006c08:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006c0a:	f100 0001 	add.w	r0, r0, #1
 8006c0e:	bfda      	itte	le
 8006c10:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c14:	9309      	strle	r3, [sp, #36]	; 0x24
 8006c16:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006c1a:	3701      	adds	r7, #1
 8006c1c:	901d      	str	r0, [sp, #116]	; 0x74
 8006c1e:	e7bf      	b.n	8006ba0 <_strtod_l+0x158>
 8006c20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c22:	195a      	adds	r2, r3, r5
 8006c24:	921d      	str	r2, [sp, #116]	; 0x74
 8006c26:	5d5b      	ldrb	r3, [r3, r5]
 8006c28:	2f00      	cmp	r7, #0
 8006c2a:	d037      	beq.n	8006c9c <_strtod_l+0x254>
 8006c2c:	9007      	str	r0, [sp, #28]
 8006c2e:	463d      	mov	r5, r7
 8006c30:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006c34:	2a09      	cmp	r2, #9
 8006c36:	d912      	bls.n	8006c5e <_strtod_l+0x216>
 8006c38:	2201      	movs	r2, #1
 8006c3a:	e7c2      	b.n	8006bc2 <_strtod_l+0x17a>
 8006c3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	921d      	str	r2, [sp, #116]	; 0x74
 8006c42:	785b      	ldrb	r3, [r3, #1]
 8006c44:	3001      	adds	r0, #1
 8006c46:	2b30      	cmp	r3, #48	; 0x30
 8006c48:	d0f8      	beq.n	8006c3c <_strtod_l+0x1f4>
 8006c4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006c4e:	2a08      	cmp	r2, #8
 8006c50:	f200 84db 	bhi.w	800760a <_strtod_l+0xbc2>
 8006c54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006c56:	9007      	str	r0, [sp, #28]
 8006c58:	2000      	movs	r0, #0
 8006c5a:	920a      	str	r2, [sp, #40]	; 0x28
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	3b30      	subs	r3, #48	; 0x30
 8006c60:	f100 0201 	add.w	r2, r0, #1
 8006c64:	d014      	beq.n	8006c90 <_strtod_l+0x248>
 8006c66:	9907      	ldr	r1, [sp, #28]
 8006c68:	4411      	add	r1, r2
 8006c6a:	9107      	str	r1, [sp, #28]
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	eb00 0e05 	add.w	lr, r0, r5
 8006c72:	210a      	movs	r1, #10
 8006c74:	4572      	cmp	r2, lr
 8006c76:	d113      	bne.n	8006ca0 <_strtod_l+0x258>
 8006c78:	182a      	adds	r2, r5, r0
 8006c7a:	2a08      	cmp	r2, #8
 8006c7c:	f105 0501 	add.w	r5, r5, #1
 8006c80:	4405      	add	r5, r0
 8006c82:	dc1c      	bgt.n	8006cbe <_strtod_l+0x276>
 8006c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c86:	220a      	movs	r2, #10
 8006c88:	fb02 3301 	mla	r3, r2, r1, r3
 8006c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8e:	2200      	movs	r2, #0
 8006c90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006c92:	1c59      	adds	r1, r3, #1
 8006c94:	911d      	str	r1, [sp, #116]	; 0x74
 8006c96:	785b      	ldrb	r3, [r3, #1]
 8006c98:	4610      	mov	r0, r2
 8006c9a:	e7c9      	b.n	8006c30 <_strtod_l+0x1e8>
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	e7d2      	b.n	8006c46 <_strtod_l+0x1fe>
 8006ca0:	2a08      	cmp	r2, #8
 8006ca2:	dc04      	bgt.n	8006cae <_strtod_l+0x266>
 8006ca4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ca6:	434e      	muls	r6, r1
 8006ca8:	9609      	str	r6, [sp, #36]	; 0x24
 8006caa:	3201      	adds	r2, #1
 8006cac:	e7e2      	b.n	8006c74 <_strtod_l+0x22c>
 8006cae:	f102 0c01 	add.w	ip, r2, #1
 8006cb2:	f1bc 0f10 	cmp.w	ip, #16
 8006cb6:	bfd8      	it	le
 8006cb8:	fb01 f909 	mulle.w	r9, r1, r9
 8006cbc:	e7f5      	b.n	8006caa <_strtod_l+0x262>
 8006cbe:	2d10      	cmp	r5, #16
 8006cc0:	bfdc      	itt	le
 8006cc2:	220a      	movle	r2, #10
 8006cc4:	fb02 3909 	mlale	r9, r2, r9, r3
 8006cc8:	e7e1      	b.n	8006c8e <_strtod_l+0x246>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	e77c      	b.n	8006bcc <_strtod_l+0x184>
 8006cd2:	f04f 0c00 	mov.w	ip, #0
 8006cd6:	f108 0302 	add.w	r3, r8, #2
 8006cda:	931d      	str	r3, [sp, #116]	; 0x74
 8006cdc:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006ce0:	e785      	b.n	8006bee <_strtod_l+0x1a6>
 8006ce2:	f04f 0c01 	mov.w	ip, #1
 8006ce6:	e7f6      	b.n	8006cd6 <_strtod_l+0x28e>
 8006ce8:	08009c80 	.word	0x08009c80
 8006cec:	08009b8c 	.word	0x08009b8c
 8006cf0:	7ff00000 	.word	0x7ff00000
 8006cf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006cf6:	1c59      	adds	r1, r3, #1
 8006cf8:	911d      	str	r1, [sp, #116]	; 0x74
 8006cfa:	785b      	ldrb	r3, [r3, #1]
 8006cfc:	2b30      	cmp	r3, #48	; 0x30
 8006cfe:	d0f9      	beq.n	8006cf4 <_strtod_l+0x2ac>
 8006d00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8006d04:	2908      	cmp	r1, #8
 8006d06:	f63f af79 	bhi.w	8006bfc <_strtod_l+0x1b4>
 8006d0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006d0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d10:	9308      	str	r3, [sp, #32]
 8006d12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	911d      	str	r1, [sp, #116]	; 0x74
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006d1e:	2e09      	cmp	r6, #9
 8006d20:	d937      	bls.n	8006d92 <_strtod_l+0x34a>
 8006d22:	9e08      	ldr	r6, [sp, #32]
 8006d24:	1b89      	subs	r1, r1, r6
 8006d26:	2908      	cmp	r1, #8
 8006d28:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006d2c:	dc02      	bgt.n	8006d34 <_strtod_l+0x2ec>
 8006d2e:	4576      	cmp	r6, lr
 8006d30:	bfa8      	it	ge
 8006d32:	4676      	movge	r6, lr
 8006d34:	f1bc 0f00 	cmp.w	ip, #0
 8006d38:	d000      	beq.n	8006d3c <_strtod_l+0x2f4>
 8006d3a:	4276      	negs	r6, r6
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	d14f      	bne.n	8006de0 <_strtod_l+0x398>
 8006d40:	9904      	ldr	r1, [sp, #16]
 8006d42:	4301      	orrs	r1, r0
 8006d44:	f47f aec2 	bne.w	8006acc <_strtod_l+0x84>
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	f47f aedb 	bne.w	8006b04 <_strtod_l+0xbc>
 8006d4e:	2b69      	cmp	r3, #105	; 0x69
 8006d50:	d027      	beq.n	8006da2 <_strtod_l+0x35a>
 8006d52:	dc24      	bgt.n	8006d9e <_strtod_l+0x356>
 8006d54:	2b49      	cmp	r3, #73	; 0x49
 8006d56:	d024      	beq.n	8006da2 <_strtod_l+0x35a>
 8006d58:	2b4e      	cmp	r3, #78	; 0x4e
 8006d5a:	f47f aed3 	bne.w	8006b04 <_strtod_l+0xbc>
 8006d5e:	499e      	ldr	r1, [pc, #632]	; (8006fd8 <_strtod_l+0x590>)
 8006d60:	a81d      	add	r0, sp, #116	; 0x74
 8006d62:	f000 ff89 	bl	8007c78 <__match>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	f43f aecc 	beq.w	8006b04 <_strtod_l+0xbc>
 8006d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b28      	cmp	r3, #40	; 0x28
 8006d72:	d12d      	bne.n	8006dd0 <_strtod_l+0x388>
 8006d74:	4999      	ldr	r1, [pc, #612]	; (8006fdc <_strtod_l+0x594>)
 8006d76:	aa20      	add	r2, sp, #128	; 0x80
 8006d78:	a81d      	add	r0, sp, #116	; 0x74
 8006d7a:	f000 ff91 	bl	8007ca0 <__hexnan>
 8006d7e:	2805      	cmp	r0, #5
 8006d80:	d126      	bne.n	8006dd0 <_strtod_l+0x388>
 8006d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006d88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d90:	e69c      	b.n	8006acc <_strtod_l+0x84>
 8006d92:	210a      	movs	r1, #10
 8006d94:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006d98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d9c:	e7b9      	b.n	8006d12 <_strtod_l+0x2ca>
 8006d9e:	2b6e      	cmp	r3, #110	; 0x6e
 8006da0:	e7db      	b.n	8006d5a <_strtod_l+0x312>
 8006da2:	498f      	ldr	r1, [pc, #572]	; (8006fe0 <_strtod_l+0x598>)
 8006da4:	a81d      	add	r0, sp, #116	; 0x74
 8006da6:	f000 ff67 	bl	8007c78 <__match>
 8006daa:	2800      	cmp	r0, #0
 8006dac:	f43f aeaa 	beq.w	8006b04 <_strtod_l+0xbc>
 8006db0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006db2:	498c      	ldr	r1, [pc, #560]	; (8006fe4 <_strtod_l+0x59c>)
 8006db4:	3b01      	subs	r3, #1
 8006db6:	a81d      	add	r0, sp, #116	; 0x74
 8006db8:	931d      	str	r3, [sp, #116]	; 0x74
 8006dba:	f000 ff5d 	bl	8007c78 <__match>
 8006dbe:	b910      	cbnz	r0, 8006dc6 <_strtod_l+0x37e>
 8006dc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	931d      	str	r3, [sp, #116]	; 0x74
 8006dc6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006ff4 <_strtod_l+0x5ac>
 8006dca:	f04f 0a00 	mov.w	sl, #0
 8006dce:	e67d      	b.n	8006acc <_strtod_l+0x84>
 8006dd0:	4885      	ldr	r0, [pc, #532]	; (8006fe8 <_strtod_l+0x5a0>)
 8006dd2:	f002 f835 	bl	8008e40 <nan>
 8006dd6:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006dda:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006dde:	e675      	b.n	8006acc <_strtod_l+0x84>
 8006de0:	9b07      	ldr	r3, [sp, #28]
 8006de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de4:	1af3      	subs	r3, r6, r3
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	bf08      	it	eq
 8006dea:	462f      	moveq	r7, r5
 8006dec:	2d10      	cmp	r5, #16
 8006dee:	9308      	str	r3, [sp, #32]
 8006df0:	46a8      	mov	r8, r5
 8006df2:	bfa8      	it	ge
 8006df4:	f04f 0810 	movge.w	r8, #16
 8006df8:	f7f9 fb84 	bl	8000504 <__aeabi_ui2d>
 8006dfc:	2d09      	cmp	r5, #9
 8006dfe:	4682      	mov	sl, r0
 8006e00:	468b      	mov	fp, r1
 8006e02:	dd13      	ble.n	8006e2c <_strtod_l+0x3e4>
 8006e04:	4b79      	ldr	r3, [pc, #484]	; (8006fec <_strtod_l+0x5a4>)
 8006e06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006e0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e0e:	f7f9 fbf3 	bl	80005f8 <__aeabi_dmul>
 8006e12:	4682      	mov	sl, r0
 8006e14:	4648      	mov	r0, r9
 8006e16:	468b      	mov	fp, r1
 8006e18:	f7f9 fb74 	bl	8000504 <__aeabi_ui2d>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4650      	mov	r0, sl
 8006e22:	4659      	mov	r1, fp
 8006e24:	f7f9 fa32 	bl	800028c <__adddf3>
 8006e28:	4682      	mov	sl, r0
 8006e2a:	468b      	mov	fp, r1
 8006e2c:	2d0f      	cmp	r5, #15
 8006e2e:	dc38      	bgt.n	8006ea2 <_strtod_l+0x45a>
 8006e30:	9b08      	ldr	r3, [sp, #32]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f43f ae4a 	beq.w	8006acc <_strtod_l+0x84>
 8006e38:	dd24      	ble.n	8006e84 <_strtod_l+0x43c>
 8006e3a:	2b16      	cmp	r3, #22
 8006e3c:	dc0b      	bgt.n	8006e56 <_strtod_l+0x40e>
 8006e3e:	4d6b      	ldr	r5, [pc, #428]	; (8006fec <_strtod_l+0x5a4>)
 8006e40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8006e44:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e48:	4652      	mov	r2, sl
 8006e4a:	465b      	mov	r3, fp
 8006e4c:	f7f9 fbd4 	bl	80005f8 <__aeabi_dmul>
 8006e50:	4682      	mov	sl, r0
 8006e52:	468b      	mov	fp, r1
 8006e54:	e63a      	b.n	8006acc <_strtod_l+0x84>
 8006e56:	9a08      	ldr	r2, [sp, #32]
 8006e58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	db20      	blt.n	8006ea2 <_strtod_l+0x45a>
 8006e60:	4c62      	ldr	r4, [pc, #392]	; (8006fec <_strtod_l+0x5a4>)
 8006e62:	f1c5 050f 	rsb	r5, r5, #15
 8006e66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	465b      	mov	r3, fp
 8006e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e72:	f7f9 fbc1 	bl	80005f8 <__aeabi_dmul>
 8006e76:	9b08      	ldr	r3, [sp, #32]
 8006e78:	1b5d      	subs	r5, r3, r5
 8006e7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006e7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006e82:	e7e3      	b.n	8006e4c <_strtod_l+0x404>
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	3316      	adds	r3, #22
 8006e88:	db0b      	blt.n	8006ea2 <_strtod_l+0x45a>
 8006e8a:	9b07      	ldr	r3, [sp, #28]
 8006e8c:	4a57      	ldr	r2, [pc, #348]	; (8006fec <_strtod_l+0x5a4>)
 8006e8e:	1b9e      	subs	r6, r3, r6
 8006e90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8006e94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e98:	4650      	mov	r0, sl
 8006e9a:	4659      	mov	r1, fp
 8006e9c:	f7f9 fcd6 	bl	800084c <__aeabi_ddiv>
 8006ea0:	e7d6      	b.n	8006e50 <_strtod_l+0x408>
 8006ea2:	9b08      	ldr	r3, [sp, #32]
 8006ea4:	eba5 0808 	sub.w	r8, r5, r8
 8006ea8:	4498      	add	r8, r3
 8006eaa:	f1b8 0f00 	cmp.w	r8, #0
 8006eae:	dd71      	ble.n	8006f94 <_strtod_l+0x54c>
 8006eb0:	f018 030f 	ands.w	r3, r8, #15
 8006eb4:	d00a      	beq.n	8006ecc <_strtod_l+0x484>
 8006eb6:	494d      	ldr	r1, [pc, #308]	; (8006fec <_strtod_l+0x5a4>)
 8006eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	465b      	mov	r3, fp
 8006ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	4682      	mov	sl, r0
 8006eca:	468b      	mov	fp, r1
 8006ecc:	f038 080f 	bics.w	r8, r8, #15
 8006ed0:	d04d      	beq.n	8006f6e <_strtod_l+0x526>
 8006ed2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006ed6:	dd22      	ble.n	8006f1e <_strtod_l+0x4d6>
 8006ed8:	2500      	movs	r5, #0
 8006eda:	462e      	mov	r6, r5
 8006edc:	9509      	str	r5, [sp, #36]	; 0x24
 8006ede:	9507      	str	r5, [sp, #28]
 8006ee0:	2322      	movs	r3, #34	; 0x22
 8006ee2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006ff4 <_strtod_l+0x5ac>
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	f04f 0a00 	mov.w	sl, #0
 8006eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f43f adec 	beq.w	8006acc <_strtod_l+0x84>
 8006ef4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 ffce 	bl	8007e98 <_Bfree>
 8006efc:	9907      	ldr	r1, [sp, #28]
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 ffca 	bl	8007e98 <_Bfree>
 8006f04:	4631      	mov	r1, r6
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 ffc6 	bl	8007e98 <_Bfree>
 8006f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 ffc2 	bl	8007e98 <_Bfree>
 8006f14:	4629      	mov	r1, r5
 8006f16:	4620      	mov	r0, r4
 8006f18:	f000 ffbe 	bl	8007e98 <_Bfree>
 8006f1c:	e5d6      	b.n	8006acc <_strtod_l+0x84>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006f24:	4650      	mov	r0, sl
 8006f26:	4659      	mov	r1, fp
 8006f28:	4699      	mov	r9, r3
 8006f2a:	f1b8 0f01 	cmp.w	r8, #1
 8006f2e:	dc21      	bgt.n	8006f74 <_strtod_l+0x52c>
 8006f30:	b10b      	cbz	r3, 8006f36 <_strtod_l+0x4ee>
 8006f32:	4682      	mov	sl, r0
 8006f34:	468b      	mov	fp, r1
 8006f36:	4b2e      	ldr	r3, [pc, #184]	; (8006ff0 <_strtod_l+0x5a8>)
 8006f38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006f3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006f40:	4652      	mov	r2, sl
 8006f42:	465b      	mov	r3, fp
 8006f44:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006f48:	f7f9 fb56 	bl	80005f8 <__aeabi_dmul>
 8006f4c:	4b29      	ldr	r3, [pc, #164]	; (8006ff4 <_strtod_l+0x5ac>)
 8006f4e:	460a      	mov	r2, r1
 8006f50:	400b      	ands	r3, r1
 8006f52:	4929      	ldr	r1, [pc, #164]	; (8006ff8 <_strtod_l+0x5b0>)
 8006f54:	428b      	cmp	r3, r1
 8006f56:	4682      	mov	sl, r0
 8006f58:	d8be      	bhi.n	8006ed8 <_strtod_l+0x490>
 8006f5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006f5e:	428b      	cmp	r3, r1
 8006f60:	bf86      	itte	hi
 8006f62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006ffc <_strtod_l+0x5b4>
 8006f66:	f04f 3aff 	movhi.w	sl, #4294967295
 8006f6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	e081      	b.n	8007078 <_strtod_l+0x630>
 8006f74:	f018 0f01 	tst.w	r8, #1
 8006f78:	d007      	beq.n	8006f8a <_strtod_l+0x542>
 8006f7a:	4b1d      	ldr	r3, [pc, #116]	; (8006ff0 <_strtod_l+0x5a8>)
 8006f7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	f7f9 fb38 	bl	80005f8 <__aeabi_dmul>
 8006f88:	2301      	movs	r3, #1
 8006f8a:	f109 0901 	add.w	r9, r9, #1
 8006f8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f92:	e7ca      	b.n	8006f2a <_strtod_l+0x4e2>
 8006f94:	d0eb      	beq.n	8006f6e <_strtod_l+0x526>
 8006f96:	f1c8 0800 	rsb	r8, r8, #0
 8006f9a:	f018 020f 	ands.w	r2, r8, #15
 8006f9e:	d00a      	beq.n	8006fb6 <_strtod_l+0x56e>
 8006fa0:	4b12      	ldr	r3, [pc, #72]	; (8006fec <_strtod_l+0x5a4>)
 8006fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	4659      	mov	r1, fp
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 fc4d 	bl	800084c <__aeabi_ddiv>
 8006fb2:	4682      	mov	sl, r0
 8006fb4:	468b      	mov	fp, r1
 8006fb6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006fba:	d0d8      	beq.n	8006f6e <_strtod_l+0x526>
 8006fbc:	f1b8 0f1f 	cmp.w	r8, #31
 8006fc0:	dd1e      	ble.n	8007000 <_strtod_l+0x5b8>
 8006fc2:	2500      	movs	r5, #0
 8006fc4:	462e      	mov	r6, r5
 8006fc6:	9509      	str	r5, [sp, #36]	; 0x24
 8006fc8:	9507      	str	r5, [sp, #28]
 8006fca:	2322      	movs	r3, #34	; 0x22
 8006fcc:	f04f 0a00 	mov.w	sl, #0
 8006fd0:	f04f 0b00 	mov.w	fp, #0
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	e789      	b.n	8006eec <_strtod_l+0x4a4>
 8006fd8:	08009b89 	.word	0x08009b89
 8006fdc:	08009ba0 	.word	0x08009ba0
 8006fe0:	08009b80 	.word	0x08009b80
 8006fe4:	08009b83 	.word	0x08009b83
 8006fe8:	08009e7a 	.word	0x08009e7a
 8006fec:	08009d38 	.word	0x08009d38
 8006ff0:	08009d10 	.word	0x08009d10
 8006ff4:	7ff00000 	.word	0x7ff00000
 8006ff8:	7ca00000 	.word	0x7ca00000
 8006ffc:	7fefffff 	.word	0x7fefffff
 8007000:	f018 0310 	ands.w	r3, r8, #16
 8007004:	bf18      	it	ne
 8007006:	236a      	movne	r3, #106	; 0x6a
 8007008:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80073c0 <_strtod_l+0x978>
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	4650      	mov	r0, sl
 8007010:	4659      	mov	r1, fp
 8007012:	2300      	movs	r3, #0
 8007014:	f018 0f01 	tst.w	r8, #1
 8007018:	d004      	beq.n	8007024 <_strtod_l+0x5dc>
 800701a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800701e:	f7f9 faeb 	bl	80005f8 <__aeabi_dmul>
 8007022:	2301      	movs	r3, #1
 8007024:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007028:	f109 0908 	add.w	r9, r9, #8
 800702c:	d1f2      	bne.n	8007014 <_strtod_l+0x5cc>
 800702e:	b10b      	cbz	r3, 8007034 <_strtod_l+0x5ec>
 8007030:	4682      	mov	sl, r0
 8007032:	468b      	mov	fp, r1
 8007034:	9b04      	ldr	r3, [sp, #16]
 8007036:	b1bb      	cbz	r3, 8007068 <_strtod_l+0x620>
 8007038:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800703c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007040:	2b00      	cmp	r3, #0
 8007042:	4659      	mov	r1, fp
 8007044:	dd10      	ble.n	8007068 <_strtod_l+0x620>
 8007046:	2b1f      	cmp	r3, #31
 8007048:	f340 8128 	ble.w	800729c <_strtod_l+0x854>
 800704c:	2b34      	cmp	r3, #52	; 0x34
 800704e:	bfde      	ittt	le
 8007050:	3b20      	suble	r3, #32
 8007052:	f04f 32ff 	movle.w	r2, #4294967295
 8007056:	fa02 f303 	lslle.w	r3, r2, r3
 800705a:	f04f 0a00 	mov.w	sl, #0
 800705e:	bfcc      	ite	gt
 8007060:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007064:	ea03 0b01 	andle.w	fp, r3, r1
 8007068:	2200      	movs	r2, #0
 800706a:	2300      	movs	r3, #0
 800706c:	4650      	mov	r0, sl
 800706e:	4659      	mov	r1, fp
 8007070:	f7f9 fd2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007074:	2800      	cmp	r0, #0
 8007076:	d1a4      	bne.n	8006fc2 <_strtod_l+0x57a>
 8007078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800707e:	462b      	mov	r3, r5
 8007080:	463a      	mov	r2, r7
 8007082:	4620      	mov	r0, r4
 8007084:	f000 ff74 	bl	8007f70 <__s2b>
 8007088:	9009      	str	r0, [sp, #36]	; 0x24
 800708a:	2800      	cmp	r0, #0
 800708c:	f43f af24 	beq.w	8006ed8 <_strtod_l+0x490>
 8007090:	9b07      	ldr	r3, [sp, #28]
 8007092:	1b9e      	subs	r6, r3, r6
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfb4      	ite	lt
 800709a:	4633      	movlt	r3, r6
 800709c:	2300      	movge	r3, #0
 800709e:	9310      	str	r3, [sp, #64]	; 0x40
 80070a0:	9b08      	ldr	r3, [sp, #32]
 80070a2:	2500      	movs	r5, #0
 80070a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80070a8:	9318      	str	r3, [sp, #96]	; 0x60
 80070aa:	462e      	mov	r6, r5
 80070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ae:	4620      	mov	r0, r4
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	f000 feb1 	bl	8007e18 <_Balloc>
 80070b6:	9007      	str	r0, [sp, #28]
 80070b8:	2800      	cmp	r0, #0
 80070ba:	f43f af11 	beq.w	8006ee0 <_strtod_l+0x498>
 80070be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c0:	691a      	ldr	r2, [r3, #16]
 80070c2:	3202      	adds	r2, #2
 80070c4:	f103 010c 	add.w	r1, r3, #12
 80070c8:	0092      	lsls	r2, r2, #2
 80070ca:	300c      	adds	r0, #12
 80070cc:	f000 fe96 	bl	8007dfc <memcpy>
 80070d0:	ec4b ab10 	vmov	d0, sl, fp
 80070d4:	aa20      	add	r2, sp, #128	; 0x80
 80070d6:	a91f      	add	r1, sp, #124	; 0x7c
 80070d8:	4620      	mov	r0, r4
 80070da:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80070de:	f001 fa83 	bl	80085e8 <__d2b>
 80070e2:	901e      	str	r0, [sp, #120]	; 0x78
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f43f aefb 	beq.w	8006ee0 <_strtod_l+0x498>
 80070ea:	2101      	movs	r1, #1
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 ffd9 	bl	80080a4 <__i2b>
 80070f2:	4606      	mov	r6, r0
 80070f4:	2800      	cmp	r0, #0
 80070f6:	f43f aef3 	beq.w	8006ee0 <_strtod_l+0x498>
 80070fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80070fc:	9904      	ldr	r1, [sp, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	bfab      	itete	ge
 8007102:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007104:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007106:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007108:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800710c:	bfac      	ite	ge
 800710e:	eb03 0902 	addge.w	r9, r3, r2
 8007112:	1ad7      	sublt	r7, r2, r3
 8007114:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007116:	eba3 0801 	sub.w	r8, r3, r1
 800711a:	4490      	add	r8, r2
 800711c:	4ba3      	ldr	r3, [pc, #652]	; (80073ac <_strtod_l+0x964>)
 800711e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007122:	4598      	cmp	r8, r3
 8007124:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007128:	f280 80cc 	bge.w	80072c4 <_strtod_l+0x87c>
 800712c:	eba3 0308 	sub.w	r3, r3, r8
 8007130:	2b1f      	cmp	r3, #31
 8007132:	eba2 0203 	sub.w	r2, r2, r3
 8007136:	f04f 0101 	mov.w	r1, #1
 800713a:	f300 80b6 	bgt.w	80072aa <_strtod_l+0x862>
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	9311      	str	r3, [sp, #68]	; 0x44
 8007144:	2300      	movs	r3, #0
 8007146:	930c      	str	r3, [sp, #48]	; 0x30
 8007148:	eb09 0802 	add.w	r8, r9, r2
 800714c:	9b04      	ldr	r3, [sp, #16]
 800714e:	45c1      	cmp	r9, r8
 8007150:	4417      	add	r7, r2
 8007152:	441f      	add	r7, r3
 8007154:	464b      	mov	r3, r9
 8007156:	bfa8      	it	ge
 8007158:	4643      	movge	r3, r8
 800715a:	42bb      	cmp	r3, r7
 800715c:	bfa8      	it	ge
 800715e:	463b      	movge	r3, r7
 8007160:	2b00      	cmp	r3, #0
 8007162:	bfc2      	ittt	gt
 8007164:	eba8 0803 	subgt.w	r8, r8, r3
 8007168:	1aff      	subgt	r7, r7, r3
 800716a:	eba9 0903 	subgt.w	r9, r9, r3
 800716e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	dd17      	ble.n	80071a4 <_strtod_l+0x75c>
 8007174:	4631      	mov	r1, r6
 8007176:	461a      	mov	r2, r3
 8007178:	4620      	mov	r0, r4
 800717a:	f001 f84f 	bl	800821c <__pow5mult>
 800717e:	4606      	mov	r6, r0
 8007180:	2800      	cmp	r0, #0
 8007182:	f43f aead 	beq.w	8006ee0 <_strtod_l+0x498>
 8007186:	4601      	mov	r1, r0
 8007188:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800718a:	4620      	mov	r0, r4
 800718c:	f000 ffa0 	bl	80080d0 <__multiply>
 8007190:	900f      	str	r0, [sp, #60]	; 0x3c
 8007192:	2800      	cmp	r0, #0
 8007194:	f43f aea4 	beq.w	8006ee0 <_strtod_l+0x498>
 8007198:	991e      	ldr	r1, [sp, #120]	; 0x78
 800719a:	4620      	mov	r0, r4
 800719c:	f000 fe7c 	bl	8007e98 <_Bfree>
 80071a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071a2:	931e      	str	r3, [sp, #120]	; 0x78
 80071a4:	f1b8 0f00 	cmp.w	r8, #0
 80071a8:	f300 8091 	bgt.w	80072ce <_strtod_l+0x886>
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd08      	ble.n	80071c4 <_strtod_l+0x77c>
 80071b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071b4:	9907      	ldr	r1, [sp, #28]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f001 f830 	bl	800821c <__pow5mult>
 80071bc:	9007      	str	r0, [sp, #28]
 80071be:	2800      	cmp	r0, #0
 80071c0:	f43f ae8e 	beq.w	8006ee0 <_strtod_l+0x498>
 80071c4:	2f00      	cmp	r7, #0
 80071c6:	dd08      	ble.n	80071da <_strtod_l+0x792>
 80071c8:	9907      	ldr	r1, [sp, #28]
 80071ca:	463a      	mov	r2, r7
 80071cc:	4620      	mov	r0, r4
 80071ce:	f001 f87f 	bl	80082d0 <__lshift>
 80071d2:	9007      	str	r0, [sp, #28]
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f43f ae83 	beq.w	8006ee0 <_strtod_l+0x498>
 80071da:	f1b9 0f00 	cmp.w	r9, #0
 80071de:	dd08      	ble.n	80071f2 <_strtod_l+0x7aa>
 80071e0:	4631      	mov	r1, r6
 80071e2:	464a      	mov	r2, r9
 80071e4:	4620      	mov	r0, r4
 80071e6:	f001 f873 	bl	80082d0 <__lshift>
 80071ea:	4606      	mov	r6, r0
 80071ec:	2800      	cmp	r0, #0
 80071ee:	f43f ae77 	beq.w	8006ee0 <_strtod_l+0x498>
 80071f2:	9a07      	ldr	r2, [sp, #28]
 80071f4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80071f6:	4620      	mov	r0, r4
 80071f8:	f001 f8f2 	bl	80083e0 <__mdiff>
 80071fc:	4605      	mov	r5, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f ae6e 	beq.w	8006ee0 <_strtod_l+0x498>
 8007204:	68c3      	ldr	r3, [r0, #12]
 8007206:	930f      	str	r3, [sp, #60]	; 0x3c
 8007208:	2300      	movs	r3, #0
 800720a:	60c3      	str	r3, [r0, #12]
 800720c:	4631      	mov	r1, r6
 800720e:	f001 f8cb 	bl	80083a8 <__mcmp>
 8007212:	2800      	cmp	r0, #0
 8007214:	da65      	bge.n	80072e2 <_strtod_l+0x89a>
 8007216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007218:	ea53 030a 	orrs.w	r3, r3, sl
 800721c:	f040 8087 	bne.w	800732e <_strtod_l+0x8e6>
 8007220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 8082 	bne.w	800732e <_strtod_l+0x8e6>
 800722a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800722e:	0d1b      	lsrs	r3, r3, #20
 8007230:	051b      	lsls	r3, r3, #20
 8007232:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007236:	d97a      	bls.n	800732e <_strtod_l+0x8e6>
 8007238:	696b      	ldr	r3, [r5, #20]
 800723a:	b913      	cbnz	r3, 8007242 <_strtod_l+0x7fa>
 800723c:	692b      	ldr	r3, [r5, #16]
 800723e:	2b01      	cmp	r3, #1
 8007240:	dd75      	ble.n	800732e <_strtod_l+0x8e6>
 8007242:	4629      	mov	r1, r5
 8007244:	2201      	movs	r2, #1
 8007246:	4620      	mov	r0, r4
 8007248:	f001 f842 	bl	80082d0 <__lshift>
 800724c:	4631      	mov	r1, r6
 800724e:	4605      	mov	r5, r0
 8007250:	f001 f8aa 	bl	80083a8 <__mcmp>
 8007254:	2800      	cmp	r0, #0
 8007256:	dd6a      	ble.n	800732e <_strtod_l+0x8e6>
 8007258:	9904      	ldr	r1, [sp, #16]
 800725a:	4a55      	ldr	r2, [pc, #340]	; (80073b0 <_strtod_l+0x968>)
 800725c:	465b      	mov	r3, fp
 800725e:	2900      	cmp	r1, #0
 8007260:	f000 8085 	beq.w	800736e <_strtod_l+0x926>
 8007264:	ea02 010b 	and.w	r1, r2, fp
 8007268:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800726c:	dc7f      	bgt.n	800736e <_strtod_l+0x926>
 800726e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007272:	f77f aeaa 	ble.w	8006fca <_strtod_l+0x582>
 8007276:	4a4f      	ldr	r2, [pc, #316]	; (80073b4 <_strtod_l+0x96c>)
 8007278:	2300      	movs	r3, #0
 800727a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800727e:	4650      	mov	r0, sl
 8007280:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007284:	4659      	mov	r1, fp
 8007286:	f7f9 f9b7 	bl	80005f8 <__aeabi_dmul>
 800728a:	460b      	mov	r3, r1
 800728c:	4303      	orrs	r3, r0
 800728e:	bf08      	it	eq
 8007290:	2322      	moveq	r3, #34	; 0x22
 8007292:	4682      	mov	sl, r0
 8007294:	468b      	mov	fp, r1
 8007296:	bf08      	it	eq
 8007298:	6023      	streq	r3, [r4, #0]
 800729a:	e62b      	b.n	8006ef4 <_strtod_l+0x4ac>
 800729c:	f04f 32ff 	mov.w	r2, #4294967295
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	ea03 0a0a 	and.w	sl, r3, sl
 80072a8:	e6de      	b.n	8007068 <_strtod_l+0x620>
 80072aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80072ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80072b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80072b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80072ba:	fa01 f308 	lsl.w	r3, r1, r8
 80072be:	930c      	str	r3, [sp, #48]	; 0x30
 80072c0:	9111      	str	r1, [sp, #68]	; 0x44
 80072c2:	e741      	b.n	8007148 <_strtod_l+0x700>
 80072c4:	2300      	movs	r3, #0
 80072c6:	930c      	str	r3, [sp, #48]	; 0x30
 80072c8:	2301      	movs	r3, #1
 80072ca:	9311      	str	r3, [sp, #68]	; 0x44
 80072cc:	e73c      	b.n	8007148 <_strtod_l+0x700>
 80072ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80072d0:	4642      	mov	r2, r8
 80072d2:	4620      	mov	r0, r4
 80072d4:	f000 fffc 	bl	80082d0 <__lshift>
 80072d8:	901e      	str	r0, [sp, #120]	; 0x78
 80072da:	2800      	cmp	r0, #0
 80072dc:	f47f af66 	bne.w	80071ac <_strtod_l+0x764>
 80072e0:	e5fe      	b.n	8006ee0 <_strtod_l+0x498>
 80072e2:	465f      	mov	r7, fp
 80072e4:	d16e      	bne.n	80073c4 <_strtod_l+0x97c>
 80072e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80072e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072ec:	b342      	cbz	r2, 8007340 <_strtod_l+0x8f8>
 80072ee:	4a32      	ldr	r2, [pc, #200]	; (80073b8 <_strtod_l+0x970>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d128      	bne.n	8007346 <_strtod_l+0x8fe>
 80072f4:	9b04      	ldr	r3, [sp, #16]
 80072f6:	4650      	mov	r0, sl
 80072f8:	b1eb      	cbz	r3, 8007336 <_strtod_l+0x8ee>
 80072fa:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <_strtod_l+0x968>)
 80072fc:	403a      	ands	r2, r7
 80072fe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007302:	f04f 31ff 	mov.w	r1, #4294967295
 8007306:	d819      	bhi.n	800733c <_strtod_l+0x8f4>
 8007308:	0d12      	lsrs	r2, r2, #20
 800730a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800730e:	fa01 f303 	lsl.w	r3, r1, r3
 8007312:	4298      	cmp	r0, r3
 8007314:	d117      	bne.n	8007346 <_strtod_l+0x8fe>
 8007316:	4b29      	ldr	r3, [pc, #164]	; (80073bc <_strtod_l+0x974>)
 8007318:	429f      	cmp	r7, r3
 800731a:	d102      	bne.n	8007322 <_strtod_l+0x8da>
 800731c:	3001      	adds	r0, #1
 800731e:	f43f addf 	beq.w	8006ee0 <_strtod_l+0x498>
 8007322:	4b23      	ldr	r3, [pc, #140]	; (80073b0 <_strtod_l+0x968>)
 8007324:	403b      	ands	r3, r7
 8007326:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800732a:	f04f 0a00 	mov.w	sl, #0
 800732e:	9b04      	ldr	r3, [sp, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1a0      	bne.n	8007276 <_strtod_l+0x82e>
 8007334:	e5de      	b.n	8006ef4 <_strtod_l+0x4ac>
 8007336:	f04f 33ff 	mov.w	r3, #4294967295
 800733a:	e7ea      	b.n	8007312 <_strtod_l+0x8ca>
 800733c:	460b      	mov	r3, r1
 800733e:	e7e8      	b.n	8007312 <_strtod_l+0x8ca>
 8007340:	ea53 030a 	orrs.w	r3, r3, sl
 8007344:	d088      	beq.n	8007258 <_strtod_l+0x810>
 8007346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007348:	b1db      	cbz	r3, 8007382 <_strtod_l+0x93a>
 800734a:	423b      	tst	r3, r7
 800734c:	d0ef      	beq.n	800732e <_strtod_l+0x8e6>
 800734e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007350:	9a04      	ldr	r2, [sp, #16]
 8007352:	4650      	mov	r0, sl
 8007354:	4659      	mov	r1, fp
 8007356:	b1c3      	cbz	r3, 800738a <_strtod_l+0x942>
 8007358:	f7ff fb5a 	bl	8006a10 <sulp>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007364:	f7f8 ff92 	bl	800028c <__adddf3>
 8007368:	4682      	mov	sl, r0
 800736a:	468b      	mov	fp, r1
 800736c:	e7df      	b.n	800732e <_strtod_l+0x8e6>
 800736e:	4013      	ands	r3, r2
 8007370:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007374:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007378:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800737c:	f04f 3aff 	mov.w	sl, #4294967295
 8007380:	e7d5      	b.n	800732e <_strtod_l+0x8e6>
 8007382:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007384:	ea13 0f0a 	tst.w	r3, sl
 8007388:	e7e0      	b.n	800734c <_strtod_l+0x904>
 800738a:	f7ff fb41 	bl	8006a10 <sulp>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007396:	f7f8 ff77 	bl	8000288 <__aeabi_dsub>
 800739a:	2200      	movs	r2, #0
 800739c:	2300      	movs	r3, #0
 800739e:	4682      	mov	sl, r0
 80073a0:	468b      	mov	fp, r1
 80073a2:	f7f9 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d0c1      	beq.n	800732e <_strtod_l+0x8e6>
 80073aa:	e60e      	b.n	8006fca <_strtod_l+0x582>
 80073ac:	fffffc02 	.word	0xfffffc02
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	39500000 	.word	0x39500000
 80073b8:	000fffff 	.word	0x000fffff
 80073bc:	7fefffff 	.word	0x7fefffff
 80073c0:	08009bb8 	.word	0x08009bb8
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	f001 f96a 	bl	80086a0 <__ratio>
 80073cc:	ec59 8b10 	vmov	r8, r9, d0
 80073d0:	ee10 0a10 	vmov	r0, s0
 80073d4:	2200      	movs	r2, #0
 80073d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80073da:	4649      	mov	r1, r9
 80073dc:	f7f9 fb88 	bl	8000af0 <__aeabi_dcmple>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d07c      	beq.n	80074de <_strtod_l+0xa96>
 80073e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d04c      	beq.n	8007484 <_strtod_l+0xa3c>
 80073ea:	4b95      	ldr	r3, [pc, #596]	; (8007640 <_strtod_l+0xbf8>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80073f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007640 <_strtod_l+0xbf8>
 80073f6:	f04f 0800 	mov.w	r8, #0
 80073fa:	4b92      	ldr	r3, [pc, #584]	; (8007644 <_strtod_l+0xbfc>)
 80073fc:	403b      	ands	r3, r7
 80073fe:	9311      	str	r3, [sp, #68]	; 0x44
 8007400:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007402:	4b91      	ldr	r3, [pc, #580]	; (8007648 <_strtod_l+0xc00>)
 8007404:	429a      	cmp	r2, r3
 8007406:	f040 80b2 	bne.w	800756e <_strtod_l+0xb26>
 800740a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800740e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007412:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007416:	ec4b ab10 	vmov	d0, sl, fp
 800741a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800741e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007422:	f001 f865 	bl	80084f0 <__ulp>
 8007426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800742a:	ec53 2b10 	vmov	r2, r3, d0
 800742e:	f7f9 f8e3 	bl	80005f8 <__aeabi_dmul>
 8007432:	4652      	mov	r2, sl
 8007434:	465b      	mov	r3, fp
 8007436:	f7f8 ff29 	bl	800028c <__adddf3>
 800743a:	460b      	mov	r3, r1
 800743c:	4981      	ldr	r1, [pc, #516]	; (8007644 <_strtod_l+0xbfc>)
 800743e:	4a83      	ldr	r2, [pc, #524]	; (800764c <_strtod_l+0xc04>)
 8007440:	4019      	ands	r1, r3
 8007442:	4291      	cmp	r1, r2
 8007444:	4682      	mov	sl, r0
 8007446:	d95e      	bls.n	8007506 <_strtod_l+0xabe>
 8007448:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800744a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800744e:	4293      	cmp	r3, r2
 8007450:	d103      	bne.n	800745a <_strtod_l+0xa12>
 8007452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007454:	3301      	adds	r3, #1
 8007456:	f43f ad43 	beq.w	8006ee0 <_strtod_l+0x498>
 800745a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007658 <_strtod_l+0xc10>
 800745e:	f04f 3aff 	mov.w	sl, #4294967295
 8007462:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fd17 	bl	8007e98 <_Bfree>
 800746a:	9907      	ldr	r1, [sp, #28]
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fd13 	bl	8007e98 <_Bfree>
 8007472:	4631      	mov	r1, r6
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fd0f 	bl	8007e98 <_Bfree>
 800747a:	4629      	mov	r1, r5
 800747c:	4620      	mov	r0, r4
 800747e:	f000 fd0b 	bl	8007e98 <_Bfree>
 8007482:	e613      	b.n	80070ac <_strtod_l+0x664>
 8007484:	f1ba 0f00 	cmp.w	sl, #0
 8007488:	d11b      	bne.n	80074c2 <_strtod_l+0xa7a>
 800748a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800748e:	b9f3      	cbnz	r3, 80074ce <_strtod_l+0xa86>
 8007490:	4b6b      	ldr	r3, [pc, #428]	; (8007640 <_strtod_l+0xbf8>)
 8007492:	2200      	movs	r2, #0
 8007494:	4640      	mov	r0, r8
 8007496:	4649      	mov	r1, r9
 8007498:	f7f9 fb20 	bl	8000adc <__aeabi_dcmplt>
 800749c:	b9d0      	cbnz	r0, 80074d4 <_strtod_l+0xa8c>
 800749e:	4640      	mov	r0, r8
 80074a0:	4649      	mov	r1, r9
 80074a2:	4b6b      	ldr	r3, [pc, #428]	; (8007650 <_strtod_l+0xc08>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	f7f9 f8a7 	bl	80005f8 <__aeabi_dmul>
 80074aa:	4680      	mov	r8, r0
 80074ac:	4689      	mov	r9, r1
 80074ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80074b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80074b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80074bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80074c0:	e79b      	b.n	80073fa <_strtod_l+0x9b2>
 80074c2:	f1ba 0f01 	cmp.w	sl, #1
 80074c6:	d102      	bne.n	80074ce <_strtod_l+0xa86>
 80074c8:	2f00      	cmp	r7, #0
 80074ca:	f43f ad7e 	beq.w	8006fca <_strtod_l+0x582>
 80074ce:	4b61      	ldr	r3, [pc, #388]	; (8007654 <_strtod_l+0xc0c>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	e78c      	b.n	80073ee <_strtod_l+0x9a6>
 80074d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007650 <_strtod_l+0xc08>
 80074d8:	f04f 0800 	mov.w	r8, #0
 80074dc:	e7e7      	b.n	80074ae <_strtod_l+0xa66>
 80074de:	4b5c      	ldr	r3, [pc, #368]	; (8007650 <_strtod_l+0xc08>)
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	2200      	movs	r2, #0
 80074e6:	f7f9 f887 	bl	80005f8 <__aeabi_dmul>
 80074ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074ec:	4680      	mov	r8, r0
 80074ee:	4689      	mov	r9, r1
 80074f0:	b933      	cbnz	r3, 8007500 <_strtod_l+0xab8>
 80074f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074f6:	9012      	str	r0, [sp, #72]	; 0x48
 80074f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80074fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80074fe:	e7dd      	b.n	80074bc <_strtod_l+0xa74>
 8007500:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007504:	e7f9      	b.n	80074fa <_strtod_l+0xab2>
 8007506:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800750a:	9b04      	ldr	r3, [sp, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1a8      	bne.n	8007462 <_strtod_l+0xa1a>
 8007510:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007514:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007516:	0d1b      	lsrs	r3, r3, #20
 8007518:	051b      	lsls	r3, r3, #20
 800751a:	429a      	cmp	r2, r3
 800751c:	d1a1      	bne.n	8007462 <_strtod_l+0xa1a>
 800751e:	4640      	mov	r0, r8
 8007520:	4649      	mov	r1, r9
 8007522:	f7f9 fb8b 	bl	8000c3c <__aeabi_d2lz>
 8007526:	f7f9 f839 	bl	800059c <__aeabi_l2d>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f8 fea9 	bl	8000288 <__aeabi_dsub>
 8007536:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007538:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800753c:	ea43 030a 	orr.w	r3, r3, sl
 8007540:	4313      	orrs	r3, r2
 8007542:	4680      	mov	r8, r0
 8007544:	4689      	mov	r9, r1
 8007546:	d053      	beq.n	80075f0 <_strtod_l+0xba8>
 8007548:	a335      	add	r3, pc, #212	; (adr r3, 8007620 <_strtod_l+0xbd8>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f9 fac5 	bl	8000adc <__aeabi_dcmplt>
 8007552:	2800      	cmp	r0, #0
 8007554:	f47f acce 	bne.w	8006ef4 <_strtod_l+0x4ac>
 8007558:	a333      	add	r3, pc, #204	; (adr r3, 8007628 <_strtod_l+0xbe0>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	4640      	mov	r0, r8
 8007560:	4649      	mov	r1, r9
 8007562:	f7f9 fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8007566:	2800      	cmp	r0, #0
 8007568:	f43f af7b 	beq.w	8007462 <_strtod_l+0xa1a>
 800756c:	e4c2      	b.n	8006ef4 <_strtod_l+0x4ac>
 800756e:	9b04      	ldr	r3, [sp, #16]
 8007570:	b333      	cbz	r3, 80075c0 <_strtod_l+0xb78>
 8007572:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007574:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007578:	d822      	bhi.n	80075c0 <_strtod_l+0xb78>
 800757a:	a32d      	add	r3, pc, #180	; (adr r3, 8007630 <_strtod_l+0xbe8>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	4640      	mov	r0, r8
 8007582:	4649      	mov	r1, r9
 8007584:	f7f9 fab4 	bl	8000af0 <__aeabi_dcmple>
 8007588:	b1a0      	cbz	r0, 80075b4 <_strtod_l+0xb6c>
 800758a:	4649      	mov	r1, r9
 800758c:	4640      	mov	r0, r8
 800758e:	f7f9 facd 	bl	8000b2c <__aeabi_d2uiz>
 8007592:	2801      	cmp	r0, #1
 8007594:	bf38      	it	cc
 8007596:	2001      	movcc	r0, #1
 8007598:	f7f8 ffb4 	bl	8000504 <__aeabi_ui2d>
 800759c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800759e:	4680      	mov	r8, r0
 80075a0:	4689      	mov	r9, r1
 80075a2:	bb13      	cbnz	r3, 80075ea <_strtod_l+0xba2>
 80075a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075a8:	9014      	str	r0, [sp, #80]	; 0x50
 80075aa:	9315      	str	r3, [sp, #84]	; 0x54
 80075ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80075b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80075b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80075b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80075bc:	1a9b      	subs	r3, r3, r2
 80075be:	930d      	str	r3, [sp, #52]	; 0x34
 80075c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80075c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80075cc:	f000 ff90 	bl	80084f0 <__ulp>
 80075d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075d4:	ec53 2b10 	vmov	r2, r3, d0
 80075d8:	f7f9 f80e 	bl	80005f8 <__aeabi_dmul>
 80075dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075e0:	f7f8 fe54 	bl	800028c <__adddf3>
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	e78f      	b.n	800750a <_strtod_l+0xac2>
 80075ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80075ee:	e7dd      	b.n	80075ac <_strtod_l+0xb64>
 80075f0:	a311      	add	r3, pc, #68	; (adr r3, 8007638 <_strtod_l+0xbf0>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f9 fa71 	bl	8000adc <__aeabi_dcmplt>
 80075fa:	e7b4      	b.n	8007566 <_strtod_l+0xb1e>
 80075fc:	2300      	movs	r3, #0
 80075fe:	930e      	str	r3, [sp, #56]	; 0x38
 8007600:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007602:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	f7ff ba65 	b.w	8006ad4 <_strtod_l+0x8c>
 800760a:	2b65      	cmp	r3, #101	; 0x65
 800760c:	f43f ab5d 	beq.w	8006cca <_strtod_l+0x282>
 8007610:	2b45      	cmp	r3, #69	; 0x45
 8007612:	f43f ab5a 	beq.w	8006cca <_strtod_l+0x282>
 8007616:	2201      	movs	r2, #1
 8007618:	f7ff bb92 	b.w	8006d40 <_strtod_l+0x2f8>
 800761c:	f3af 8000 	nop.w
 8007620:	94a03595 	.word	0x94a03595
 8007624:	3fdfffff 	.word	0x3fdfffff
 8007628:	35afe535 	.word	0x35afe535
 800762c:	3fe00000 	.word	0x3fe00000
 8007630:	ffc00000 	.word	0xffc00000
 8007634:	41dfffff 	.word	0x41dfffff
 8007638:	94a03595 	.word	0x94a03595
 800763c:	3fcfffff 	.word	0x3fcfffff
 8007640:	3ff00000 	.word	0x3ff00000
 8007644:	7ff00000 	.word	0x7ff00000
 8007648:	7fe00000 	.word	0x7fe00000
 800764c:	7c9fffff 	.word	0x7c9fffff
 8007650:	3fe00000 	.word	0x3fe00000
 8007654:	bff00000 	.word	0xbff00000
 8007658:	7fefffff 	.word	0x7fefffff

0800765c <strtod>:
 800765c:	460a      	mov	r2, r1
 800765e:	4601      	mov	r1, r0
 8007660:	4802      	ldr	r0, [pc, #8]	; (800766c <strtod+0x10>)
 8007662:	4b03      	ldr	r3, [pc, #12]	; (8007670 <strtod+0x14>)
 8007664:	6800      	ldr	r0, [r0, #0]
 8007666:	f7ff b9ef 	b.w	8006a48 <_strtod_l>
 800766a:	bf00      	nop
 800766c:	20000010 	.word	0x20000010
 8007670:	20000078 	.word	0x20000078

08007674 <__utoa>:
 8007674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007676:	4c1f      	ldr	r4, [pc, #124]	; (80076f4 <__utoa+0x80>)
 8007678:	b08b      	sub	sp, #44	; 0x2c
 800767a:	4605      	mov	r5, r0
 800767c:	460b      	mov	r3, r1
 800767e:	466e      	mov	r6, sp
 8007680:	f104 0c20 	add.w	ip, r4, #32
 8007684:	6820      	ldr	r0, [r4, #0]
 8007686:	6861      	ldr	r1, [r4, #4]
 8007688:	4637      	mov	r7, r6
 800768a:	c703      	stmia	r7!, {r0, r1}
 800768c:	3408      	adds	r4, #8
 800768e:	4564      	cmp	r4, ip
 8007690:	463e      	mov	r6, r7
 8007692:	d1f7      	bne.n	8007684 <__utoa+0x10>
 8007694:	7921      	ldrb	r1, [r4, #4]
 8007696:	7139      	strb	r1, [r7, #4]
 8007698:	1e91      	subs	r1, r2, #2
 800769a:	6820      	ldr	r0, [r4, #0]
 800769c:	6038      	str	r0, [r7, #0]
 800769e:	2922      	cmp	r1, #34	; 0x22
 80076a0:	f04f 0100 	mov.w	r1, #0
 80076a4:	d904      	bls.n	80076b0 <__utoa+0x3c>
 80076a6:	7019      	strb	r1, [r3, #0]
 80076a8:	460b      	mov	r3, r1
 80076aa:	4618      	mov	r0, r3
 80076ac:	b00b      	add	sp, #44	; 0x2c
 80076ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076b0:	1e58      	subs	r0, r3, #1
 80076b2:	4684      	mov	ip, r0
 80076b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80076b8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80076bc:	fb02 5617 	mls	r6, r2, r7, r5
 80076c0:	4476      	add	r6, lr
 80076c2:	460c      	mov	r4, r1
 80076c4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80076c8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80076cc:	462e      	mov	r6, r5
 80076ce:	42b2      	cmp	r2, r6
 80076d0:	f101 0101 	add.w	r1, r1, #1
 80076d4:	463d      	mov	r5, r7
 80076d6:	d9ed      	bls.n	80076b4 <__utoa+0x40>
 80076d8:	2200      	movs	r2, #0
 80076da:	545a      	strb	r2, [r3, r1]
 80076dc:	1919      	adds	r1, r3, r4
 80076de:	1aa5      	subs	r5, r4, r2
 80076e0:	42aa      	cmp	r2, r5
 80076e2:	dae2      	bge.n	80076aa <__utoa+0x36>
 80076e4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80076e8:	780e      	ldrb	r6, [r1, #0]
 80076ea:	7006      	strb	r6, [r0, #0]
 80076ec:	3201      	adds	r2, #1
 80076ee:	f801 5901 	strb.w	r5, [r1], #-1
 80076f2:	e7f4      	b.n	80076de <__utoa+0x6a>
 80076f4:	08009be0 	.word	0x08009be0

080076f8 <rshift>:
 80076f8:	6903      	ldr	r3, [r0, #16]
 80076fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80076fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007702:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007706:	f100 0414 	add.w	r4, r0, #20
 800770a:	dd45      	ble.n	8007798 <rshift+0xa0>
 800770c:	f011 011f 	ands.w	r1, r1, #31
 8007710:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007714:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007718:	d10c      	bne.n	8007734 <rshift+0x3c>
 800771a:	f100 0710 	add.w	r7, r0, #16
 800771e:	4629      	mov	r1, r5
 8007720:	42b1      	cmp	r1, r6
 8007722:	d334      	bcc.n	800778e <rshift+0x96>
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	1eea      	subs	r2, r5, #3
 800772a:	4296      	cmp	r6, r2
 800772c:	bf38      	it	cc
 800772e:	2300      	movcc	r3, #0
 8007730:	4423      	add	r3, r4
 8007732:	e015      	b.n	8007760 <rshift+0x68>
 8007734:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007738:	f1c1 0820 	rsb	r8, r1, #32
 800773c:	40cf      	lsrs	r7, r1
 800773e:	f105 0e04 	add.w	lr, r5, #4
 8007742:	46a1      	mov	r9, r4
 8007744:	4576      	cmp	r6, lr
 8007746:	46f4      	mov	ip, lr
 8007748:	d815      	bhi.n	8007776 <rshift+0x7e>
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	009a      	lsls	r2, r3, #2
 800774e:	3a04      	subs	r2, #4
 8007750:	3501      	adds	r5, #1
 8007752:	42ae      	cmp	r6, r5
 8007754:	bf38      	it	cc
 8007756:	2200      	movcc	r2, #0
 8007758:	18a3      	adds	r3, r4, r2
 800775a:	50a7      	str	r7, [r4, r2]
 800775c:	b107      	cbz	r7, 8007760 <rshift+0x68>
 800775e:	3304      	adds	r3, #4
 8007760:	1b1a      	subs	r2, r3, r4
 8007762:	42a3      	cmp	r3, r4
 8007764:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007768:	bf08      	it	eq
 800776a:	2300      	moveq	r3, #0
 800776c:	6102      	str	r2, [r0, #16]
 800776e:	bf08      	it	eq
 8007770:	6143      	streq	r3, [r0, #20]
 8007772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007776:	f8dc c000 	ldr.w	ip, [ip]
 800777a:	fa0c fc08 	lsl.w	ip, ip, r8
 800777e:	ea4c 0707 	orr.w	r7, ip, r7
 8007782:	f849 7b04 	str.w	r7, [r9], #4
 8007786:	f85e 7b04 	ldr.w	r7, [lr], #4
 800778a:	40cf      	lsrs	r7, r1
 800778c:	e7da      	b.n	8007744 <rshift+0x4c>
 800778e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007792:	f847 cf04 	str.w	ip, [r7, #4]!
 8007796:	e7c3      	b.n	8007720 <rshift+0x28>
 8007798:	4623      	mov	r3, r4
 800779a:	e7e1      	b.n	8007760 <rshift+0x68>

0800779c <__hexdig_fun>:
 800779c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80077a0:	2b09      	cmp	r3, #9
 80077a2:	d802      	bhi.n	80077aa <__hexdig_fun+0xe>
 80077a4:	3820      	subs	r0, #32
 80077a6:	b2c0      	uxtb	r0, r0
 80077a8:	4770      	bx	lr
 80077aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d801      	bhi.n	80077b6 <__hexdig_fun+0x1a>
 80077b2:	3847      	subs	r0, #71	; 0x47
 80077b4:	e7f7      	b.n	80077a6 <__hexdig_fun+0xa>
 80077b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d801      	bhi.n	80077c2 <__hexdig_fun+0x26>
 80077be:	3827      	subs	r0, #39	; 0x27
 80077c0:	e7f1      	b.n	80077a6 <__hexdig_fun+0xa>
 80077c2:	2000      	movs	r0, #0
 80077c4:	4770      	bx	lr
	...

080077c8 <__gethex>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	ed2d 8b02 	vpush	{d8}
 80077d0:	b089      	sub	sp, #36	; 0x24
 80077d2:	ee08 0a10 	vmov	s16, r0
 80077d6:	9304      	str	r3, [sp, #16]
 80077d8:	4bbc      	ldr	r3, [pc, #752]	; (8007acc <__gethex+0x304>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	4618      	mov	r0, r3
 80077e0:	468b      	mov	fp, r1
 80077e2:	4690      	mov	r8, r2
 80077e4:	f7f8 fcf4 	bl	80001d0 <strlen>
 80077e8:	9b01      	ldr	r3, [sp, #4]
 80077ea:	f8db 2000 	ldr.w	r2, [fp]
 80077ee:	4403      	add	r3, r0
 80077f0:	4682      	mov	sl, r0
 80077f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80077f6:	9305      	str	r3, [sp, #20]
 80077f8:	1c93      	adds	r3, r2, #2
 80077fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80077fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007802:	32fe      	adds	r2, #254	; 0xfe
 8007804:	18d1      	adds	r1, r2, r3
 8007806:	461f      	mov	r7, r3
 8007808:	f813 0b01 	ldrb.w	r0, [r3], #1
 800780c:	9100      	str	r1, [sp, #0]
 800780e:	2830      	cmp	r0, #48	; 0x30
 8007810:	d0f8      	beq.n	8007804 <__gethex+0x3c>
 8007812:	f7ff ffc3 	bl	800779c <__hexdig_fun>
 8007816:	4604      	mov	r4, r0
 8007818:	2800      	cmp	r0, #0
 800781a:	d13a      	bne.n	8007892 <__gethex+0xca>
 800781c:	9901      	ldr	r1, [sp, #4]
 800781e:	4652      	mov	r2, sl
 8007820:	4638      	mov	r0, r7
 8007822:	f001 fb25 	bl	8008e70 <strncmp>
 8007826:	4605      	mov	r5, r0
 8007828:	2800      	cmp	r0, #0
 800782a:	d168      	bne.n	80078fe <__gethex+0x136>
 800782c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007830:	eb07 060a 	add.w	r6, r7, sl
 8007834:	f7ff ffb2 	bl	800779c <__hexdig_fun>
 8007838:	2800      	cmp	r0, #0
 800783a:	d062      	beq.n	8007902 <__gethex+0x13a>
 800783c:	4633      	mov	r3, r6
 800783e:	7818      	ldrb	r0, [r3, #0]
 8007840:	2830      	cmp	r0, #48	; 0x30
 8007842:	461f      	mov	r7, r3
 8007844:	f103 0301 	add.w	r3, r3, #1
 8007848:	d0f9      	beq.n	800783e <__gethex+0x76>
 800784a:	f7ff ffa7 	bl	800779c <__hexdig_fun>
 800784e:	2301      	movs	r3, #1
 8007850:	fab0 f480 	clz	r4, r0
 8007854:	0964      	lsrs	r4, r4, #5
 8007856:	4635      	mov	r5, r6
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	463a      	mov	r2, r7
 800785c:	4616      	mov	r6, r2
 800785e:	3201      	adds	r2, #1
 8007860:	7830      	ldrb	r0, [r6, #0]
 8007862:	f7ff ff9b 	bl	800779c <__hexdig_fun>
 8007866:	2800      	cmp	r0, #0
 8007868:	d1f8      	bne.n	800785c <__gethex+0x94>
 800786a:	9901      	ldr	r1, [sp, #4]
 800786c:	4652      	mov	r2, sl
 800786e:	4630      	mov	r0, r6
 8007870:	f001 fafe 	bl	8008e70 <strncmp>
 8007874:	b980      	cbnz	r0, 8007898 <__gethex+0xd0>
 8007876:	b94d      	cbnz	r5, 800788c <__gethex+0xc4>
 8007878:	eb06 050a 	add.w	r5, r6, sl
 800787c:	462a      	mov	r2, r5
 800787e:	4616      	mov	r6, r2
 8007880:	3201      	adds	r2, #1
 8007882:	7830      	ldrb	r0, [r6, #0]
 8007884:	f7ff ff8a 	bl	800779c <__hexdig_fun>
 8007888:	2800      	cmp	r0, #0
 800788a:	d1f8      	bne.n	800787e <__gethex+0xb6>
 800788c:	1bad      	subs	r5, r5, r6
 800788e:	00ad      	lsls	r5, r5, #2
 8007890:	e004      	b.n	800789c <__gethex+0xd4>
 8007892:	2400      	movs	r4, #0
 8007894:	4625      	mov	r5, r4
 8007896:	e7e0      	b.n	800785a <__gethex+0x92>
 8007898:	2d00      	cmp	r5, #0
 800789a:	d1f7      	bne.n	800788c <__gethex+0xc4>
 800789c:	7833      	ldrb	r3, [r6, #0]
 800789e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80078a2:	2b50      	cmp	r3, #80	; 0x50
 80078a4:	d13b      	bne.n	800791e <__gethex+0x156>
 80078a6:	7873      	ldrb	r3, [r6, #1]
 80078a8:	2b2b      	cmp	r3, #43	; 0x2b
 80078aa:	d02c      	beq.n	8007906 <__gethex+0x13e>
 80078ac:	2b2d      	cmp	r3, #45	; 0x2d
 80078ae:	d02e      	beq.n	800790e <__gethex+0x146>
 80078b0:	1c71      	adds	r1, r6, #1
 80078b2:	f04f 0900 	mov.w	r9, #0
 80078b6:	7808      	ldrb	r0, [r1, #0]
 80078b8:	f7ff ff70 	bl	800779c <__hexdig_fun>
 80078bc:	1e43      	subs	r3, r0, #1
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	2b18      	cmp	r3, #24
 80078c2:	d82c      	bhi.n	800791e <__gethex+0x156>
 80078c4:	f1a0 0210 	sub.w	r2, r0, #16
 80078c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078cc:	f7ff ff66 	bl	800779c <__hexdig_fun>
 80078d0:	1e43      	subs	r3, r0, #1
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b18      	cmp	r3, #24
 80078d6:	d91d      	bls.n	8007914 <__gethex+0x14c>
 80078d8:	f1b9 0f00 	cmp.w	r9, #0
 80078dc:	d000      	beq.n	80078e0 <__gethex+0x118>
 80078de:	4252      	negs	r2, r2
 80078e0:	4415      	add	r5, r2
 80078e2:	f8cb 1000 	str.w	r1, [fp]
 80078e6:	b1e4      	cbz	r4, 8007922 <__gethex+0x15a>
 80078e8:	9b00      	ldr	r3, [sp, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	bf14      	ite	ne
 80078ee:	2700      	movne	r7, #0
 80078f0:	2706      	moveq	r7, #6
 80078f2:	4638      	mov	r0, r7
 80078f4:	b009      	add	sp, #36	; 0x24
 80078f6:	ecbd 8b02 	vpop	{d8}
 80078fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fe:	463e      	mov	r6, r7
 8007900:	4625      	mov	r5, r4
 8007902:	2401      	movs	r4, #1
 8007904:	e7ca      	b.n	800789c <__gethex+0xd4>
 8007906:	f04f 0900 	mov.w	r9, #0
 800790a:	1cb1      	adds	r1, r6, #2
 800790c:	e7d3      	b.n	80078b6 <__gethex+0xee>
 800790e:	f04f 0901 	mov.w	r9, #1
 8007912:	e7fa      	b.n	800790a <__gethex+0x142>
 8007914:	230a      	movs	r3, #10
 8007916:	fb03 0202 	mla	r2, r3, r2, r0
 800791a:	3a10      	subs	r2, #16
 800791c:	e7d4      	b.n	80078c8 <__gethex+0x100>
 800791e:	4631      	mov	r1, r6
 8007920:	e7df      	b.n	80078e2 <__gethex+0x11a>
 8007922:	1bf3      	subs	r3, r6, r7
 8007924:	3b01      	subs	r3, #1
 8007926:	4621      	mov	r1, r4
 8007928:	2b07      	cmp	r3, #7
 800792a:	dc0b      	bgt.n	8007944 <__gethex+0x17c>
 800792c:	ee18 0a10 	vmov	r0, s16
 8007930:	f000 fa72 	bl	8007e18 <_Balloc>
 8007934:	4604      	mov	r4, r0
 8007936:	b940      	cbnz	r0, 800794a <__gethex+0x182>
 8007938:	4b65      	ldr	r3, [pc, #404]	; (8007ad0 <__gethex+0x308>)
 800793a:	4602      	mov	r2, r0
 800793c:	21de      	movs	r1, #222	; 0xde
 800793e:	4865      	ldr	r0, [pc, #404]	; (8007ad4 <__gethex+0x30c>)
 8007940:	f001 fab6 	bl	8008eb0 <__assert_func>
 8007944:	3101      	adds	r1, #1
 8007946:	105b      	asrs	r3, r3, #1
 8007948:	e7ee      	b.n	8007928 <__gethex+0x160>
 800794a:	f100 0914 	add.w	r9, r0, #20
 800794e:	f04f 0b00 	mov.w	fp, #0
 8007952:	f1ca 0301 	rsb	r3, sl, #1
 8007956:	f8cd 9008 	str.w	r9, [sp, #8]
 800795a:	f8cd b000 	str.w	fp, [sp]
 800795e:	9306      	str	r3, [sp, #24]
 8007960:	42b7      	cmp	r7, r6
 8007962:	d340      	bcc.n	80079e6 <__gethex+0x21e>
 8007964:	9802      	ldr	r0, [sp, #8]
 8007966:	9b00      	ldr	r3, [sp, #0]
 8007968:	f840 3b04 	str.w	r3, [r0], #4
 800796c:	eba0 0009 	sub.w	r0, r0, r9
 8007970:	1080      	asrs	r0, r0, #2
 8007972:	0146      	lsls	r6, r0, #5
 8007974:	6120      	str	r0, [r4, #16]
 8007976:	4618      	mov	r0, r3
 8007978:	f000 fb44 	bl	8008004 <__hi0bits>
 800797c:	1a30      	subs	r0, r6, r0
 800797e:	f8d8 6000 	ldr.w	r6, [r8]
 8007982:	42b0      	cmp	r0, r6
 8007984:	dd63      	ble.n	8007a4e <__gethex+0x286>
 8007986:	1b87      	subs	r7, r0, r6
 8007988:	4639      	mov	r1, r7
 800798a:	4620      	mov	r0, r4
 800798c:	f000 fede 	bl	800874c <__any_on>
 8007990:	4682      	mov	sl, r0
 8007992:	b1a8      	cbz	r0, 80079c0 <__gethex+0x1f8>
 8007994:	1e7b      	subs	r3, r7, #1
 8007996:	1159      	asrs	r1, r3, #5
 8007998:	f003 021f 	and.w	r2, r3, #31
 800799c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80079a0:	f04f 0a01 	mov.w	sl, #1
 80079a4:	fa0a f202 	lsl.w	r2, sl, r2
 80079a8:	420a      	tst	r2, r1
 80079aa:	d009      	beq.n	80079c0 <__gethex+0x1f8>
 80079ac:	4553      	cmp	r3, sl
 80079ae:	dd05      	ble.n	80079bc <__gethex+0x1f4>
 80079b0:	1eb9      	subs	r1, r7, #2
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 feca 	bl	800874c <__any_on>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d145      	bne.n	8007a48 <__gethex+0x280>
 80079bc:	f04f 0a02 	mov.w	sl, #2
 80079c0:	4639      	mov	r1, r7
 80079c2:	4620      	mov	r0, r4
 80079c4:	f7ff fe98 	bl	80076f8 <rshift>
 80079c8:	443d      	add	r5, r7
 80079ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079ce:	42ab      	cmp	r3, r5
 80079d0:	da4c      	bge.n	8007a6c <__gethex+0x2a4>
 80079d2:	ee18 0a10 	vmov	r0, s16
 80079d6:	4621      	mov	r1, r4
 80079d8:	f000 fa5e 	bl	8007e98 <_Bfree>
 80079dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80079de:	2300      	movs	r3, #0
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	27a3      	movs	r7, #163	; 0xa3
 80079e4:	e785      	b.n	80078f2 <__gethex+0x12a>
 80079e6:	1e73      	subs	r3, r6, #1
 80079e8:	9a05      	ldr	r2, [sp, #20]
 80079ea:	9303      	str	r3, [sp, #12]
 80079ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d019      	beq.n	8007a28 <__gethex+0x260>
 80079f4:	f1bb 0f20 	cmp.w	fp, #32
 80079f8:	d107      	bne.n	8007a0a <__gethex+0x242>
 80079fa:	9b02      	ldr	r3, [sp, #8]
 80079fc:	9a00      	ldr	r2, [sp, #0]
 80079fe:	f843 2b04 	str.w	r2, [r3], #4
 8007a02:	9302      	str	r3, [sp, #8]
 8007a04:	2300      	movs	r3, #0
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	469b      	mov	fp, r3
 8007a0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007a0e:	f7ff fec5 	bl	800779c <__hexdig_fun>
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	f000 000f 	and.w	r0, r0, #15
 8007a18:	fa00 f00b 	lsl.w	r0, r0, fp
 8007a1c:	4303      	orrs	r3, r0
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	f10b 0b04 	add.w	fp, fp, #4
 8007a24:	9b03      	ldr	r3, [sp, #12]
 8007a26:	e00d      	b.n	8007a44 <__gethex+0x27c>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	9a06      	ldr	r2, [sp, #24]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	d3e0      	bcc.n	80079f4 <__gethex+0x22c>
 8007a32:	4618      	mov	r0, r3
 8007a34:	9901      	ldr	r1, [sp, #4]
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	4652      	mov	r2, sl
 8007a3a:	f001 fa19 	bl	8008e70 <strncmp>
 8007a3e:	9b07      	ldr	r3, [sp, #28]
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d1d7      	bne.n	80079f4 <__gethex+0x22c>
 8007a44:	461e      	mov	r6, r3
 8007a46:	e78b      	b.n	8007960 <__gethex+0x198>
 8007a48:	f04f 0a03 	mov.w	sl, #3
 8007a4c:	e7b8      	b.n	80079c0 <__gethex+0x1f8>
 8007a4e:	da0a      	bge.n	8007a66 <__gethex+0x29e>
 8007a50:	1a37      	subs	r7, r6, r0
 8007a52:	4621      	mov	r1, r4
 8007a54:	ee18 0a10 	vmov	r0, s16
 8007a58:	463a      	mov	r2, r7
 8007a5a:	f000 fc39 	bl	80082d0 <__lshift>
 8007a5e:	1bed      	subs	r5, r5, r7
 8007a60:	4604      	mov	r4, r0
 8007a62:	f100 0914 	add.w	r9, r0, #20
 8007a66:	f04f 0a00 	mov.w	sl, #0
 8007a6a:	e7ae      	b.n	80079ca <__gethex+0x202>
 8007a6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007a70:	42a8      	cmp	r0, r5
 8007a72:	dd72      	ble.n	8007b5a <__gethex+0x392>
 8007a74:	1b45      	subs	r5, r0, r5
 8007a76:	42ae      	cmp	r6, r5
 8007a78:	dc36      	bgt.n	8007ae8 <__gethex+0x320>
 8007a7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d02a      	beq.n	8007ad8 <__gethex+0x310>
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d02c      	beq.n	8007ae0 <__gethex+0x318>
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d115      	bne.n	8007ab6 <__gethex+0x2ee>
 8007a8a:	42ae      	cmp	r6, r5
 8007a8c:	d113      	bne.n	8007ab6 <__gethex+0x2ee>
 8007a8e:	2e01      	cmp	r6, #1
 8007a90:	d10b      	bne.n	8007aaa <__gethex+0x2e2>
 8007a92:	9a04      	ldr	r2, [sp, #16]
 8007a94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	f8c9 3000 	str.w	r3, [r9]
 8007aa2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007aa4:	2762      	movs	r7, #98	; 0x62
 8007aa6:	601c      	str	r4, [r3, #0]
 8007aa8:	e723      	b.n	80078f2 <__gethex+0x12a>
 8007aaa:	1e71      	subs	r1, r6, #1
 8007aac:	4620      	mov	r0, r4
 8007aae:	f000 fe4d 	bl	800874c <__any_on>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d1ed      	bne.n	8007a92 <__gethex+0x2ca>
 8007ab6:	ee18 0a10 	vmov	r0, s16
 8007aba:	4621      	mov	r1, r4
 8007abc:	f000 f9ec 	bl	8007e98 <_Bfree>
 8007ac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	2750      	movs	r7, #80	; 0x50
 8007ac8:	e713      	b.n	80078f2 <__gethex+0x12a>
 8007aca:	bf00      	nop
 8007acc:	08009c80 	.word	0x08009c80
 8007ad0:	08009c05 	.word	0x08009c05
 8007ad4:	08009c16 	.word	0x08009c16
 8007ad8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1eb      	bne.n	8007ab6 <__gethex+0x2ee>
 8007ade:	e7d8      	b.n	8007a92 <__gethex+0x2ca>
 8007ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1d5      	bne.n	8007a92 <__gethex+0x2ca>
 8007ae6:	e7e6      	b.n	8007ab6 <__gethex+0x2ee>
 8007ae8:	1e6f      	subs	r7, r5, #1
 8007aea:	f1ba 0f00 	cmp.w	sl, #0
 8007aee:	d131      	bne.n	8007b54 <__gethex+0x38c>
 8007af0:	b127      	cbz	r7, 8007afc <__gethex+0x334>
 8007af2:	4639      	mov	r1, r7
 8007af4:	4620      	mov	r0, r4
 8007af6:	f000 fe29 	bl	800874c <__any_on>
 8007afa:	4682      	mov	sl, r0
 8007afc:	117b      	asrs	r3, r7, #5
 8007afe:	2101      	movs	r1, #1
 8007b00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007b04:	f007 071f 	and.w	r7, r7, #31
 8007b08:	fa01 f707 	lsl.w	r7, r1, r7
 8007b0c:	421f      	tst	r7, r3
 8007b0e:	4629      	mov	r1, r5
 8007b10:	4620      	mov	r0, r4
 8007b12:	bf18      	it	ne
 8007b14:	f04a 0a02 	orrne.w	sl, sl, #2
 8007b18:	1b76      	subs	r6, r6, r5
 8007b1a:	f7ff fded 	bl	80076f8 <rshift>
 8007b1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007b22:	2702      	movs	r7, #2
 8007b24:	f1ba 0f00 	cmp.w	sl, #0
 8007b28:	d048      	beq.n	8007bbc <__gethex+0x3f4>
 8007b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d015      	beq.n	8007b5e <__gethex+0x396>
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d017      	beq.n	8007b66 <__gethex+0x39e>
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d109      	bne.n	8007b4e <__gethex+0x386>
 8007b3a:	f01a 0f02 	tst.w	sl, #2
 8007b3e:	d006      	beq.n	8007b4e <__gethex+0x386>
 8007b40:	f8d9 0000 	ldr.w	r0, [r9]
 8007b44:	ea4a 0a00 	orr.w	sl, sl, r0
 8007b48:	f01a 0f01 	tst.w	sl, #1
 8007b4c:	d10e      	bne.n	8007b6c <__gethex+0x3a4>
 8007b4e:	f047 0710 	orr.w	r7, r7, #16
 8007b52:	e033      	b.n	8007bbc <__gethex+0x3f4>
 8007b54:	f04f 0a01 	mov.w	sl, #1
 8007b58:	e7d0      	b.n	8007afc <__gethex+0x334>
 8007b5a:	2701      	movs	r7, #1
 8007b5c:	e7e2      	b.n	8007b24 <__gethex+0x35c>
 8007b5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b60:	f1c3 0301 	rsb	r3, r3, #1
 8007b64:	9315      	str	r3, [sp, #84]	; 0x54
 8007b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <__gethex+0x386>
 8007b6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b70:	f104 0314 	add.w	r3, r4, #20
 8007b74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b7c:	f04f 0c00 	mov.w	ip, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b86:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b8a:	d01c      	beq.n	8007bc6 <__gethex+0x3fe>
 8007b8c:	3201      	adds	r2, #1
 8007b8e:	6002      	str	r2, [r0, #0]
 8007b90:	2f02      	cmp	r7, #2
 8007b92:	f104 0314 	add.w	r3, r4, #20
 8007b96:	d13f      	bne.n	8007c18 <__gethex+0x450>
 8007b98:	f8d8 2000 	ldr.w	r2, [r8]
 8007b9c:	3a01      	subs	r2, #1
 8007b9e:	42b2      	cmp	r2, r6
 8007ba0:	d10a      	bne.n	8007bb8 <__gethex+0x3f0>
 8007ba2:	1171      	asrs	r1, r6, #5
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007baa:	f006 061f 	and.w	r6, r6, #31
 8007bae:	fa02 f606 	lsl.w	r6, r2, r6
 8007bb2:	421e      	tst	r6, r3
 8007bb4:	bf18      	it	ne
 8007bb6:	4617      	movne	r7, r2
 8007bb8:	f047 0720 	orr.w	r7, r7, #32
 8007bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bbe:	601c      	str	r4, [r3, #0]
 8007bc0:	9b04      	ldr	r3, [sp, #16]
 8007bc2:	601d      	str	r5, [r3, #0]
 8007bc4:	e695      	b.n	80078f2 <__gethex+0x12a>
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	f843 cc04 	str.w	ip, [r3, #-4]
 8007bcc:	d8d8      	bhi.n	8007b80 <__gethex+0x3b8>
 8007bce:	68a3      	ldr	r3, [r4, #8]
 8007bd0:	459b      	cmp	fp, r3
 8007bd2:	db19      	blt.n	8007c08 <__gethex+0x440>
 8007bd4:	6861      	ldr	r1, [r4, #4]
 8007bd6:	ee18 0a10 	vmov	r0, s16
 8007bda:	3101      	adds	r1, #1
 8007bdc:	f000 f91c 	bl	8007e18 <_Balloc>
 8007be0:	4681      	mov	r9, r0
 8007be2:	b918      	cbnz	r0, 8007bec <__gethex+0x424>
 8007be4:	4b1a      	ldr	r3, [pc, #104]	; (8007c50 <__gethex+0x488>)
 8007be6:	4602      	mov	r2, r0
 8007be8:	2184      	movs	r1, #132	; 0x84
 8007bea:	e6a8      	b.n	800793e <__gethex+0x176>
 8007bec:	6922      	ldr	r2, [r4, #16]
 8007bee:	3202      	adds	r2, #2
 8007bf0:	f104 010c 	add.w	r1, r4, #12
 8007bf4:	0092      	lsls	r2, r2, #2
 8007bf6:	300c      	adds	r0, #12
 8007bf8:	f000 f900 	bl	8007dfc <memcpy>
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	ee18 0a10 	vmov	r0, s16
 8007c02:	f000 f949 	bl	8007e98 <_Bfree>
 8007c06:	464c      	mov	r4, r9
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	1c5a      	adds	r2, r3, #1
 8007c0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c10:	6122      	str	r2, [r4, #16]
 8007c12:	2201      	movs	r2, #1
 8007c14:	615a      	str	r2, [r3, #20]
 8007c16:	e7bb      	b.n	8007b90 <__gethex+0x3c8>
 8007c18:	6922      	ldr	r2, [r4, #16]
 8007c1a:	455a      	cmp	r2, fp
 8007c1c:	dd0b      	ble.n	8007c36 <__gethex+0x46e>
 8007c1e:	2101      	movs	r1, #1
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7ff fd69 	bl	80076f8 <rshift>
 8007c26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c2a:	3501      	adds	r5, #1
 8007c2c:	42ab      	cmp	r3, r5
 8007c2e:	f6ff aed0 	blt.w	80079d2 <__gethex+0x20a>
 8007c32:	2701      	movs	r7, #1
 8007c34:	e7c0      	b.n	8007bb8 <__gethex+0x3f0>
 8007c36:	f016 061f 	ands.w	r6, r6, #31
 8007c3a:	d0fa      	beq.n	8007c32 <__gethex+0x46a>
 8007c3c:	449a      	add	sl, r3
 8007c3e:	f1c6 0620 	rsb	r6, r6, #32
 8007c42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007c46:	f000 f9dd 	bl	8008004 <__hi0bits>
 8007c4a:	42b0      	cmp	r0, r6
 8007c4c:	dbe7      	blt.n	8007c1e <__gethex+0x456>
 8007c4e:	e7f0      	b.n	8007c32 <__gethex+0x46a>
 8007c50:	08009c05 	.word	0x08009c05

08007c54 <L_shift>:
 8007c54:	f1c2 0208 	rsb	r2, r2, #8
 8007c58:	0092      	lsls	r2, r2, #2
 8007c5a:	b570      	push	{r4, r5, r6, lr}
 8007c5c:	f1c2 0620 	rsb	r6, r2, #32
 8007c60:	6843      	ldr	r3, [r0, #4]
 8007c62:	6804      	ldr	r4, [r0, #0]
 8007c64:	fa03 f506 	lsl.w	r5, r3, r6
 8007c68:	432c      	orrs	r4, r5
 8007c6a:	40d3      	lsrs	r3, r2
 8007c6c:	6004      	str	r4, [r0, #0]
 8007c6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c72:	4288      	cmp	r0, r1
 8007c74:	d3f4      	bcc.n	8007c60 <L_shift+0xc>
 8007c76:	bd70      	pop	{r4, r5, r6, pc}

08007c78 <__match>:
 8007c78:	b530      	push	{r4, r5, lr}
 8007c7a:	6803      	ldr	r3, [r0, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c82:	b914      	cbnz	r4, 8007c8a <__match+0x12>
 8007c84:	6003      	str	r3, [r0, #0]
 8007c86:	2001      	movs	r0, #1
 8007c88:	bd30      	pop	{r4, r5, pc}
 8007c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007c92:	2d19      	cmp	r5, #25
 8007c94:	bf98      	it	ls
 8007c96:	3220      	addls	r2, #32
 8007c98:	42a2      	cmp	r2, r4
 8007c9a:	d0f0      	beq.n	8007c7e <__match+0x6>
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e7f3      	b.n	8007c88 <__match+0x10>

08007ca0 <__hexnan>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	680b      	ldr	r3, [r1, #0]
 8007ca6:	6801      	ldr	r1, [r0, #0]
 8007ca8:	115e      	asrs	r6, r3, #5
 8007caa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007cae:	f013 031f 	ands.w	r3, r3, #31
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	bf18      	it	ne
 8007cb6:	3604      	addne	r6, #4
 8007cb8:	2500      	movs	r5, #0
 8007cba:	1f37      	subs	r7, r6, #4
 8007cbc:	4682      	mov	sl, r0
 8007cbe:	4690      	mov	r8, r2
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007cc6:	46b9      	mov	r9, r7
 8007cc8:	463c      	mov	r4, r7
 8007cca:	9502      	str	r5, [sp, #8]
 8007ccc:	46ab      	mov	fp, r5
 8007cce:	784a      	ldrb	r2, [r1, #1]
 8007cd0:	1c4b      	adds	r3, r1, #1
 8007cd2:	9303      	str	r3, [sp, #12]
 8007cd4:	b342      	cbz	r2, 8007d28 <__hexnan+0x88>
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	9105      	str	r1, [sp, #20]
 8007cda:	9204      	str	r2, [sp, #16]
 8007cdc:	f7ff fd5e 	bl	800779c <__hexdig_fun>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	d14f      	bne.n	8007d84 <__hexnan+0xe4>
 8007ce4:	9a04      	ldr	r2, [sp, #16]
 8007ce6:	9905      	ldr	r1, [sp, #20]
 8007ce8:	2a20      	cmp	r2, #32
 8007cea:	d818      	bhi.n	8007d1e <__hexnan+0x7e>
 8007cec:	9b02      	ldr	r3, [sp, #8]
 8007cee:	459b      	cmp	fp, r3
 8007cf0:	dd13      	ble.n	8007d1a <__hexnan+0x7a>
 8007cf2:	454c      	cmp	r4, r9
 8007cf4:	d206      	bcs.n	8007d04 <__hexnan+0x64>
 8007cf6:	2d07      	cmp	r5, #7
 8007cf8:	dc04      	bgt.n	8007d04 <__hexnan+0x64>
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7ff ffa8 	bl	8007c54 <L_shift>
 8007d04:	4544      	cmp	r4, r8
 8007d06:	d950      	bls.n	8007daa <__hexnan+0x10a>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f1a4 0904 	sub.w	r9, r4, #4
 8007d0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d12:	f8cd b008 	str.w	fp, [sp, #8]
 8007d16:	464c      	mov	r4, r9
 8007d18:	461d      	mov	r5, r3
 8007d1a:	9903      	ldr	r1, [sp, #12]
 8007d1c:	e7d7      	b.n	8007cce <__hexnan+0x2e>
 8007d1e:	2a29      	cmp	r2, #41	; 0x29
 8007d20:	d156      	bne.n	8007dd0 <__hexnan+0x130>
 8007d22:	3102      	adds	r1, #2
 8007d24:	f8ca 1000 	str.w	r1, [sl]
 8007d28:	f1bb 0f00 	cmp.w	fp, #0
 8007d2c:	d050      	beq.n	8007dd0 <__hexnan+0x130>
 8007d2e:	454c      	cmp	r4, r9
 8007d30:	d206      	bcs.n	8007d40 <__hexnan+0xa0>
 8007d32:	2d07      	cmp	r5, #7
 8007d34:	dc04      	bgt.n	8007d40 <__hexnan+0xa0>
 8007d36:	462a      	mov	r2, r5
 8007d38:	4649      	mov	r1, r9
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f7ff ff8a 	bl	8007c54 <L_shift>
 8007d40:	4544      	cmp	r4, r8
 8007d42:	d934      	bls.n	8007dae <__hexnan+0x10e>
 8007d44:	f1a8 0204 	sub.w	r2, r8, #4
 8007d48:	4623      	mov	r3, r4
 8007d4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d52:	429f      	cmp	r7, r3
 8007d54:	d2f9      	bcs.n	8007d4a <__hexnan+0xaa>
 8007d56:	1b3b      	subs	r3, r7, r4
 8007d58:	f023 0303 	bic.w	r3, r3, #3
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	3401      	adds	r4, #1
 8007d60:	3e03      	subs	r6, #3
 8007d62:	42b4      	cmp	r4, r6
 8007d64:	bf88      	it	hi
 8007d66:	2304      	movhi	r3, #4
 8007d68:	4443      	add	r3, r8
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f843 2b04 	str.w	r2, [r3], #4
 8007d70:	429f      	cmp	r7, r3
 8007d72:	d2fb      	bcs.n	8007d6c <__hexnan+0xcc>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	b91b      	cbnz	r3, 8007d80 <__hexnan+0xe0>
 8007d78:	4547      	cmp	r7, r8
 8007d7a:	d127      	bne.n	8007dcc <__hexnan+0x12c>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	2005      	movs	r0, #5
 8007d82:	e026      	b.n	8007dd2 <__hexnan+0x132>
 8007d84:	3501      	adds	r5, #1
 8007d86:	2d08      	cmp	r5, #8
 8007d88:	f10b 0b01 	add.w	fp, fp, #1
 8007d8c:	dd06      	ble.n	8007d9c <__hexnan+0xfc>
 8007d8e:	4544      	cmp	r4, r8
 8007d90:	d9c3      	bls.n	8007d1a <__hexnan+0x7a>
 8007d92:	2300      	movs	r3, #0
 8007d94:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d98:	2501      	movs	r5, #1
 8007d9a:	3c04      	subs	r4, #4
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	f000 000f 	and.w	r0, r0, #15
 8007da2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	e7b7      	b.n	8007d1a <__hexnan+0x7a>
 8007daa:	2508      	movs	r5, #8
 8007dac:	e7b5      	b.n	8007d1a <__hexnan+0x7a>
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0df      	beq.n	8007d74 <__hexnan+0xd4>
 8007db4:	f04f 32ff 	mov.w	r2, #4294967295
 8007db8:	f1c3 0320 	rsb	r3, r3, #32
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007dc4:	401a      	ands	r2, r3
 8007dc6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007dca:	e7d3      	b.n	8007d74 <__hexnan+0xd4>
 8007dcc:	3f04      	subs	r7, #4
 8007dce:	e7d1      	b.n	8007d74 <__hexnan+0xd4>
 8007dd0:	2004      	movs	r0, #4
 8007dd2:	b007      	add	sp, #28
 8007dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007dd8 <__ascii_mbtowc>:
 8007dd8:	b082      	sub	sp, #8
 8007dda:	b901      	cbnz	r1, 8007dde <__ascii_mbtowc+0x6>
 8007ddc:	a901      	add	r1, sp, #4
 8007dde:	b142      	cbz	r2, 8007df2 <__ascii_mbtowc+0x1a>
 8007de0:	b14b      	cbz	r3, 8007df6 <__ascii_mbtowc+0x1e>
 8007de2:	7813      	ldrb	r3, [r2, #0]
 8007de4:	600b      	str	r3, [r1, #0]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	1e10      	subs	r0, r2, #0
 8007dea:	bf18      	it	ne
 8007dec:	2001      	movne	r0, #1
 8007dee:	b002      	add	sp, #8
 8007df0:	4770      	bx	lr
 8007df2:	4610      	mov	r0, r2
 8007df4:	e7fb      	b.n	8007dee <__ascii_mbtowc+0x16>
 8007df6:	f06f 0001 	mvn.w	r0, #1
 8007dfa:	e7f8      	b.n	8007dee <__ascii_mbtowc+0x16>

08007dfc <memcpy>:
 8007dfc:	440a      	add	r2, r1
 8007dfe:	4291      	cmp	r1, r2
 8007e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e04:	d100      	bne.n	8007e08 <memcpy+0xc>
 8007e06:	4770      	bx	lr
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e12:	4291      	cmp	r1, r2
 8007e14:	d1f9      	bne.n	8007e0a <memcpy+0xe>
 8007e16:	bd10      	pop	{r4, pc}

08007e18 <_Balloc>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	460d      	mov	r5, r1
 8007e20:	b976      	cbnz	r6, 8007e40 <_Balloc+0x28>
 8007e22:	2010      	movs	r0, #16
 8007e24:	f001 f874 	bl	8008f10 <malloc>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8007e2c:	b920      	cbnz	r0, 8007e38 <_Balloc+0x20>
 8007e2e:	4b18      	ldr	r3, [pc, #96]	; (8007e90 <_Balloc+0x78>)
 8007e30:	4818      	ldr	r0, [pc, #96]	; (8007e94 <_Balloc+0x7c>)
 8007e32:	2166      	movs	r1, #102	; 0x66
 8007e34:	f001 f83c 	bl	8008eb0 <__assert_func>
 8007e38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e3c:	6006      	str	r6, [r0, #0]
 8007e3e:	60c6      	str	r6, [r0, #12]
 8007e40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e42:	68f3      	ldr	r3, [r6, #12]
 8007e44:	b183      	cbz	r3, 8007e68 <_Balloc+0x50>
 8007e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e4e:	b9b8      	cbnz	r0, 8007e80 <_Balloc+0x68>
 8007e50:	2101      	movs	r1, #1
 8007e52:	fa01 f605 	lsl.w	r6, r1, r5
 8007e56:	1d72      	adds	r2, r6, #5
 8007e58:	0092      	lsls	r2, r2, #2
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fc97 	bl	800878e <_calloc_r>
 8007e60:	b160      	cbz	r0, 8007e7c <_Balloc+0x64>
 8007e62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e66:	e00e      	b.n	8007e86 <_Balloc+0x6e>
 8007e68:	2221      	movs	r2, #33	; 0x21
 8007e6a:	2104      	movs	r1, #4
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 fc8e 	bl	800878e <_calloc_r>
 8007e72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e74:	60f0      	str	r0, [r6, #12]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e4      	bne.n	8007e46 <_Balloc+0x2e>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	6802      	ldr	r2, [r0, #0]
 8007e82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e86:	2300      	movs	r3, #0
 8007e88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e8c:	e7f7      	b.n	8007e7e <_Balloc+0x66>
 8007e8e:	bf00      	nop
 8007e90:	08009c94 	.word	0x08009c94
 8007e94:	08009cab 	.word	0x08009cab

08007e98 <_Bfree>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	b976      	cbnz	r6, 8007ec0 <_Bfree+0x28>
 8007ea2:	2010      	movs	r0, #16
 8007ea4:	f001 f834 	bl	8008f10 <malloc>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	6268      	str	r0, [r5, #36]	; 0x24
 8007eac:	b920      	cbnz	r0, 8007eb8 <_Bfree+0x20>
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <_Bfree+0x3c>)
 8007eb0:	4809      	ldr	r0, [pc, #36]	; (8007ed8 <_Bfree+0x40>)
 8007eb2:	218a      	movs	r1, #138	; 0x8a
 8007eb4:	f000 fffc 	bl	8008eb0 <__assert_func>
 8007eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ebc:	6006      	str	r6, [r0, #0]
 8007ebe:	60c6      	str	r6, [r0, #12]
 8007ec0:	b13c      	cbz	r4, 8007ed2 <_Bfree+0x3a>
 8007ec2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ec4:	6862      	ldr	r2, [r4, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ecc:	6021      	str	r1, [r4, #0]
 8007ece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	08009c94 	.word	0x08009c94
 8007ed8:	08009cab 	.word	0x08009cab

08007edc <__multadd>:
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	690e      	ldr	r6, [r1, #16]
 8007ee2:	4607      	mov	r7, r0
 8007ee4:	4698      	mov	r8, r3
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	f101 0014 	add.w	r0, r1, #20
 8007eec:	2300      	movs	r3, #0
 8007eee:	6805      	ldr	r5, [r0, #0]
 8007ef0:	b2a9      	uxth	r1, r5
 8007ef2:	fb02 8101 	mla	r1, r2, r1, r8
 8007ef6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007efa:	0c2d      	lsrs	r5, r5, #16
 8007efc:	fb02 c505 	mla	r5, r2, r5, ip
 8007f00:	b289      	uxth	r1, r1
 8007f02:	3301      	adds	r3, #1
 8007f04:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007f08:	429e      	cmp	r6, r3
 8007f0a:	f840 1b04 	str.w	r1, [r0], #4
 8007f0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007f12:	dcec      	bgt.n	8007eee <__multadd+0x12>
 8007f14:	f1b8 0f00 	cmp.w	r8, #0
 8007f18:	d022      	beq.n	8007f60 <__multadd+0x84>
 8007f1a:	68a3      	ldr	r3, [r4, #8]
 8007f1c:	42b3      	cmp	r3, r6
 8007f1e:	dc19      	bgt.n	8007f54 <__multadd+0x78>
 8007f20:	6861      	ldr	r1, [r4, #4]
 8007f22:	4638      	mov	r0, r7
 8007f24:	3101      	adds	r1, #1
 8007f26:	f7ff ff77 	bl	8007e18 <_Balloc>
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	b928      	cbnz	r0, 8007f3a <__multadd+0x5e>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <__multadd+0x8c>)
 8007f32:	480e      	ldr	r0, [pc, #56]	; (8007f6c <__multadd+0x90>)
 8007f34:	21b5      	movs	r1, #181	; 0xb5
 8007f36:	f000 ffbb 	bl	8008eb0 <__assert_func>
 8007f3a:	6922      	ldr	r2, [r4, #16]
 8007f3c:	3202      	adds	r2, #2
 8007f3e:	f104 010c 	add.w	r1, r4, #12
 8007f42:	0092      	lsls	r2, r2, #2
 8007f44:	300c      	adds	r0, #12
 8007f46:	f7ff ff59 	bl	8007dfc <memcpy>
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	f7ff ffa3 	bl	8007e98 <_Bfree>
 8007f52:	462c      	mov	r4, r5
 8007f54:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007f58:	3601      	adds	r6, #1
 8007f5a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007f5e:	6126      	str	r6, [r4, #16]
 8007f60:	4620      	mov	r0, r4
 8007f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f66:	bf00      	nop
 8007f68:	08009c05 	.word	0x08009c05
 8007f6c:	08009cab 	.word	0x08009cab

08007f70 <__s2b>:
 8007f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f74:	460c      	mov	r4, r1
 8007f76:	4615      	mov	r5, r2
 8007f78:	461f      	mov	r7, r3
 8007f7a:	2209      	movs	r2, #9
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	4606      	mov	r6, r0
 8007f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f84:	2100      	movs	r1, #0
 8007f86:	2201      	movs	r2, #1
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	db09      	blt.n	8007fa0 <__s2b+0x30>
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7ff ff43 	bl	8007e18 <_Balloc>
 8007f92:	b940      	cbnz	r0, 8007fa6 <__s2b+0x36>
 8007f94:	4602      	mov	r2, r0
 8007f96:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <__s2b+0x8c>)
 8007f98:	4819      	ldr	r0, [pc, #100]	; (8008000 <__s2b+0x90>)
 8007f9a:	21ce      	movs	r1, #206	; 0xce
 8007f9c:	f000 ff88 	bl	8008eb0 <__assert_func>
 8007fa0:	0052      	lsls	r2, r2, #1
 8007fa2:	3101      	adds	r1, #1
 8007fa4:	e7f0      	b.n	8007f88 <__s2b+0x18>
 8007fa6:	9b08      	ldr	r3, [sp, #32]
 8007fa8:	6143      	str	r3, [r0, #20]
 8007faa:	2d09      	cmp	r5, #9
 8007fac:	f04f 0301 	mov.w	r3, #1
 8007fb0:	6103      	str	r3, [r0, #16]
 8007fb2:	dd16      	ble.n	8007fe2 <__s2b+0x72>
 8007fb4:	f104 0909 	add.w	r9, r4, #9
 8007fb8:	46c8      	mov	r8, r9
 8007fba:	442c      	add	r4, r5
 8007fbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007fc0:	4601      	mov	r1, r0
 8007fc2:	3b30      	subs	r3, #48	; 0x30
 8007fc4:	220a      	movs	r2, #10
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ff88 	bl	8007edc <__multadd>
 8007fcc:	45a0      	cmp	r8, r4
 8007fce:	d1f5      	bne.n	8007fbc <__s2b+0x4c>
 8007fd0:	f1a5 0408 	sub.w	r4, r5, #8
 8007fd4:	444c      	add	r4, r9
 8007fd6:	1b2d      	subs	r5, r5, r4
 8007fd8:	1963      	adds	r3, r4, r5
 8007fda:	42bb      	cmp	r3, r7
 8007fdc:	db04      	blt.n	8007fe8 <__s2b+0x78>
 8007fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fe2:	340a      	adds	r4, #10
 8007fe4:	2509      	movs	r5, #9
 8007fe6:	e7f6      	b.n	8007fd6 <__s2b+0x66>
 8007fe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007fec:	4601      	mov	r1, r0
 8007fee:	3b30      	subs	r3, #48	; 0x30
 8007ff0:	220a      	movs	r2, #10
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f7ff ff72 	bl	8007edc <__multadd>
 8007ff8:	e7ee      	b.n	8007fd8 <__s2b+0x68>
 8007ffa:	bf00      	nop
 8007ffc:	08009c05 	.word	0x08009c05
 8008000:	08009cab 	.word	0x08009cab

08008004 <__hi0bits>:
 8008004:	0c03      	lsrs	r3, r0, #16
 8008006:	041b      	lsls	r3, r3, #16
 8008008:	b9d3      	cbnz	r3, 8008040 <__hi0bits+0x3c>
 800800a:	0400      	lsls	r0, r0, #16
 800800c:	2310      	movs	r3, #16
 800800e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008012:	bf04      	itt	eq
 8008014:	0200      	lsleq	r0, r0, #8
 8008016:	3308      	addeq	r3, #8
 8008018:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800801c:	bf04      	itt	eq
 800801e:	0100      	lsleq	r0, r0, #4
 8008020:	3304      	addeq	r3, #4
 8008022:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008026:	bf04      	itt	eq
 8008028:	0080      	lsleq	r0, r0, #2
 800802a:	3302      	addeq	r3, #2
 800802c:	2800      	cmp	r0, #0
 800802e:	db05      	blt.n	800803c <__hi0bits+0x38>
 8008030:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008034:	f103 0301 	add.w	r3, r3, #1
 8008038:	bf08      	it	eq
 800803a:	2320      	moveq	r3, #32
 800803c:	4618      	mov	r0, r3
 800803e:	4770      	bx	lr
 8008040:	2300      	movs	r3, #0
 8008042:	e7e4      	b.n	800800e <__hi0bits+0xa>

08008044 <__lo0bits>:
 8008044:	6803      	ldr	r3, [r0, #0]
 8008046:	f013 0207 	ands.w	r2, r3, #7
 800804a:	4601      	mov	r1, r0
 800804c:	d00b      	beq.n	8008066 <__lo0bits+0x22>
 800804e:	07da      	lsls	r2, r3, #31
 8008050:	d424      	bmi.n	800809c <__lo0bits+0x58>
 8008052:	0798      	lsls	r0, r3, #30
 8008054:	bf49      	itett	mi
 8008056:	085b      	lsrmi	r3, r3, #1
 8008058:	089b      	lsrpl	r3, r3, #2
 800805a:	2001      	movmi	r0, #1
 800805c:	600b      	strmi	r3, [r1, #0]
 800805e:	bf5c      	itt	pl
 8008060:	600b      	strpl	r3, [r1, #0]
 8008062:	2002      	movpl	r0, #2
 8008064:	4770      	bx	lr
 8008066:	b298      	uxth	r0, r3
 8008068:	b9b0      	cbnz	r0, 8008098 <__lo0bits+0x54>
 800806a:	0c1b      	lsrs	r3, r3, #16
 800806c:	2010      	movs	r0, #16
 800806e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008072:	bf04      	itt	eq
 8008074:	0a1b      	lsreq	r3, r3, #8
 8008076:	3008      	addeq	r0, #8
 8008078:	071a      	lsls	r2, r3, #28
 800807a:	bf04      	itt	eq
 800807c:	091b      	lsreq	r3, r3, #4
 800807e:	3004      	addeq	r0, #4
 8008080:	079a      	lsls	r2, r3, #30
 8008082:	bf04      	itt	eq
 8008084:	089b      	lsreq	r3, r3, #2
 8008086:	3002      	addeq	r0, #2
 8008088:	07da      	lsls	r2, r3, #31
 800808a:	d403      	bmi.n	8008094 <__lo0bits+0x50>
 800808c:	085b      	lsrs	r3, r3, #1
 800808e:	f100 0001 	add.w	r0, r0, #1
 8008092:	d005      	beq.n	80080a0 <__lo0bits+0x5c>
 8008094:	600b      	str	r3, [r1, #0]
 8008096:	4770      	bx	lr
 8008098:	4610      	mov	r0, r2
 800809a:	e7e8      	b.n	800806e <__lo0bits+0x2a>
 800809c:	2000      	movs	r0, #0
 800809e:	4770      	bx	lr
 80080a0:	2020      	movs	r0, #32
 80080a2:	4770      	bx	lr

080080a4 <__i2b>:
 80080a4:	b510      	push	{r4, lr}
 80080a6:	460c      	mov	r4, r1
 80080a8:	2101      	movs	r1, #1
 80080aa:	f7ff feb5 	bl	8007e18 <_Balloc>
 80080ae:	4602      	mov	r2, r0
 80080b0:	b928      	cbnz	r0, 80080be <__i2b+0x1a>
 80080b2:	4b05      	ldr	r3, [pc, #20]	; (80080c8 <__i2b+0x24>)
 80080b4:	4805      	ldr	r0, [pc, #20]	; (80080cc <__i2b+0x28>)
 80080b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080ba:	f000 fef9 	bl	8008eb0 <__assert_func>
 80080be:	2301      	movs	r3, #1
 80080c0:	6144      	str	r4, [r0, #20]
 80080c2:	6103      	str	r3, [r0, #16]
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	bf00      	nop
 80080c8:	08009c05 	.word	0x08009c05
 80080cc:	08009cab 	.word	0x08009cab

080080d0 <__multiply>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	4614      	mov	r4, r2
 80080d6:	690a      	ldr	r2, [r1, #16]
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	429a      	cmp	r2, r3
 80080dc:	bfb8      	it	lt
 80080de:	460b      	movlt	r3, r1
 80080e0:	460d      	mov	r5, r1
 80080e2:	bfbc      	itt	lt
 80080e4:	4625      	movlt	r5, r4
 80080e6:	461c      	movlt	r4, r3
 80080e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80080ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80080f0:	68ab      	ldr	r3, [r5, #8]
 80080f2:	6869      	ldr	r1, [r5, #4]
 80080f4:	eb0a 0709 	add.w	r7, sl, r9
 80080f8:	42bb      	cmp	r3, r7
 80080fa:	b085      	sub	sp, #20
 80080fc:	bfb8      	it	lt
 80080fe:	3101      	addlt	r1, #1
 8008100:	f7ff fe8a 	bl	8007e18 <_Balloc>
 8008104:	b930      	cbnz	r0, 8008114 <__multiply+0x44>
 8008106:	4602      	mov	r2, r0
 8008108:	4b42      	ldr	r3, [pc, #264]	; (8008214 <__multiply+0x144>)
 800810a:	4843      	ldr	r0, [pc, #268]	; (8008218 <__multiply+0x148>)
 800810c:	f240 115d 	movw	r1, #349	; 0x15d
 8008110:	f000 fece 	bl	8008eb0 <__assert_func>
 8008114:	f100 0614 	add.w	r6, r0, #20
 8008118:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800811c:	4633      	mov	r3, r6
 800811e:	2200      	movs	r2, #0
 8008120:	4543      	cmp	r3, r8
 8008122:	d31e      	bcc.n	8008162 <__multiply+0x92>
 8008124:	f105 0c14 	add.w	ip, r5, #20
 8008128:	f104 0314 	add.w	r3, r4, #20
 800812c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008130:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008134:	9202      	str	r2, [sp, #8]
 8008136:	ebac 0205 	sub.w	r2, ip, r5
 800813a:	3a15      	subs	r2, #21
 800813c:	f022 0203 	bic.w	r2, r2, #3
 8008140:	3204      	adds	r2, #4
 8008142:	f105 0115 	add.w	r1, r5, #21
 8008146:	458c      	cmp	ip, r1
 8008148:	bf38      	it	cc
 800814a:	2204      	movcc	r2, #4
 800814c:	9201      	str	r2, [sp, #4]
 800814e:	9a02      	ldr	r2, [sp, #8]
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	429a      	cmp	r2, r3
 8008154:	d808      	bhi.n	8008168 <__multiply+0x98>
 8008156:	2f00      	cmp	r7, #0
 8008158:	dc55      	bgt.n	8008206 <__multiply+0x136>
 800815a:	6107      	str	r7, [r0, #16]
 800815c:	b005      	add	sp, #20
 800815e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008162:	f843 2b04 	str.w	r2, [r3], #4
 8008166:	e7db      	b.n	8008120 <__multiply+0x50>
 8008168:	f8b3 a000 	ldrh.w	sl, [r3]
 800816c:	f1ba 0f00 	cmp.w	sl, #0
 8008170:	d020      	beq.n	80081b4 <__multiply+0xe4>
 8008172:	f105 0e14 	add.w	lr, r5, #20
 8008176:	46b1      	mov	r9, r6
 8008178:	2200      	movs	r2, #0
 800817a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800817e:	f8d9 b000 	ldr.w	fp, [r9]
 8008182:	b2a1      	uxth	r1, r4
 8008184:	fa1f fb8b 	uxth.w	fp, fp
 8008188:	fb0a b101 	mla	r1, sl, r1, fp
 800818c:	4411      	add	r1, r2
 800818e:	f8d9 2000 	ldr.w	r2, [r9]
 8008192:	0c24      	lsrs	r4, r4, #16
 8008194:	0c12      	lsrs	r2, r2, #16
 8008196:	fb0a 2404 	mla	r4, sl, r4, r2
 800819a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800819e:	b289      	uxth	r1, r1
 80081a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80081a4:	45f4      	cmp	ip, lr
 80081a6:	f849 1b04 	str.w	r1, [r9], #4
 80081aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80081ae:	d8e4      	bhi.n	800817a <__multiply+0xaa>
 80081b0:	9901      	ldr	r1, [sp, #4]
 80081b2:	5072      	str	r2, [r6, r1]
 80081b4:	9a03      	ldr	r2, [sp, #12]
 80081b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80081ba:	3304      	adds	r3, #4
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	d01f      	beq.n	8008202 <__multiply+0x132>
 80081c2:	6834      	ldr	r4, [r6, #0]
 80081c4:	f105 0114 	add.w	r1, r5, #20
 80081c8:	46b6      	mov	lr, r6
 80081ca:	f04f 0a00 	mov.w	sl, #0
 80081ce:	880a      	ldrh	r2, [r1, #0]
 80081d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80081d4:	fb09 b202 	mla	r2, r9, r2, fp
 80081d8:	4492      	add	sl, r2
 80081da:	b2a4      	uxth	r4, r4
 80081dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80081e0:	f84e 4b04 	str.w	r4, [lr], #4
 80081e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80081e8:	f8be 2000 	ldrh.w	r2, [lr]
 80081ec:	0c24      	lsrs	r4, r4, #16
 80081ee:	fb09 2404 	mla	r4, r9, r4, r2
 80081f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80081f6:	458c      	cmp	ip, r1
 80081f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80081fc:	d8e7      	bhi.n	80081ce <__multiply+0xfe>
 80081fe:	9a01      	ldr	r2, [sp, #4]
 8008200:	50b4      	str	r4, [r6, r2]
 8008202:	3604      	adds	r6, #4
 8008204:	e7a3      	b.n	800814e <__multiply+0x7e>
 8008206:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1a5      	bne.n	800815a <__multiply+0x8a>
 800820e:	3f01      	subs	r7, #1
 8008210:	e7a1      	b.n	8008156 <__multiply+0x86>
 8008212:	bf00      	nop
 8008214:	08009c05 	.word	0x08009c05
 8008218:	08009cab 	.word	0x08009cab

0800821c <__pow5mult>:
 800821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	4615      	mov	r5, r2
 8008222:	f012 0203 	ands.w	r2, r2, #3
 8008226:	4606      	mov	r6, r0
 8008228:	460f      	mov	r7, r1
 800822a:	d007      	beq.n	800823c <__pow5mult+0x20>
 800822c:	4c25      	ldr	r4, [pc, #148]	; (80082c4 <__pow5mult+0xa8>)
 800822e:	3a01      	subs	r2, #1
 8008230:	2300      	movs	r3, #0
 8008232:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008236:	f7ff fe51 	bl	8007edc <__multadd>
 800823a:	4607      	mov	r7, r0
 800823c:	10ad      	asrs	r5, r5, #2
 800823e:	d03d      	beq.n	80082bc <__pow5mult+0xa0>
 8008240:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008242:	b97c      	cbnz	r4, 8008264 <__pow5mult+0x48>
 8008244:	2010      	movs	r0, #16
 8008246:	f000 fe63 	bl	8008f10 <malloc>
 800824a:	4602      	mov	r2, r0
 800824c:	6270      	str	r0, [r6, #36]	; 0x24
 800824e:	b928      	cbnz	r0, 800825c <__pow5mult+0x40>
 8008250:	4b1d      	ldr	r3, [pc, #116]	; (80082c8 <__pow5mult+0xac>)
 8008252:	481e      	ldr	r0, [pc, #120]	; (80082cc <__pow5mult+0xb0>)
 8008254:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008258:	f000 fe2a 	bl	8008eb0 <__assert_func>
 800825c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008260:	6004      	str	r4, [r0, #0]
 8008262:	60c4      	str	r4, [r0, #12]
 8008264:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008268:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800826c:	b94c      	cbnz	r4, 8008282 <__pow5mult+0x66>
 800826e:	f240 2171 	movw	r1, #625	; 0x271
 8008272:	4630      	mov	r0, r6
 8008274:	f7ff ff16 	bl	80080a4 <__i2b>
 8008278:	2300      	movs	r3, #0
 800827a:	f8c8 0008 	str.w	r0, [r8, #8]
 800827e:	4604      	mov	r4, r0
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	f04f 0900 	mov.w	r9, #0
 8008286:	07eb      	lsls	r3, r5, #31
 8008288:	d50a      	bpl.n	80082a0 <__pow5mult+0x84>
 800828a:	4639      	mov	r1, r7
 800828c:	4622      	mov	r2, r4
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff ff1e 	bl	80080d0 <__multiply>
 8008294:	4639      	mov	r1, r7
 8008296:	4680      	mov	r8, r0
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff fdfd 	bl	8007e98 <_Bfree>
 800829e:	4647      	mov	r7, r8
 80082a0:	106d      	asrs	r5, r5, #1
 80082a2:	d00b      	beq.n	80082bc <__pow5mult+0xa0>
 80082a4:	6820      	ldr	r0, [r4, #0]
 80082a6:	b938      	cbnz	r0, 80082b8 <__pow5mult+0x9c>
 80082a8:	4622      	mov	r2, r4
 80082aa:	4621      	mov	r1, r4
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff ff0f 	bl	80080d0 <__multiply>
 80082b2:	6020      	str	r0, [r4, #0]
 80082b4:	f8c0 9000 	str.w	r9, [r0]
 80082b8:	4604      	mov	r4, r0
 80082ba:	e7e4      	b.n	8008286 <__pow5mult+0x6a>
 80082bc:	4638      	mov	r0, r7
 80082be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c2:	bf00      	nop
 80082c4:	08009e00 	.word	0x08009e00
 80082c8:	08009c94 	.word	0x08009c94
 80082cc:	08009cab 	.word	0x08009cab

080082d0 <__lshift>:
 80082d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d4:	460c      	mov	r4, r1
 80082d6:	6849      	ldr	r1, [r1, #4]
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80082de:	68a3      	ldr	r3, [r4, #8]
 80082e0:	4607      	mov	r7, r0
 80082e2:	4691      	mov	r9, r2
 80082e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082e8:	f108 0601 	add.w	r6, r8, #1
 80082ec:	42b3      	cmp	r3, r6
 80082ee:	db0b      	blt.n	8008308 <__lshift+0x38>
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff fd91 	bl	8007e18 <_Balloc>
 80082f6:	4605      	mov	r5, r0
 80082f8:	b948      	cbnz	r0, 800830e <__lshift+0x3e>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4b28      	ldr	r3, [pc, #160]	; (80083a0 <__lshift+0xd0>)
 80082fe:	4829      	ldr	r0, [pc, #164]	; (80083a4 <__lshift+0xd4>)
 8008300:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008304:	f000 fdd4 	bl	8008eb0 <__assert_func>
 8008308:	3101      	adds	r1, #1
 800830a:	005b      	lsls	r3, r3, #1
 800830c:	e7ee      	b.n	80082ec <__lshift+0x1c>
 800830e:	2300      	movs	r3, #0
 8008310:	f100 0114 	add.w	r1, r0, #20
 8008314:	f100 0210 	add.w	r2, r0, #16
 8008318:	4618      	mov	r0, r3
 800831a:	4553      	cmp	r3, sl
 800831c:	db33      	blt.n	8008386 <__lshift+0xb6>
 800831e:	6920      	ldr	r0, [r4, #16]
 8008320:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008324:	f104 0314 	add.w	r3, r4, #20
 8008328:	f019 091f 	ands.w	r9, r9, #31
 800832c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008330:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008334:	d02b      	beq.n	800838e <__lshift+0xbe>
 8008336:	f1c9 0e20 	rsb	lr, r9, #32
 800833a:	468a      	mov	sl, r1
 800833c:	2200      	movs	r2, #0
 800833e:	6818      	ldr	r0, [r3, #0]
 8008340:	fa00 f009 	lsl.w	r0, r0, r9
 8008344:	4302      	orrs	r2, r0
 8008346:	f84a 2b04 	str.w	r2, [sl], #4
 800834a:	f853 2b04 	ldr.w	r2, [r3], #4
 800834e:	459c      	cmp	ip, r3
 8008350:	fa22 f20e 	lsr.w	r2, r2, lr
 8008354:	d8f3      	bhi.n	800833e <__lshift+0x6e>
 8008356:	ebac 0304 	sub.w	r3, ip, r4
 800835a:	3b15      	subs	r3, #21
 800835c:	f023 0303 	bic.w	r3, r3, #3
 8008360:	3304      	adds	r3, #4
 8008362:	f104 0015 	add.w	r0, r4, #21
 8008366:	4584      	cmp	ip, r0
 8008368:	bf38      	it	cc
 800836a:	2304      	movcc	r3, #4
 800836c:	50ca      	str	r2, [r1, r3]
 800836e:	b10a      	cbz	r2, 8008374 <__lshift+0xa4>
 8008370:	f108 0602 	add.w	r6, r8, #2
 8008374:	3e01      	subs	r6, #1
 8008376:	4638      	mov	r0, r7
 8008378:	612e      	str	r6, [r5, #16]
 800837a:	4621      	mov	r1, r4
 800837c:	f7ff fd8c 	bl	8007e98 <_Bfree>
 8008380:	4628      	mov	r0, r5
 8008382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008386:	f842 0f04 	str.w	r0, [r2, #4]!
 800838a:	3301      	adds	r3, #1
 800838c:	e7c5      	b.n	800831a <__lshift+0x4a>
 800838e:	3904      	subs	r1, #4
 8008390:	f853 2b04 	ldr.w	r2, [r3], #4
 8008394:	f841 2f04 	str.w	r2, [r1, #4]!
 8008398:	459c      	cmp	ip, r3
 800839a:	d8f9      	bhi.n	8008390 <__lshift+0xc0>
 800839c:	e7ea      	b.n	8008374 <__lshift+0xa4>
 800839e:	bf00      	nop
 80083a0:	08009c05 	.word	0x08009c05
 80083a4:	08009cab 	.word	0x08009cab

080083a8 <__mcmp>:
 80083a8:	b530      	push	{r4, r5, lr}
 80083aa:	6902      	ldr	r2, [r0, #16]
 80083ac:	690c      	ldr	r4, [r1, #16]
 80083ae:	1b12      	subs	r2, r2, r4
 80083b0:	d10e      	bne.n	80083d0 <__mcmp+0x28>
 80083b2:	f100 0314 	add.w	r3, r0, #20
 80083b6:	3114      	adds	r1, #20
 80083b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80083bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80083c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80083c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80083c8:	42a5      	cmp	r5, r4
 80083ca:	d003      	beq.n	80083d4 <__mcmp+0x2c>
 80083cc:	d305      	bcc.n	80083da <__mcmp+0x32>
 80083ce:	2201      	movs	r2, #1
 80083d0:	4610      	mov	r0, r2
 80083d2:	bd30      	pop	{r4, r5, pc}
 80083d4:	4283      	cmp	r3, r0
 80083d6:	d3f3      	bcc.n	80083c0 <__mcmp+0x18>
 80083d8:	e7fa      	b.n	80083d0 <__mcmp+0x28>
 80083da:	f04f 32ff 	mov.w	r2, #4294967295
 80083de:	e7f7      	b.n	80083d0 <__mcmp+0x28>

080083e0 <__mdiff>:
 80083e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	460c      	mov	r4, r1
 80083e6:	4606      	mov	r6, r0
 80083e8:	4611      	mov	r1, r2
 80083ea:	4620      	mov	r0, r4
 80083ec:	4617      	mov	r7, r2
 80083ee:	f7ff ffdb 	bl	80083a8 <__mcmp>
 80083f2:	1e05      	subs	r5, r0, #0
 80083f4:	d110      	bne.n	8008418 <__mdiff+0x38>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7ff fd0d 	bl	8007e18 <_Balloc>
 80083fe:	b930      	cbnz	r0, 800840e <__mdiff+0x2e>
 8008400:	4b39      	ldr	r3, [pc, #228]	; (80084e8 <__mdiff+0x108>)
 8008402:	4602      	mov	r2, r0
 8008404:	f240 2132 	movw	r1, #562	; 0x232
 8008408:	4838      	ldr	r0, [pc, #224]	; (80084ec <__mdiff+0x10c>)
 800840a:	f000 fd51 	bl	8008eb0 <__assert_func>
 800840e:	2301      	movs	r3, #1
 8008410:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008414:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008418:	bfa4      	itt	ge
 800841a:	463b      	movge	r3, r7
 800841c:	4627      	movge	r7, r4
 800841e:	4630      	mov	r0, r6
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	bfa6      	itte	ge
 8008424:	461c      	movge	r4, r3
 8008426:	2500      	movge	r5, #0
 8008428:	2501      	movlt	r5, #1
 800842a:	f7ff fcf5 	bl	8007e18 <_Balloc>
 800842e:	b920      	cbnz	r0, 800843a <__mdiff+0x5a>
 8008430:	4b2d      	ldr	r3, [pc, #180]	; (80084e8 <__mdiff+0x108>)
 8008432:	4602      	mov	r2, r0
 8008434:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008438:	e7e6      	b.n	8008408 <__mdiff+0x28>
 800843a:	693e      	ldr	r6, [r7, #16]
 800843c:	60c5      	str	r5, [r0, #12]
 800843e:	6925      	ldr	r5, [r4, #16]
 8008440:	f107 0114 	add.w	r1, r7, #20
 8008444:	f104 0914 	add.w	r9, r4, #20
 8008448:	f100 0e14 	add.w	lr, r0, #20
 800844c:	f107 0210 	add.w	r2, r7, #16
 8008450:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008454:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008458:	46f2      	mov	sl, lr
 800845a:	2700      	movs	r7, #0
 800845c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008460:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008464:	fa1f f883 	uxth.w	r8, r3
 8008468:	fa17 f78b 	uxtah	r7, r7, fp
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	eba7 0808 	sub.w	r8, r7, r8
 8008472:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008476:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800847a:	fa1f f888 	uxth.w	r8, r8
 800847e:	141f      	asrs	r7, r3, #16
 8008480:	454d      	cmp	r5, r9
 8008482:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008486:	f84a 3b04 	str.w	r3, [sl], #4
 800848a:	d8e7      	bhi.n	800845c <__mdiff+0x7c>
 800848c:	1b2b      	subs	r3, r5, r4
 800848e:	3b15      	subs	r3, #21
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	3304      	adds	r3, #4
 8008496:	3415      	adds	r4, #21
 8008498:	42a5      	cmp	r5, r4
 800849a:	bf38      	it	cc
 800849c:	2304      	movcc	r3, #4
 800849e:	4419      	add	r1, r3
 80084a0:	4473      	add	r3, lr
 80084a2:	469e      	mov	lr, r3
 80084a4:	460d      	mov	r5, r1
 80084a6:	4565      	cmp	r5, ip
 80084a8:	d30e      	bcc.n	80084c8 <__mdiff+0xe8>
 80084aa:	f10c 0203 	add.w	r2, ip, #3
 80084ae:	1a52      	subs	r2, r2, r1
 80084b0:	f022 0203 	bic.w	r2, r2, #3
 80084b4:	3903      	subs	r1, #3
 80084b6:	458c      	cmp	ip, r1
 80084b8:	bf38      	it	cc
 80084ba:	2200      	movcc	r2, #0
 80084bc:	441a      	add	r2, r3
 80084be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80084c2:	b17b      	cbz	r3, 80084e4 <__mdiff+0x104>
 80084c4:	6106      	str	r6, [r0, #16]
 80084c6:	e7a5      	b.n	8008414 <__mdiff+0x34>
 80084c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80084cc:	fa17 f488 	uxtah	r4, r7, r8
 80084d0:	1422      	asrs	r2, r4, #16
 80084d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80084d6:	b2a4      	uxth	r4, r4
 80084d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80084dc:	f84e 4b04 	str.w	r4, [lr], #4
 80084e0:	1417      	asrs	r7, r2, #16
 80084e2:	e7e0      	b.n	80084a6 <__mdiff+0xc6>
 80084e4:	3e01      	subs	r6, #1
 80084e6:	e7ea      	b.n	80084be <__mdiff+0xde>
 80084e8:	08009c05 	.word	0x08009c05
 80084ec:	08009cab 	.word	0x08009cab

080084f0 <__ulp>:
 80084f0:	b082      	sub	sp, #8
 80084f2:	ed8d 0b00 	vstr	d0, [sp]
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	4912      	ldr	r1, [pc, #72]	; (8008544 <__ulp+0x54>)
 80084fa:	4019      	ands	r1, r3
 80084fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008500:	2900      	cmp	r1, #0
 8008502:	dd05      	ble.n	8008510 <__ulp+0x20>
 8008504:	2200      	movs	r2, #0
 8008506:	460b      	mov	r3, r1
 8008508:	ec43 2b10 	vmov	d0, r2, r3
 800850c:	b002      	add	sp, #8
 800850e:	4770      	bx	lr
 8008510:	4249      	negs	r1, r1
 8008512:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008516:	ea4f 5021 	mov.w	r0, r1, asr #20
 800851a:	f04f 0200 	mov.w	r2, #0
 800851e:	f04f 0300 	mov.w	r3, #0
 8008522:	da04      	bge.n	800852e <__ulp+0x3e>
 8008524:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008528:	fa41 f300 	asr.w	r3, r1, r0
 800852c:	e7ec      	b.n	8008508 <__ulp+0x18>
 800852e:	f1a0 0114 	sub.w	r1, r0, #20
 8008532:	291e      	cmp	r1, #30
 8008534:	bfda      	itte	le
 8008536:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800853a:	fa20 f101 	lsrle.w	r1, r0, r1
 800853e:	2101      	movgt	r1, #1
 8008540:	460a      	mov	r2, r1
 8008542:	e7e1      	b.n	8008508 <__ulp+0x18>
 8008544:	7ff00000 	.word	0x7ff00000

08008548 <__b2d>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	6905      	ldr	r5, [r0, #16]
 800854c:	f100 0714 	add.w	r7, r0, #20
 8008550:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008554:	1f2e      	subs	r6, r5, #4
 8008556:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800855a:	4620      	mov	r0, r4
 800855c:	f7ff fd52 	bl	8008004 <__hi0bits>
 8008560:	f1c0 0320 	rsb	r3, r0, #32
 8008564:	280a      	cmp	r0, #10
 8008566:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80085e4 <__b2d+0x9c>
 800856a:	600b      	str	r3, [r1, #0]
 800856c:	dc14      	bgt.n	8008598 <__b2d+0x50>
 800856e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008572:	fa24 f10e 	lsr.w	r1, r4, lr
 8008576:	42b7      	cmp	r7, r6
 8008578:	ea41 030c 	orr.w	r3, r1, ip
 800857c:	bf34      	ite	cc
 800857e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008582:	2100      	movcs	r1, #0
 8008584:	3015      	adds	r0, #21
 8008586:	fa04 f000 	lsl.w	r0, r4, r0
 800858a:	fa21 f10e 	lsr.w	r1, r1, lr
 800858e:	ea40 0201 	orr.w	r2, r0, r1
 8008592:	ec43 2b10 	vmov	d0, r2, r3
 8008596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008598:	42b7      	cmp	r7, r6
 800859a:	bf3a      	itte	cc
 800859c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80085a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80085a4:	2100      	movcs	r1, #0
 80085a6:	380b      	subs	r0, #11
 80085a8:	d017      	beq.n	80085da <__b2d+0x92>
 80085aa:	f1c0 0c20 	rsb	ip, r0, #32
 80085ae:	fa04 f500 	lsl.w	r5, r4, r0
 80085b2:	42be      	cmp	r6, r7
 80085b4:	fa21 f40c 	lsr.w	r4, r1, ip
 80085b8:	ea45 0504 	orr.w	r5, r5, r4
 80085bc:	bf8c      	ite	hi
 80085be:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80085c2:	2400      	movls	r4, #0
 80085c4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80085c8:	fa01 f000 	lsl.w	r0, r1, r0
 80085cc:	fa24 f40c 	lsr.w	r4, r4, ip
 80085d0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80085d4:	ea40 0204 	orr.w	r2, r0, r4
 80085d8:	e7db      	b.n	8008592 <__b2d+0x4a>
 80085da:	ea44 030c 	orr.w	r3, r4, ip
 80085de:	460a      	mov	r2, r1
 80085e0:	e7d7      	b.n	8008592 <__b2d+0x4a>
 80085e2:	bf00      	nop
 80085e4:	3ff00000 	.word	0x3ff00000

080085e8 <__d2b>:
 80085e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80085ec:	4689      	mov	r9, r1
 80085ee:	2101      	movs	r1, #1
 80085f0:	ec57 6b10 	vmov	r6, r7, d0
 80085f4:	4690      	mov	r8, r2
 80085f6:	f7ff fc0f 	bl	8007e18 <_Balloc>
 80085fa:	4604      	mov	r4, r0
 80085fc:	b930      	cbnz	r0, 800860c <__d2b+0x24>
 80085fe:	4602      	mov	r2, r0
 8008600:	4b25      	ldr	r3, [pc, #148]	; (8008698 <__d2b+0xb0>)
 8008602:	4826      	ldr	r0, [pc, #152]	; (800869c <__d2b+0xb4>)
 8008604:	f240 310a 	movw	r1, #778	; 0x30a
 8008608:	f000 fc52 	bl	8008eb0 <__assert_func>
 800860c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008614:	bb35      	cbnz	r5, 8008664 <__d2b+0x7c>
 8008616:	2e00      	cmp	r6, #0
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	d028      	beq.n	800866e <__d2b+0x86>
 800861c:	4668      	mov	r0, sp
 800861e:	9600      	str	r6, [sp, #0]
 8008620:	f7ff fd10 	bl	8008044 <__lo0bits>
 8008624:	9900      	ldr	r1, [sp, #0]
 8008626:	b300      	cbz	r0, 800866a <__d2b+0x82>
 8008628:	9a01      	ldr	r2, [sp, #4]
 800862a:	f1c0 0320 	rsb	r3, r0, #32
 800862e:	fa02 f303 	lsl.w	r3, r2, r3
 8008632:	430b      	orrs	r3, r1
 8008634:	40c2      	lsrs	r2, r0
 8008636:	6163      	str	r3, [r4, #20]
 8008638:	9201      	str	r2, [sp, #4]
 800863a:	9b01      	ldr	r3, [sp, #4]
 800863c:	61a3      	str	r3, [r4, #24]
 800863e:	2b00      	cmp	r3, #0
 8008640:	bf14      	ite	ne
 8008642:	2202      	movne	r2, #2
 8008644:	2201      	moveq	r2, #1
 8008646:	6122      	str	r2, [r4, #16]
 8008648:	b1d5      	cbz	r5, 8008680 <__d2b+0x98>
 800864a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800864e:	4405      	add	r5, r0
 8008650:	f8c9 5000 	str.w	r5, [r9]
 8008654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008658:	f8c8 0000 	str.w	r0, [r8]
 800865c:	4620      	mov	r0, r4
 800865e:	b003      	add	sp, #12
 8008660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008668:	e7d5      	b.n	8008616 <__d2b+0x2e>
 800866a:	6161      	str	r1, [r4, #20]
 800866c:	e7e5      	b.n	800863a <__d2b+0x52>
 800866e:	a801      	add	r0, sp, #4
 8008670:	f7ff fce8 	bl	8008044 <__lo0bits>
 8008674:	9b01      	ldr	r3, [sp, #4]
 8008676:	6163      	str	r3, [r4, #20]
 8008678:	2201      	movs	r2, #1
 800867a:	6122      	str	r2, [r4, #16]
 800867c:	3020      	adds	r0, #32
 800867e:	e7e3      	b.n	8008648 <__d2b+0x60>
 8008680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008688:	f8c9 0000 	str.w	r0, [r9]
 800868c:	6918      	ldr	r0, [r3, #16]
 800868e:	f7ff fcb9 	bl	8008004 <__hi0bits>
 8008692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008696:	e7df      	b.n	8008658 <__d2b+0x70>
 8008698:	08009c05 	.word	0x08009c05
 800869c:	08009cab 	.word	0x08009cab

080086a0 <__ratio>:
 80086a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	4688      	mov	r8, r1
 80086a6:	4669      	mov	r1, sp
 80086a8:	4681      	mov	r9, r0
 80086aa:	f7ff ff4d 	bl	8008548 <__b2d>
 80086ae:	a901      	add	r1, sp, #4
 80086b0:	4640      	mov	r0, r8
 80086b2:	ec55 4b10 	vmov	r4, r5, d0
 80086b6:	f7ff ff47 	bl	8008548 <__b2d>
 80086ba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086be:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80086c2:	eba3 0c02 	sub.w	ip, r3, r2
 80086c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80086ca:	1a9b      	subs	r3, r3, r2
 80086cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80086d0:	ec51 0b10 	vmov	r0, r1, d0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bfd6      	itet	le
 80086d8:	460a      	movle	r2, r1
 80086da:	462a      	movgt	r2, r5
 80086dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80086e0:	468b      	mov	fp, r1
 80086e2:	462f      	mov	r7, r5
 80086e4:	bfd4      	ite	le
 80086e6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80086ea:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80086ee:	4620      	mov	r0, r4
 80086f0:	ee10 2a10 	vmov	r2, s0
 80086f4:	465b      	mov	r3, fp
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f8 f8a8 	bl	800084c <__aeabi_ddiv>
 80086fc:	ec41 0b10 	vmov	d0, r0, r1
 8008700:	b003      	add	sp, #12
 8008702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008706 <__copybits>:
 8008706:	3901      	subs	r1, #1
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	1149      	asrs	r1, r1, #5
 800870c:	6914      	ldr	r4, [r2, #16]
 800870e:	3101      	adds	r1, #1
 8008710:	f102 0314 	add.w	r3, r2, #20
 8008714:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008718:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800871c:	1f05      	subs	r5, r0, #4
 800871e:	42a3      	cmp	r3, r4
 8008720:	d30c      	bcc.n	800873c <__copybits+0x36>
 8008722:	1aa3      	subs	r3, r4, r2
 8008724:	3b11      	subs	r3, #17
 8008726:	f023 0303 	bic.w	r3, r3, #3
 800872a:	3211      	adds	r2, #17
 800872c:	42a2      	cmp	r2, r4
 800872e:	bf88      	it	hi
 8008730:	2300      	movhi	r3, #0
 8008732:	4418      	add	r0, r3
 8008734:	2300      	movs	r3, #0
 8008736:	4288      	cmp	r0, r1
 8008738:	d305      	bcc.n	8008746 <__copybits+0x40>
 800873a:	bd70      	pop	{r4, r5, r6, pc}
 800873c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008740:	f845 6f04 	str.w	r6, [r5, #4]!
 8008744:	e7eb      	b.n	800871e <__copybits+0x18>
 8008746:	f840 3b04 	str.w	r3, [r0], #4
 800874a:	e7f4      	b.n	8008736 <__copybits+0x30>

0800874c <__any_on>:
 800874c:	f100 0214 	add.w	r2, r0, #20
 8008750:	6900      	ldr	r0, [r0, #16]
 8008752:	114b      	asrs	r3, r1, #5
 8008754:	4298      	cmp	r0, r3
 8008756:	b510      	push	{r4, lr}
 8008758:	db11      	blt.n	800877e <__any_on+0x32>
 800875a:	dd0a      	ble.n	8008772 <__any_on+0x26>
 800875c:	f011 011f 	ands.w	r1, r1, #31
 8008760:	d007      	beq.n	8008772 <__any_on+0x26>
 8008762:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008766:	fa24 f001 	lsr.w	r0, r4, r1
 800876a:	fa00 f101 	lsl.w	r1, r0, r1
 800876e:	428c      	cmp	r4, r1
 8008770:	d10b      	bne.n	800878a <__any_on+0x3e>
 8008772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008776:	4293      	cmp	r3, r2
 8008778:	d803      	bhi.n	8008782 <__any_on+0x36>
 800877a:	2000      	movs	r0, #0
 800877c:	bd10      	pop	{r4, pc}
 800877e:	4603      	mov	r3, r0
 8008780:	e7f7      	b.n	8008772 <__any_on+0x26>
 8008782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008786:	2900      	cmp	r1, #0
 8008788:	d0f5      	beq.n	8008776 <__any_on+0x2a>
 800878a:	2001      	movs	r0, #1
 800878c:	e7f6      	b.n	800877c <__any_on+0x30>

0800878e <_calloc_r>:
 800878e:	b513      	push	{r0, r1, r4, lr}
 8008790:	434a      	muls	r2, r1
 8008792:	4611      	mov	r1, r2
 8008794:	9201      	str	r2, [sp, #4]
 8008796:	f000 f809 	bl	80087ac <_malloc_r>
 800879a:	4604      	mov	r4, r0
 800879c:	b118      	cbz	r0, 80087a6 <_calloc_r+0x18>
 800879e:	9a01      	ldr	r2, [sp, #4]
 80087a0:	2100      	movs	r1, #0
 80087a2:	f7fe f90d 	bl	80069c0 <memset>
 80087a6:	4620      	mov	r0, r4
 80087a8:	b002      	add	sp, #8
 80087aa:	bd10      	pop	{r4, pc}

080087ac <_malloc_r>:
 80087ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ae:	1ccd      	adds	r5, r1, #3
 80087b0:	f025 0503 	bic.w	r5, r5, #3
 80087b4:	3508      	adds	r5, #8
 80087b6:	2d0c      	cmp	r5, #12
 80087b8:	bf38      	it	cc
 80087ba:	250c      	movcc	r5, #12
 80087bc:	2d00      	cmp	r5, #0
 80087be:	4606      	mov	r6, r0
 80087c0:	db01      	blt.n	80087c6 <_malloc_r+0x1a>
 80087c2:	42a9      	cmp	r1, r5
 80087c4:	d903      	bls.n	80087ce <_malloc_r+0x22>
 80087c6:	230c      	movs	r3, #12
 80087c8:	6033      	str	r3, [r6, #0]
 80087ca:	2000      	movs	r0, #0
 80087cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ce:	f000 fbc1 	bl	8008f54 <__malloc_lock>
 80087d2:	4921      	ldr	r1, [pc, #132]	; (8008858 <_malloc_r+0xac>)
 80087d4:	680a      	ldr	r2, [r1, #0]
 80087d6:	4614      	mov	r4, r2
 80087d8:	b99c      	cbnz	r4, 8008802 <_malloc_r+0x56>
 80087da:	4f20      	ldr	r7, [pc, #128]	; (800885c <_malloc_r+0xb0>)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	b923      	cbnz	r3, 80087ea <_malloc_r+0x3e>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4630      	mov	r0, r6
 80087e4:	f000 fb34 	bl	8008e50 <_sbrk_r>
 80087e8:	6038      	str	r0, [r7, #0]
 80087ea:	4629      	mov	r1, r5
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 fb2f 	bl	8008e50 <_sbrk_r>
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	d123      	bne.n	800883e <_malloc_r+0x92>
 80087f6:	230c      	movs	r3, #12
 80087f8:	6033      	str	r3, [r6, #0]
 80087fa:	4630      	mov	r0, r6
 80087fc:	f000 fbb0 	bl	8008f60 <__malloc_unlock>
 8008800:	e7e3      	b.n	80087ca <_malloc_r+0x1e>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	1b5b      	subs	r3, r3, r5
 8008806:	d417      	bmi.n	8008838 <_malloc_r+0x8c>
 8008808:	2b0b      	cmp	r3, #11
 800880a:	d903      	bls.n	8008814 <_malloc_r+0x68>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	441c      	add	r4, r3
 8008810:	6025      	str	r5, [r4, #0]
 8008812:	e004      	b.n	800881e <_malloc_r+0x72>
 8008814:	6863      	ldr	r3, [r4, #4]
 8008816:	42a2      	cmp	r2, r4
 8008818:	bf0c      	ite	eq
 800881a:	600b      	streq	r3, [r1, #0]
 800881c:	6053      	strne	r3, [r2, #4]
 800881e:	4630      	mov	r0, r6
 8008820:	f000 fb9e 	bl	8008f60 <__malloc_unlock>
 8008824:	f104 000b 	add.w	r0, r4, #11
 8008828:	1d23      	adds	r3, r4, #4
 800882a:	f020 0007 	bic.w	r0, r0, #7
 800882e:	1ac2      	subs	r2, r0, r3
 8008830:	d0cc      	beq.n	80087cc <_malloc_r+0x20>
 8008832:	1a1b      	subs	r3, r3, r0
 8008834:	50a3      	str	r3, [r4, r2]
 8008836:	e7c9      	b.n	80087cc <_malloc_r+0x20>
 8008838:	4622      	mov	r2, r4
 800883a:	6864      	ldr	r4, [r4, #4]
 800883c:	e7cc      	b.n	80087d8 <_malloc_r+0x2c>
 800883e:	1cc4      	adds	r4, r0, #3
 8008840:	f024 0403 	bic.w	r4, r4, #3
 8008844:	42a0      	cmp	r0, r4
 8008846:	d0e3      	beq.n	8008810 <_malloc_r+0x64>
 8008848:	1a21      	subs	r1, r4, r0
 800884a:	4630      	mov	r0, r6
 800884c:	f000 fb00 	bl	8008e50 <_sbrk_r>
 8008850:	3001      	adds	r0, #1
 8008852:	d1dd      	bne.n	8008810 <_malloc_r+0x64>
 8008854:	e7cf      	b.n	80087f6 <_malloc_r+0x4a>
 8008856:	bf00      	nop
 8008858:	2000020c 	.word	0x2000020c
 800885c:	20000210 	.word	0x20000210

08008860 <__ssputs_r>:
 8008860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	688e      	ldr	r6, [r1, #8]
 8008866:	429e      	cmp	r6, r3
 8008868:	4682      	mov	sl, r0
 800886a:	460c      	mov	r4, r1
 800886c:	4690      	mov	r8, r2
 800886e:	461f      	mov	r7, r3
 8008870:	d838      	bhi.n	80088e4 <__ssputs_r+0x84>
 8008872:	898a      	ldrh	r2, [r1, #12]
 8008874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008878:	d032      	beq.n	80088e0 <__ssputs_r+0x80>
 800887a:	6825      	ldr	r5, [r4, #0]
 800887c:	6909      	ldr	r1, [r1, #16]
 800887e:	eba5 0901 	sub.w	r9, r5, r1
 8008882:	6965      	ldr	r5, [r4, #20]
 8008884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800888c:	3301      	adds	r3, #1
 800888e:	444b      	add	r3, r9
 8008890:	106d      	asrs	r5, r5, #1
 8008892:	429d      	cmp	r5, r3
 8008894:	bf38      	it	cc
 8008896:	461d      	movcc	r5, r3
 8008898:	0553      	lsls	r3, r2, #21
 800889a:	d531      	bpl.n	8008900 <__ssputs_r+0xa0>
 800889c:	4629      	mov	r1, r5
 800889e:	f7ff ff85 	bl	80087ac <_malloc_r>
 80088a2:	4606      	mov	r6, r0
 80088a4:	b950      	cbnz	r0, 80088bc <__ssputs_r+0x5c>
 80088a6:	230c      	movs	r3, #12
 80088a8:	f8ca 3000 	str.w	r3, [sl]
 80088ac:	89a3      	ldrh	r3, [r4, #12]
 80088ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088bc:	6921      	ldr	r1, [r4, #16]
 80088be:	464a      	mov	r2, r9
 80088c0:	f7ff fa9c 	bl	8007dfc <memcpy>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80088ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	6126      	str	r6, [r4, #16]
 80088d2:	6165      	str	r5, [r4, #20]
 80088d4:	444e      	add	r6, r9
 80088d6:	eba5 0509 	sub.w	r5, r5, r9
 80088da:	6026      	str	r6, [r4, #0]
 80088dc:	60a5      	str	r5, [r4, #8]
 80088de:	463e      	mov	r6, r7
 80088e0:	42be      	cmp	r6, r7
 80088e2:	d900      	bls.n	80088e6 <__ssputs_r+0x86>
 80088e4:	463e      	mov	r6, r7
 80088e6:	4632      	mov	r2, r6
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	4641      	mov	r1, r8
 80088ec:	f000 fb18 	bl	8008f20 <memmove>
 80088f0:	68a3      	ldr	r3, [r4, #8]
 80088f2:	6822      	ldr	r2, [r4, #0]
 80088f4:	1b9b      	subs	r3, r3, r6
 80088f6:	4432      	add	r2, r6
 80088f8:	60a3      	str	r3, [r4, #8]
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	2000      	movs	r0, #0
 80088fe:	e7db      	b.n	80088b8 <__ssputs_r+0x58>
 8008900:	462a      	mov	r2, r5
 8008902:	f000 fb83 	bl	800900c <_realloc_r>
 8008906:	4606      	mov	r6, r0
 8008908:	2800      	cmp	r0, #0
 800890a:	d1e1      	bne.n	80088d0 <__ssputs_r+0x70>
 800890c:	6921      	ldr	r1, [r4, #16]
 800890e:	4650      	mov	r0, sl
 8008910:	f000 fb2c 	bl	8008f6c <_free_r>
 8008914:	e7c7      	b.n	80088a6 <__ssputs_r+0x46>
	...

08008918 <_svfiprintf_r>:
 8008918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800891c:	4698      	mov	r8, r3
 800891e:	898b      	ldrh	r3, [r1, #12]
 8008920:	061b      	lsls	r3, r3, #24
 8008922:	b09d      	sub	sp, #116	; 0x74
 8008924:	4607      	mov	r7, r0
 8008926:	460d      	mov	r5, r1
 8008928:	4614      	mov	r4, r2
 800892a:	d50e      	bpl.n	800894a <_svfiprintf_r+0x32>
 800892c:	690b      	ldr	r3, [r1, #16]
 800892e:	b963      	cbnz	r3, 800894a <_svfiprintf_r+0x32>
 8008930:	2140      	movs	r1, #64	; 0x40
 8008932:	f7ff ff3b 	bl	80087ac <_malloc_r>
 8008936:	6028      	str	r0, [r5, #0]
 8008938:	6128      	str	r0, [r5, #16]
 800893a:	b920      	cbnz	r0, 8008946 <_svfiprintf_r+0x2e>
 800893c:	230c      	movs	r3, #12
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	e0d1      	b.n	8008aea <_svfiprintf_r+0x1d2>
 8008946:	2340      	movs	r3, #64	; 0x40
 8008948:	616b      	str	r3, [r5, #20]
 800894a:	2300      	movs	r3, #0
 800894c:	9309      	str	r3, [sp, #36]	; 0x24
 800894e:	2320      	movs	r3, #32
 8008950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008954:	f8cd 800c 	str.w	r8, [sp, #12]
 8008958:	2330      	movs	r3, #48	; 0x30
 800895a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b04 <_svfiprintf_r+0x1ec>
 800895e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008962:	f04f 0901 	mov.w	r9, #1
 8008966:	4623      	mov	r3, r4
 8008968:	469a      	mov	sl, r3
 800896a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800896e:	b10a      	cbz	r2, 8008974 <_svfiprintf_r+0x5c>
 8008970:	2a25      	cmp	r2, #37	; 0x25
 8008972:	d1f9      	bne.n	8008968 <_svfiprintf_r+0x50>
 8008974:	ebba 0b04 	subs.w	fp, sl, r4
 8008978:	d00b      	beq.n	8008992 <_svfiprintf_r+0x7a>
 800897a:	465b      	mov	r3, fp
 800897c:	4622      	mov	r2, r4
 800897e:	4629      	mov	r1, r5
 8008980:	4638      	mov	r0, r7
 8008982:	f7ff ff6d 	bl	8008860 <__ssputs_r>
 8008986:	3001      	adds	r0, #1
 8008988:	f000 80aa 	beq.w	8008ae0 <_svfiprintf_r+0x1c8>
 800898c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800898e:	445a      	add	r2, fp
 8008990:	9209      	str	r2, [sp, #36]	; 0x24
 8008992:	f89a 3000 	ldrb.w	r3, [sl]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 80a2 	beq.w	8008ae0 <_svfiprintf_r+0x1c8>
 800899c:	2300      	movs	r3, #0
 800899e:	f04f 32ff 	mov.w	r2, #4294967295
 80089a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a6:	f10a 0a01 	add.w	sl, sl, #1
 80089aa:	9304      	str	r3, [sp, #16]
 80089ac:	9307      	str	r3, [sp, #28]
 80089ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80089b2:	931a      	str	r3, [sp, #104]	; 0x68
 80089b4:	4654      	mov	r4, sl
 80089b6:	2205      	movs	r2, #5
 80089b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089bc:	4851      	ldr	r0, [pc, #324]	; (8008b04 <_svfiprintf_r+0x1ec>)
 80089be:	f7f7 fc0f 	bl	80001e0 <memchr>
 80089c2:	9a04      	ldr	r2, [sp, #16]
 80089c4:	b9d8      	cbnz	r0, 80089fe <_svfiprintf_r+0xe6>
 80089c6:	06d0      	lsls	r0, r2, #27
 80089c8:	bf44      	itt	mi
 80089ca:	2320      	movmi	r3, #32
 80089cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089d0:	0711      	lsls	r1, r2, #28
 80089d2:	bf44      	itt	mi
 80089d4:	232b      	movmi	r3, #43	; 0x2b
 80089d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089da:	f89a 3000 	ldrb.w	r3, [sl]
 80089de:	2b2a      	cmp	r3, #42	; 0x2a
 80089e0:	d015      	beq.n	8008a0e <_svfiprintf_r+0xf6>
 80089e2:	9a07      	ldr	r2, [sp, #28]
 80089e4:	4654      	mov	r4, sl
 80089e6:	2000      	movs	r0, #0
 80089e8:	f04f 0c0a 	mov.w	ip, #10
 80089ec:	4621      	mov	r1, r4
 80089ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089f2:	3b30      	subs	r3, #48	; 0x30
 80089f4:	2b09      	cmp	r3, #9
 80089f6:	d94e      	bls.n	8008a96 <_svfiprintf_r+0x17e>
 80089f8:	b1b0      	cbz	r0, 8008a28 <_svfiprintf_r+0x110>
 80089fa:	9207      	str	r2, [sp, #28]
 80089fc:	e014      	b.n	8008a28 <_svfiprintf_r+0x110>
 80089fe:	eba0 0308 	sub.w	r3, r0, r8
 8008a02:	fa09 f303 	lsl.w	r3, r9, r3
 8008a06:	4313      	orrs	r3, r2
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	46a2      	mov	sl, r4
 8008a0c:	e7d2      	b.n	80089b4 <_svfiprintf_r+0x9c>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	1d19      	adds	r1, r3, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	9103      	str	r1, [sp, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	bfbb      	ittet	lt
 8008a1a:	425b      	neglt	r3, r3
 8008a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a20:	9307      	strge	r3, [sp, #28]
 8008a22:	9307      	strlt	r3, [sp, #28]
 8008a24:	bfb8      	it	lt
 8008a26:	9204      	strlt	r2, [sp, #16]
 8008a28:	7823      	ldrb	r3, [r4, #0]
 8008a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008a2c:	d10c      	bne.n	8008a48 <_svfiprintf_r+0x130>
 8008a2e:	7863      	ldrb	r3, [r4, #1]
 8008a30:	2b2a      	cmp	r3, #42	; 0x2a
 8008a32:	d135      	bne.n	8008aa0 <_svfiprintf_r+0x188>
 8008a34:	9b03      	ldr	r3, [sp, #12]
 8008a36:	1d1a      	adds	r2, r3, #4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	9203      	str	r2, [sp, #12]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bfb8      	it	lt
 8008a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a44:	3402      	adds	r4, #2
 8008a46:	9305      	str	r3, [sp, #20]
 8008a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b14 <_svfiprintf_r+0x1fc>
 8008a4c:	7821      	ldrb	r1, [r4, #0]
 8008a4e:	2203      	movs	r2, #3
 8008a50:	4650      	mov	r0, sl
 8008a52:	f7f7 fbc5 	bl	80001e0 <memchr>
 8008a56:	b140      	cbz	r0, 8008a6a <_svfiprintf_r+0x152>
 8008a58:	2340      	movs	r3, #64	; 0x40
 8008a5a:	eba0 000a 	sub.w	r0, r0, sl
 8008a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8008a62:	9b04      	ldr	r3, [sp, #16]
 8008a64:	4303      	orrs	r3, r0
 8008a66:	3401      	adds	r4, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6e:	4826      	ldr	r0, [pc, #152]	; (8008b08 <_svfiprintf_r+0x1f0>)
 8008a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a74:	2206      	movs	r2, #6
 8008a76:	f7f7 fbb3 	bl	80001e0 <memchr>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d038      	beq.n	8008af0 <_svfiprintf_r+0x1d8>
 8008a7e:	4b23      	ldr	r3, [pc, #140]	; (8008b0c <_svfiprintf_r+0x1f4>)
 8008a80:	bb1b      	cbnz	r3, 8008aca <_svfiprintf_r+0x1b2>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	3307      	adds	r3, #7
 8008a86:	f023 0307 	bic.w	r3, r3, #7
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	9303      	str	r3, [sp, #12]
 8008a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a90:	4433      	add	r3, r6
 8008a92:	9309      	str	r3, [sp, #36]	; 0x24
 8008a94:	e767      	b.n	8008966 <_svfiprintf_r+0x4e>
 8008a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	e7a5      	b.n	80089ec <_svfiprintf_r+0xd4>
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	3401      	adds	r4, #1
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	f04f 0c0a 	mov.w	ip, #10
 8008aac:	4620      	mov	r0, r4
 8008aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ab2:	3a30      	subs	r2, #48	; 0x30
 8008ab4:	2a09      	cmp	r2, #9
 8008ab6:	d903      	bls.n	8008ac0 <_svfiprintf_r+0x1a8>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d0c5      	beq.n	8008a48 <_svfiprintf_r+0x130>
 8008abc:	9105      	str	r1, [sp, #20]
 8008abe:	e7c3      	b.n	8008a48 <_svfiprintf_r+0x130>
 8008ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e7f0      	b.n	8008aac <_svfiprintf_r+0x194>
 8008aca:	ab03      	add	r3, sp, #12
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <_svfiprintf_r+0x1f8>)
 8008ad2:	a904      	add	r1, sp, #16
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f3af 8000 	nop.w
 8008ada:	1c42      	adds	r2, r0, #1
 8008adc:	4606      	mov	r6, r0
 8008ade:	d1d6      	bne.n	8008a8e <_svfiprintf_r+0x176>
 8008ae0:	89ab      	ldrh	r3, [r5, #12]
 8008ae2:	065b      	lsls	r3, r3, #25
 8008ae4:	f53f af2c 	bmi.w	8008940 <_svfiprintf_r+0x28>
 8008ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aea:	b01d      	add	sp, #116	; 0x74
 8008aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af0:	ab03      	add	r3, sp, #12
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	462a      	mov	r2, r5
 8008af6:	4b06      	ldr	r3, [pc, #24]	; (8008b10 <_svfiprintf_r+0x1f8>)
 8008af8:	a904      	add	r1, sp, #16
 8008afa:	4638      	mov	r0, r7
 8008afc:	f000 f87a 	bl	8008bf4 <_printf_i>
 8008b00:	e7eb      	b.n	8008ada <_svfiprintf_r+0x1c2>
 8008b02:	bf00      	nop
 8008b04:	08009e0c 	.word	0x08009e0c
 8008b08:	08009e16 	.word	0x08009e16
 8008b0c:	00000000 	.word	0x00000000
 8008b10:	08008861 	.word	0x08008861
 8008b14:	08009e12 	.word	0x08009e12

08008b18 <_printf_common>:
 8008b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b1c:	4616      	mov	r6, r2
 8008b1e:	4699      	mov	r9, r3
 8008b20:	688a      	ldr	r2, [r1, #8]
 8008b22:	690b      	ldr	r3, [r1, #16]
 8008b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	bfb8      	it	lt
 8008b2c:	4613      	movlt	r3, r2
 8008b2e:	6033      	str	r3, [r6, #0]
 8008b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b34:	4607      	mov	r7, r0
 8008b36:	460c      	mov	r4, r1
 8008b38:	b10a      	cbz	r2, 8008b3e <_printf_common+0x26>
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	6033      	str	r3, [r6, #0]
 8008b3e:	6823      	ldr	r3, [r4, #0]
 8008b40:	0699      	lsls	r1, r3, #26
 8008b42:	bf42      	ittt	mi
 8008b44:	6833      	ldrmi	r3, [r6, #0]
 8008b46:	3302      	addmi	r3, #2
 8008b48:	6033      	strmi	r3, [r6, #0]
 8008b4a:	6825      	ldr	r5, [r4, #0]
 8008b4c:	f015 0506 	ands.w	r5, r5, #6
 8008b50:	d106      	bne.n	8008b60 <_printf_common+0x48>
 8008b52:	f104 0a19 	add.w	sl, r4, #25
 8008b56:	68e3      	ldr	r3, [r4, #12]
 8008b58:	6832      	ldr	r2, [r6, #0]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	42ab      	cmp	r3, r5
 8008b5e:	dc26      	bgt.n	8008bae <_printf_common+0x96>
 8008b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b64:	1e13      	subs	r3, r2, #0
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	bf18      	it	ne
 8008b6a:	2301      	movne	r3, #1
 8008b6c:	0692      	lsls	r2, r2, #26
 8008b6e:	d42b      	bmi.n	8008bc8 <_printf_common+0xb0>
 8008b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b74:	4649      	mov	r1, r9
 8008b76:	4638      	mov	r0, r7
 8008b78:	47c0      	blx	r8
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d01e      	beq.n	8008bbc <_printf_common+0xa4>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	68e5      	ldr	r5, [r4, #12]
 8008b82:	6832      	ldr	r2, [r6, #0]
 8008b84:	f003 0306 	and.w	r3, r3, #6
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	bf08      	it	eq
 8008b8c:	1aad      	subeq	r5, r5, r2
 8008b8e:	68a3      	ldr	r3, [r4, #8]
 8008b90:	6922      	ldr	r2, [r4, #16]
 8008b92:	bf0c      	ite	eq
 8008b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b98:	2500      	movne	r5, #0
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	bfc4      	itt	gt
 8008b9e:	1a9b      	subgt	r3, r3, r2
 8008ba0:	18ed      	addgt	r5, r5, r3
 8008ba2:	2600      	movs	r6, #0
 8008ba4:	341a      	adds	r4, #26
 8008ba6:	42b5      	cmp	r5, r6
 8008ba8:	d11a      	bne.n	8008be0 <_printf_common+0xc8>
 8008baa:	2000      	movs	r0, #0
 8008bac:	e008      	b.n	8008bc0 <_printf_common+0xa8>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	47c0      	blx	r8
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d103      	bne.n	8008bc4 <_printf_common+0xac>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	e7c6      	b.n	8008b56 <_printf_common+0x3e>
 8008bc8:	18e1      	adds	r1, r4, r3
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	2030      	movs	r0, #48	; 0x30
 8008bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bd2:	4422      	add	r2, r4
 8008bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bdc:	3302      	adds	r3, #2
 8008bde:	e7c7      	b.n	8008b70 <_printf_common+0x58>
 8008be0:	2301      	movs	r3, #1
 8008be2:	4622      	mov	r2, r4
 8008be4:	4649      	mov	r1, r9
 8008be6:	4638      	mov	r0, r7
 8008be8:	47c0      	blx	r8
 8008bea:	3001      	adds	r0, #1
 8008bec:	d0e6      	beq.n	8008bbc <_printf_common+0xa4>
 8008bee:	3601      	adds	r6, #1
 8008bf0:	e7d9      	b.n	8008ba6 <_printf_common+0x8e>
	...

08008bf4 <_printf_i>:
 8008bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf8:	460c      	mov	r4, r1
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	7e27      	ldrb	r7, [r4, #24]
 8008bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c00:	2f78      	cmp	r7, #120	; 0x78
 8008c02:	4680      	mov	r8, r0
 8008c04:	469a      	mov	sl, r3
 8008c06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c0a:	d807      	bhi.n	8008c1c <_printf_i+0x28>
 8008c0c:	2f62      	cmp	r7, #98	; 0x62
 8008c0e:	d80a      	bhi.n	8008c26 <_printf_i+0x32>
 8008c10:	2f00      	cmp	r7, #0
 8008c12:	f000 80d8 	beq.w	8008dc6 <_printf_i+0x1d2>
 8008c16:	2f58      	cmp	r7, #88	; 0x58
 8008c18:	f000 80a3 	beq.w	8008d62 <_printf_i+0x16e>
 8008c1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c24:	e03a      	b.n	8008c9c <_printf_i+0xa8>
 8008c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c2a:	2b15      	cmp	r3, #21
 8008c2c:	d8f6      	bhi.n	8008c1c <_printf_i+0x28>
 8008c2e:	a001      	add	r0, pc, #4	; (adr r0, 8008c34 <_printf_i+0x40>)
 8008c30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c34:	08008c8d 	.word	0x08008c8d
 8008c38:	08008ca1 	.word	0x08008ca1
 8008c3c:	08008c1d 	.word	0x08008c1d
 8008c40:	08008c1d 	.word	0x08008c1d
 8008c44:	08008c1d 	.word	0x08008c1d
 8008c48:	08008c1d 	.word	0x08008c1d
 8008c4c:	08008ca1 	.word	0x08008ca1
 8008c50:	08008c1d 	.word	0x08008c1d
 8008c54:	08008c1d 	.word	0x08008c1d
 8008c58:	08008c1d 	.word	0x08008c1d
 8008c5c:	08008c1d 	.word	0x08008c1d
 8008c60:	08008dad 	.word	0x08008dad
 8008c64:	08008cd1 	.word	0x08008cd1
 8008c68:	08008d8f 	.word	0x08008d8f
 8008c6c:	08008c1d 	.word	0x08008c1d
 8008c70:	08008c1d 	.word	0x08008c1d
 8008c74:	08008dcf 	.word	0x08008dcf
 8008c78:	08008c1d 	.word	0x08008c1d
 8008c7c:	08008cd1 	.word	0x08008cd1
 8008c80:	08008c1d 	.word	0x08008c1d
 8008c84:	08008c1d 	.word	0x08008c1d
 8008c88:	08008d97 	.word	0x08008d97
 8008c8c:	680b      	ldr	r3, [r1, #0]
 8008c8e:	1d1a      	adds	r2, r3, #4
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	600a      	str	r2, [r1, #0]
 8008c94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e0a3      	b.n	8008de8 <_printf_i+0x1f4>
 8008ca0:	6825      	ldr	r5, [r4, #0]
 8008ca2:	6808      	ldr	r0, [r1, #0]
 8008ca4:	062e      	lsls	r6, r5, #24
 8008ca6:	f100 0304 	add.w	r3, r0, #4
 8008caa:	d50a      	bpl.n	8008cc2 <_printf_i+0xce>
 8008cac:	6805      	ldr	r5, [r0, #0]
 8008cae:	600b      	str	r3, [r1, #0]
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	da03      	bge.n	8008cbc <_printf_i+0xc8>
 8008cb4:	232d      	movs	r3, #45	; 0x2d
 8008cb6:	426d      	negs	r5, r5
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cbc:	485e      	ldr	r0, [pc, #376]	; (8008e38 <_printf_i+0x244>)
 8008cbe:	230a      	movs	r3, #10
 8008cc0:	e019      	b.n	8008cf6 <_printf_i+0x102>
 8008cc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008cc6:	6805      	ldr	r5, [r0, #0]
 8008cc8:	600b      	str	r3, [r1, #0]
 8008cca:	bf18      	it	ne
 8008ccc:	b22d      	sxthne	r5, r5
 8008cce:	e7ef      	b.n	8008cb0 <_printf_i+0xbc>
 8008cd0:	680b      	ldr	r3, [r1, #0]
 8008cd2:	6825      	ldr	r5, [r4, #0]
 8008cd4:	1d18      	adds	r0, r3, #4
 8008cd6:	6008      	str	r0, [r1, #0]
 8008cd8:	0628      	lsls	r0, r5, #24
 8008cda:	d501      	bpl.n	8008ce0 <_printf_i+0xec>
 8008cdc:	681d      	ldr	r5, [r3, #0]
 8008cde:	e002      	b.n	8008ce6 <_printf_i+0xf2>
 8008ce0:	0669      	lsls	r1, r5, #25
 8008ce2:	d5fb      	bpl.n	8008cdc <_printf_i+0xe8>
 8008ce4:	881d      	ldrh	r5, [r3, #0]
 8008ce6:	4854      	ldr	r0, [pc, #336]	; (8008e38 <_printf_i+0x244>)
 8008ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8008cea:	bf0c      	ite	eq
 8008cec:	2308      	moveq	r3, #8
 8008cee:	230a      	movne	r3, #10
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf6:	6866      	ldr	r6, [r4, #4]
 8008cf8:	60a6      	str	r6, [r4, #8]
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	bfa2      	ittt	ge
 8008cfe:	6821      	ldrge	r1, [r4, #0]
 8008d00:	f021 0104 	bicge.w	r1, r1, #4
 8008d04:	6021      	strge	r1, [r4, #0]
 8008d06:	b90d      	cbnz	r5, 8008d0c <_printf_i+0x118>
 8008d08:	2e00      	cmp	r6, #0
 8008d0a:	d04d      	beq.n	8008da8 <_printf_i+0x1b4>
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d12:	fb03 5711 	mls	r7, r3, r1, r5
 8008d16:	5dc7      	ldrb	r7, [r0, r7]
 8008d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d1c:	462f      	mov	r7, r5
 8008d1e:	42bb      	cmp	r3, r7
 8008d20:	460d      	mov	r5, r1
 8008d22:	d9f4      	bls.n	8008d0e <_printf_i+0x11a>
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d10b      	bne.n	8008d40 <_printf_i+0x14c>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	07df      	lsls	r7, r3, #31
 8008d2c:	d508      	bpl.n	8008d40 <_printf_i+0x14c>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	6861      	ldr	r1, [r4, #4]
 8008d32:	4299      	cmp	r1, r3
 8008d34:	bfde      	ittt	le
 8008d36:	2330      	movle	r3, #48	; 0x30
 8008d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d40:	1b92      	subs	r2, r2, r6
 8008d42:	6122      	str	r2, [r4, #16]
 8008d44:	f8cd a000 	str.w	sl, [sp]
 8008d48:	464b      	mov	r3, r9
 8008d4a:	aa03      	add	r2, sp, #12
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7ff fee2 	bl	8008b18 <_printf_common>
 8008d54:	3001      	adds	r0, #1
 8008d56:	d14c      	bne.n	8008df2 <_printf_i+0x1fe>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	b004      	add	sp, #16
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	4835      	ldr	r0, [pc, #212]	; (8008e38 <_printf_i+0x244>)
 8008d64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	680e      	ldr	r6, [r1, #0]
 8008d6c:	061f      	lsls	r7, r3, #24
 8008d6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d72:	600e      	str	r6, [r1, #0]
 8008d74:	d514      	bpl.n	8008da0 <_printf_i+0x1ac>
 8008d76:	07d9      	lsls	r1, r3, #31
 8008d78:	bf44      	itt	mi
 8008d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7e:	6023      	strmi	r3, [r4, #0]
 8008d80:	b91d      	cbnz	r5, 8008d8a <_printf_i+0x196>
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	f023 0320 	bic.w	r3, r3, #32
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	2310      	movs	r3, #16
 8008d8c:	e7b0      	b.n	8008cf0 <_printf_i+0xfc>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	f043 0320 	orr.w	r3, r3, #32
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	2378      	movs	r3, #120	; 0x78
 8008d98:	4828      	ldr	r0, [pc, #160]	; (8008e3c <_printf_i+0x248>)
 8008d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9e:	e7e3      	b.n	8008d68 <_printf_i+0x174>
 8008da0:	065e      	lsls	r6, r3, #25
 8008da2:	bf48      	it	mi
 8008da4:	b2ad      	uxthmi	r5, r5
 8008da6:	e7e6      	b.n	8008d76 <_printf_i+0x182>
 8008da8:	4616      	mov	r6, r2
 8008daa:	e7bb      	b.n	8008d24 <_printf_i+0x130>
 8008dac:	680b      	ldr	r3, [r1, #0]
 8008dae:	6826      	ldr	r6, [r4, #0]
 8008db0:	6960      	ldr	r0, [r4, #20]
 8008db2:	1d1d      	adds	r5, r3, #4
 8008db4:	600d      	str	r5, [r1, #0]
 8008db6:	0635      	lsls	r5, r6, #24
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	d501      	bpl.n	8008dc0 <_printf_i+0x1cc>
 8008dbc:	6018      	str	r0, [r3, #0]
 8008dbe:	e002      	b.n	8008dc6 <_printf_i+0x1d2>
 8008dc0:	0671      	lsls	r1, r6, #25
 8008dc2:	d5fb      	bpl.n	8008dbc <_printf_i+0x1c8>
 8008dc4:	8018      	strh	r0, [r3, #0]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	6123      	str	r3, [r4, #16]
 8008dca:	4616      	mov	r6, r2
 8008dcc:	e7ba      	b.n	8008d44 <_printf_i+0x150>
 8008dce:	680b      	ldr	r3, [r1, #0]
 8008dd0:	1d1a      	adds	r2, r3, #4
 8008dd2:	600a      	str	r2, [r1, #0]
 8008dd4:	681e      	ldr	r6, [r3, #0]
 8008dd6:	6862      	ldr	r2, [r4, #4]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4630      	mov	r0, r6
 8008ddc:	f7f7 fa00 	bl	80001e0 <memchr>
 8008de0:	b108      	cbz	r0, 8008de6 <_printf_i+0x1f2>
 8008de2:	1b80      	subs	r0, r0, r6
 8008de4:	6060      	str	r0, [r4, #4]
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	2300      	movs	r3, #0
 8008dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008df0:	e7a8      	b.n	8008d44 <_printf_i+0x150>
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	4632      	mov	r2, r6
 8008df6:	4649      	mov	r1, r9
 8008df8:	4640      	mov	r0, r8
 8008dfa:	47d0      	blx	sl
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d0ab      	beq.n	8008d58 <_printf_i+0x164>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	079b      	lsls	r3, r3, #30
 8008e04:	d413      	bmi.n	8008e2e <_printf_i+0x23a>
 8008e06:	68e0      	ldr	r0, [r4, #12]
 8008e08:	9b03      	ldr	r3, [sp, #12]
 8008e0a:	4298      	cmp	r0, r3
 8008e0c:	bfb8      	it	lt
 8008e0e:	4618      	movlt	r0, r3
 8008e10:	e7a4      	b.n	8008d5c <_printf_i+0x168>
 8008e12:	2301      	movs	r3, #1
 8008e14:	4632      	mov	r2, r6
 8008e16:	4649      	mov	r1, r9
 8008e18:	4640      	mov	r0, r8
 8008e1a:	47d0      	blx	sl
 8008e1c:	3001      	adds	r0, #1
 8008e1e:	d09b      	beq.n	8008d58 <_printf_i+0x164>
 8008e20:	3501      	adds	r5, #1
 8008e22:	68e3      	ldr	r3, [r4, #12]
 8008e24:	9903      	ldr	r1, [sp, #12]
 8008e26:	1a5b      	subs	r3, r3, r1
 8008e28:	42ab      	cmp	r3, r5
 8008e2a:	dcf2      	bgt.n	8008e12 <_printf_i+0x21e>
 8008e2c:	e7eb      	b.n	8008e06 <_printf_i+0x212>
 8008e2e:	2500      	movs	r5, #0
 8008e30:	f104 0619 	add.w	r6, r4, #25
 8008e34:	e7f5      	b.n	8008e22 <_printf_i+0x22e>
 8008e36:	bf00      	nop
 8008e38:	08009e1d 	.word	0x08009e1d
 8008e3c:	08009e2e 	.word	0x08009e2e

08008e40 <nan>:
 8008e40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008e48 <nan+0x8>
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	00000000 	.word	0x00000000
 8008e4c:	7ff80000 	.word	0x7ff80000

08008e50 <_sbrk_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d06      	ldr	r5, [pc, #24]	; (8008e6c <_sbrk_r+0x1c>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f8 ffba 	bl	8001dd4 <_sbrk>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_sbrk_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_sbrk_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	200003c0 	.word	0x200003c0

08008e70 <strncmp>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	b16a      	cbz	r2, 8008e90 <strncmp+0x20>
 8008e74:	3901      	subs	r1, #1
 8008e76:	1884      	adds	r4, r0, r2
 8008e78:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d103      	bne.n	8008e8c <strncmp+0x1c>
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d001      	beq.n	8008e8c <strncmp+0x1c>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1f5      	bne.n	8008e78 <strncmp+0x8>
 8008e8c:	1a98      	subs	r0, r3, r2
 8008e8e:	bd10      	pop	{r4, pc}
 8008e90:	4610      	mov	r0, r2
 8008e92:	e7fc      	b.n	8008e8e <strncmp+0x1e>

08008e94 <__ascii_wctomb>:
 8008e94:	b149      	cbz	r1, 8008eaa <__ascii_wctomb+0x16>
 8008e96:	2aff      	cmp	r2, #255	; 0xff
 8008e98:	bf85      	ittet	hi
 8008e9a:	238a      	movhi	r3, #138	; 0x8a
 8008e9c:	6003      	strhi	r3, [r0, #0]
 8008e9e:	700a      	strbls	r2, [r1, #0]
 8008ea0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ea4:	bf98      	it	ls
 8008ea6:	2001      	movls	r0, #1
 8008ea8:	4770      	bx	lr
 8008eaa:	4608      	mov	r0, r1
 8008eac:	4770      	bx	lr
	...

08008eb0 <__assert_func>:
 8008eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008eb2:	4614      	mov	r4, r2
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <__assert_func+0x2c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4605      	mov	r5, r0
 8008ebc:	68d8      	ldr	r0, [r3, #12]
 8008ebe:	b14c      	cbz	r4, 8008ed4 <__assert_func+0x24>
 8008ec0:	4b07      	ldr	r3, [pc, #28]	; (8008ee0 <__assert_func+0x30>)
 8008ec2:	9100      	str	r1, [sp, #0]
 8008ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ec8:	4906      	ldr	r1, [pc, #24]	; (8008ee4 <__assert_func+0x34>)
 8008eca:	462b      	mov	r3, r5
 8008ecc:	f000 f80e 	bl	8008eec <fiprintf>
 8008ed0:	f000 fadc 	bl	800948c <abort>
 8008ed4:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <__assert_func+0x38>)
 8008ed6:	461c      	mov	r4, r3
 8008ed8:	e7f3      	b.n	8008ec2 <__assert_func+0x12>
 8008eda:	bf00      	nop
 8008edc:	20000010 	.word	0x20000010
 8008ee0:	08009e3f 	.word	0x08009e3f
 8008ee4:	08009e4c 	.word	0x08009e4c
 8008ee8:	08009e7a 	.word	0x08009e7a

08008eec <fiprintf>:
 8008eec:	b40e      	push	{r1, r2, r3}
 8008eee:	b503      	push	{r0, r1, lr}
 8008ef0:	4601      	mov	r1, r0
 8008ef2:	ab03      	add	r3, sp, #12
 8008ef4:	4805      	ldr	r0, [pc, #20]	; (8008f0c <fiprintf+0x20>)
 8008ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	f000 f8d5 	bl	80090ac <_vfiprintf_r>
 8008f02:	b002      	add	sp, #8
 8008f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f08:	b003      	add	sp, #12
 8008f0a:	4770      	bx	lr
 8008f0c:	20000010 	.word	0x20000010

08008f10 <malloc>:
 8008f10:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <malloc+0xc>)
 8008f12:	4601      	mov	r1, r0
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f7ff bc49 	b.w	80087ac <_malloc_r>
 8008f1a:	bf00      	nop
 8008f1c:	20000010 	.word	0x20000010

08008f20 <memmove>:
 8008f20:	4288      	cmp	r0, r1
 8008f22:	b510      	push	{r4, lr}
 8008f24:	eb01 0402 	add.w	r4, r1, r2
 8008f28:	d902      	bls.n	8008f30 <memmove+0x10>
 8008f2a:	4284      	cmp	r4, r0
 8008f2c:	4623      	mov	r3, r4
 8008f2e:	d807      	bhi.n	8008f40 <memmove+0x20>
 8008f30:	1e43      	subs	r3, r0, #1
 8008f32:	42a1      	cmp	r1, r4
 8008f34:	d008      	beq.n	8008f48 <memmove+0x28>
 8008f36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f3e:	e7f8      	b.n	8008f32 <memmove+0x12>
 8008f40:	4402      	add	r2, r0
 8008f42:	4601      	mov	r1, r0
 8008f44:	428a      	cmp	r2, r1
 8008f46:	d100      	bne.n	8008f4a <memmove+0x2a>
 8008f48:	bd10      	pop	{r4, pc}
 8008f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f52:	e7f7      	b.n	8008f44 <memmove+0x24>

08008f54 <__malloc_lock>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__malloc_lock+0x8>)
 8008f56:	f000 bc59 	b.w	800980c <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200003c8 	.word	0x200003c8

08008f60 <__malloc_unlock>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__malloc_unlock+0x8>)
 8008f62:	f000 bc54 	b.w	800980e <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	200003c8 	.word	0x200003c8

08008f6c <_free_r>:
 8008f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f6e:	2900      	cmp	r1, #0
 8008f70:	d048      	beq.n	8009004 <_free_r+0x98>
 8008f72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f76:	9001      	str	r0, [sp, #4]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f7e:	bfb8      	it	lt
 8008f80:	18e4      	addlt	r4, r4, r3
 8008f82:	f7ff ffe7 	bl	8008f54 <__malloc_lock>
 8008f86:	4a20      	ldr	r2, [pc, #128]	; (8009008 <_free_r+0x9c>)
 8008f88:	9801      	ldr	r0, [sp, #4]
 8008f8a:	6813      	ldr	r3, [r2, #0]
 8008f8c:	4615      	mov	r5, r2
 8008f8e:	b933      	cbnz	r3, 8008f9e <_free_r+0x32>
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	6014      	str	r4, [r2, #0]
 8008f94:	b003      	add	sp, #12
 8008f96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f9a:	f7ff bfe1 	b.w	8008f60 <__malloc_unlock>
 8008f9e:	42a3      	cmp	r3, r4
 8008fa0:	d90b      	bls.n	8008fba <_free_r+0x4e>
 8008fa2:	6821      	ldr	r1, [r4, #0]
 8008fa4:	1862      	adds	r2, r4, r1
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	bf04      	itt	eq
 8008faa:	681a      	ldreq	r2, [r3, #0]
 8008fac:	685b      	ldreq	r3, [r3, #4]
 8008fae:	6063      	str	r3, [r4, #4]
 8008fb0:	bf04      	itt	eq
 8008fb2:	1852      	addeq	r2, r2, r1
 8008fb4:	6022      	streq	r2, [r4, #0]
 8008fb6:	602c      	str	r4, [r5, #0]
 8008fb8:	e7ec      	b.n	8008f94 <_free_r+0x28>
 8008fba:	461a      	mov	r2, r3
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b10b      	cbz	r3, 8008fc4 <_free_r+0x58>
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	d9fa      	bls.n	8008fba <_free_r+0x4e>
 8008fc4:	6811      	ldr	r1, [r2, #0]
 8008fc6:	1855      	adds	r5, r2, r1
 8008fc8:	42a5      	cmp	r5, r4
 8008fca:	d10b      	bne.n	8008fe4 <_free_r+0x78>
 8008fcc:	6824      	ldr	r4, [r4, #0]
 8008fce:	4421      	add	r1, r4
 8008fd0:	1854      	adds	r4, r2, r1
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	6011      	str	r1, [r2, #0]
 8008fd6:	d1dd      	bne.n	8008f94 <_free_r+0x28>
 8008fd8:	681c      	ldr	r4, [r3, #0]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	6053      	str	r3, [r2, #4]
 8008fde:	4421      	add	r1, r4
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	e7d7      	b.n	8008f94 <_free_r+0x28>
 8008fe4:	d902      	bls.n	8008fec <_free_r+0x80>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	6003      	str	r3, [r0, #0]
 8008fea:	e7d3      	b.n	8008f94 <_free_r+0x28>
 8008fec:	6825      	ldr	r5, [r4, #0]
 8008fee:	1961      	adds	r1, r4, r5
 8008ff0:	428b      	cmp	r3, r1
 8008ff2:	bf04      	itt	eq
 8008ff4:	6819      	ldreq	r1, [r3, #0]
 8008ff6:	685b      	ldreq	r3, [r3, #4]
 8008ff8:	6063      	str	r3, [r4, #4]
 8008ffa:	bf04      	itt	eq
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	6054      	str	r4, [r2, #4]
 8009002:	e7c7      	b.n	8008f94 <_free_r+0x28>
 8009004:	b003      	add	sp, #12
 8009006:	bd30      	pop	{r4, r5, pc}
 8009008:	2000020c 	.word	0x2000020c

0800900c <_realloc_r>:
 800900c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800900e:	4607      	mov	r7, r0
 8009010:	4614      	mov	r4, r2
 8009012:	460e      	mov	r6, r1
 8009014:	b921      	cbnz	r1, 8009020 <_realloc_r+0x14>
 8009016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800901a:	4611      	mov	r1, r2
 800901c:	f7ff bbc6 	b.w	80087ac <_malloc_r>
 8009020:	b922      	cbnz	r2, 800902c <_realloc_r+0x20>
 8009022:	f7ff ffa3 	bl	8008f6c <_free_r>
 8009026:	4625      	mov	r5, r4
 8009028:	4628      	mov	r0, r5
 800902a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800902c:	f000 fc54 	bl	80098d8 <_malloc_usable_size_r>
 8009030:	42a0      	cmp	r0, r4
 8009032:	d20f      	bcs.n	8009054 <_realloc_r+0x48>
 8009034:	4621      	mov	r1, r4
 8009036:	4638      	mov	r0, r7
 8009038:	f7ff fbb8 	bl	80087ac <_malloc_r>
 800903c:	4605      	mov	r5, r0
 800903e:	2800      	cmp	r0, #0
 8009040:	d0f2      	beq.n	8009028 <_realloc_r+0x1c>
 8009042:	4631      	mov	r1, r6
 8009044:	4622      	mov	r2, r4
 8009046:	f7fe fed9 	bl	8007dfc <memcpy>
 800904a:	4631      	mov	r1, r6
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff ff8d 	bl	8008f6c <_free_r>
 8009052:	e7e9      	b.n	8009028 <_realloc_r+0x1c>
 8009054:	4635      	mov	r5, r6
 8009056:	e7e7      	b.n	8009028 <_realloc_r+0x1c>

08009058 <__sfputc_r>:
 8009058:	6893      	ldr	r3, [r2, #8]
 800905a:	3b01      	subs	r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	b410      	push	{r4}
 8009060:	6093      	str	r3, [r2, #8]
 8009062:	da08      	bge.n	8009076 <__sfputc_r+0x1e>
 8009064:	6994      	ldr	r4, [r2, #24]
 8009066:	42a3      	cmp	r3, r4
 8009068:	db01      	blt.n	800906e <__sfputc_r+0x16>
 800906a:	290a      	cmp	r1, #10
 800906c:	d103      	bne.n	8009076 <__sfputc_r+0x1e>
 800906e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009072:	f000 b94b 	b.w	800930c <__swbuf_r>
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	1c58      	adds	r0, r3, #1
 800907a:	6010      	str	r0, [r2, #0]
 800907c:	7019      	strb	r1, [r3, #0]
 800907e:	4608      	mov	r0, r1
 8009080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009084:	4770      	bx	lr

08009086 <__sfputs_r>:
 8009086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009088:	4606      	mov	r6, r0
 800908a:	460f      	mov	r7, r1
 800908c:	4614      	mov	r4, r2
 800908e:	18d5      	adds	r5, r2, r3
 8009090:	42ac      	cmp	r4, r5
 8009092:	d101      	bne.n	8009098 <__sfputs_r+0x12>
 8009094:	2000      	movs	r0, #0
 8009096:	e007      	b.n	80090a8 <__sfputs_r+0x22>
 8009098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909c:	463a      	mov	r2, r7
 800909e:	4630      	mov	r0, r6
 80090a0:	f7ff ffda 	bl	8009058 <__sfputc_r>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d1f3      	bne.n	8009090 <__sfputs_r+0xa>
 80090a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090ac <_vfiprintf_r>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	460d      	mov	r5, r1
 80090b2:	b09d      	sub	sp, #116	; 0x74
 80090b4:	4614      	mov	r4, r2
 80090b6:	4698      	mov	r8, r3
 80090b8:	4606      	mov	r6, r0
 80090ba:	b118      	cbz	r0, 80090c4 <_vfiprintf_r+0x18>
 80090bc:	6983      	ldr	r3, [r0, #24]
 80090be:	b90b      	cbnz	r3, 80090c4 <_vfiprintf_r+0x18>
 80090c0:	f000 fb06 	bl	80096d0 <__sinit>
 80090c4:	4b89      	ldr	r3, [pc, #548]	; (80092ec <_vfiprintf_r+0x240>)
 80090c6:	429d      	cmp	r5, r3
 80090c8:	d11b      	bne.n	8009102 <_vfiprintf_r+0x56>
 80090ca:	6875      	ldr	r5, [r6, #4]
 80090cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ce:	07d9      	lsls	r1, r3, #31
 80090d0:	d405      	bmi.n	80090de <_vfiprintf_r+0x32>
 80090d2:	89ab      	ldrh	r3, [r5, #12]
 80090d4:	059a      	lsls	r2, r3, #22
 80090d6:	d402      	bmi.n	80090de <_vfiprintf_r+0x32>
 80090d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090da:	f000 fb97 	bl	800980c <__retarget_lock_acquire_recursive>
 80090de:	89ab      	ldrh	r3, [r5, #12]
 80090e0:	071b      	lsls	r3, r3, #28
 80090e2:	d501      	bpl.n	80090e8 <_vfiprintf_r+0x3c>
 80090e4:	692b      	ldr	r3, [r5, #16]
 80090e6:	b9eb      	cbnz	r3, 8009124 <_vfiprintf_r+0x78>
 80090e8:	4629      	mov	r1, r5
 80090ea:	4630      	mov	r0, r6
 80090ec:	f000 f960 	bl	80093b0 <__swsetup_r>
 80090f0:	b1c0      	cbz	r0, 8009124 <_vfiprintf_r+0x78>
 80090f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f4:	07dc      	lsls	r4, r3, #31
 80090f6:	d50e      	bpl.n	8009116 <_vfiprintf_r+0x6a>
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	b01d      	add	sp, #116	; 0x74
 80090fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009102:	4b7b      	ldr	r3, [pc, #492]	; (80092f0 <_vfiprintf_r+0x244>)
 8009104:	429d      	cmp	r5, r3
 8009106:	d101      	bne.n	800910c <_vfiprintf_r+0x60>
 8009108:	68b5      	ldr	r5, [r6, #8]
 800910a:	e7df      	b.n	80090cc <_vfiprintf_r+0x20>
 800910c:	4b79      	ldr	r3, [pc, #484]	; (80092f4 <_vfiprintf_r+0x248>)
 800910e:	429d      	cmp	r5, r3
 8009110:	bf08      	it	eq
 8009112:	68f5      	ldreq	r5, [r6, #12]
 8009114:	e7da      	b.n	80090cc <_vfiprintf_r+0x20>
 8009116:	89ab      	ldrh	r3, [r5, #12]
 8009118:	0598      	lsls	r0, r3, #22
 800911a:	d4ed      	bmi.n	80090f8 <_vfiprintf_r+0x4c>
 800911c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800911e:	f000 fb76 	bl	800980e <__retarget_lock_release_recursive>
 8009122:	e7e9      	b.n	80090f8 <_vfiprintf_r+0x4c>
 8009124:	2300      	movs	r3, #0
 8009126:	9309      	str	r3, [sp, #36]	; 0x24
 8009128:	2320      	movs	r3, #32
 800912a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800912e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009132:	2330      	movs	r3, #48	; 0x30
 8009134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092f8 <_vfiprintf_r+0x24c>
 8009138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800913c:	f04f 0901 	mov.w	r9, #1
 8009140:	4623      	mov	r3, r4
 8009142:	469a      	mov	sl, r3
 8009144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009148:	b10a      	cbz	r2, 800914e <_vfiprintf_r+0xa2>
 800914a:	2a25      	cmp	r2, #37	; 0x25
 800914c:	d1f9      	bne.n	8009142 <_vfiprintf_r+0x96>
 800914e:	ebba 0b04 	subs.w	fp, sl, r4
 8009152:	d00b      	beq.n	800916c <_vfiprintf_r+0xc0>
 8009154:	465b      	mov	r3, fp
 8009156:	4622      	mov	r2, r4
 8009158:	4629      	mov	r1, r5
 800915a:	4630      	mov	r0, r6
 800915c:	f7ff ff93 	bl	8009086 <__sfputs_r>
 8009160:	3001      	adds	r0, #1
 8009162:	f000 80aa 	beq.w	80092ba <_vfiprintf_r+0x20e>
 8009166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009168:	445a      	add	r2, fp
 800916a:	9209      	str	r2, [sp, #36]	; 0x24
 800916c:	f89a 3000 	ldrb.w	r3, [sl]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 80a2 	beq.w	80092ba <_vfiprintf_r+0x20e>
 8009176:	2300      	movs	r3, #0
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009180:	f10a 0a01 	add.w	sl, sl, #1
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	9307      	str	r3, [sp, #28]
 8009188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800918c:	931a      	str	r3, [sp, #104]	; 0x68
 800918e:	4654      	mov	r4, sl
 8009190:	2205      	movs	r2, #5
 8009192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009196:	4858      	ldr	r0, [pc, #352]	; (80092f8 <_vfiprintf_r+0x24c>)
 8009198:	f7f7 f822 	bl	80001e0 <memchr>
 800919c:	9a04      	ldr	r2, [sp, #16]
 800919e:	b9d8      	cbnz	r0, 80091d8 <_vfiprintf_r+0x12c>
 80091a0:	06d1      	lsls	r1, r2, #27
 80091a2:	bf44      	itt	mi
 80091a4:	2320      	movmi	r3, #32
 80091a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091aa:	0713      	lsls	r3, r2, #28
 80091ac:	bf44      	itt	mi
 80091ae:	232b      	movmi	r3, #43	; 0x2b
 80091b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b4:	f89a 3000 	ldrb.w	r3, [sl]
 80091b8:	2b2a      	cmp	r3, #42	; 0x2a
 80091ba:	d015      	beq.n	80091e8 <_vfiprintf_r+0x13c>
 80091bc:	9a07      	ldr	r2, [sp, #28]
 80091be:	4654      	mov	r4, sl
 80091c0:	2000      	movs	r0, #0
 80091c2:	f04f 0c0a 	mov.w	ip, #10
 80091c6:	4621      	mov	r1, r4
 80091c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091cc:	3b30      	subs	r3, #48	; 0x30
 80091ce:	2b09      	cmp	r3, #9
 80091d0:	d94e      	bls.n	8009270 <_vfiprintf_r+0x1c4>
 80091d2:	b1b0      	cbz	r0, 8009202 <_vfiprintf_r+0x156>
 80091d4:	9207      	str	r2, [sp, #28]
 80091d6:	e014      	b.n	8009202 <_vfiprintf_r+0x156>
 80091d8:	eba0 0308 	sub.w	r3, r0, r8
 80091dc:	fa09 f303 	lsl.w	r3, r9, r3
 80091e0:	4313      	orrs	r3, r2
 80091e2:	9304      	str	r3, [sp, #16]
 80091e4:	46a2      	mov	sl, r4
 80091e6:	e7d2      	b.n	800918e <_vfiprintf_r+0xe2>
 80091e8:	9b03      	ldr	r3, [sp, #12]
 80091ea:	1d19      	adds	r1, r3, #4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	9103      	str	r1, [sp, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	bfbb      	ittet	lt
 80091f4:	425b      	neglt	r3, r3
 80091f6:	f042 0202 	orrlt.w	r2, r2, #2
 80091fa:	9307      	strge	r3, [sp, #28]
 80091fc:	9307      	strlt	r3, [sp, #28]
 80091fe:	bfb8      	it	lt
 8009200:	9204      	strlt	r2, [sp, #16]
 8009202:	7823      	ldrb	r3, [r4, #0]
 8009204:	2b2e      	cmp	r3, #46	; 0x2e
 8009206:	d10c      	bne.n	8009222 <_vfiprintf_r+0x176>
 8009208:	7863      	ldrb	r3, [r4, #1]
 800920a:	2b2a      	cmp	r3, #42	; 0x2a
 800920c:	d135      	bne.n	800927a <_vfiprintf_r+0x1ce>
 800920e:	9b03      	ldr	r3, [sp, #12]
 8009210:	1d1a      	adds	r2, r3, #4
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	9203      	str	r2, [sp, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	bfb8      	it	lt
 800921a:	f04f 33ff 	movlt.w	r3, #4294967295
 800921e:	3402      	adds	r4, #2
 8009220:	9305      	str	r3, [sp, #20]
 8009222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009308 <_vfiprintf_r+0x25c>
 8009226:	7821      	ldrb	r1, [r4, #0]
 8009228:	2203      	movs	r2, #3
 800922a:	4650      	mov	r0, sl
 800922c:	f7f6 ffd8 	bl	80001e0 <memchr>
 8009230:	b140      	cbz	r0, 8009244 <_vfiprintf_r+0x198>
 8009232:	2340      	movs	r3, #64	; 0x40
 8009234:	eba0 000a 	sub.w	r0, r0, sl
 8009238:	fa03 f000 	lsl.w	r0, r3, r0
 800923c:	9b04      	ldr	r3, [sp, #16]
 800923e:	4303      	orrs	r3, r0
 8009240:	3401      	adds	r4, #1
 8009242:	9304      	str	r3, [sp, #16]
 8009244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009248:	482c      	ldr	r0, [pc, #176]	; (80092fc <_vfiprintf_r+0x250>)
 800924a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800924e:	2206      	movs	r2, #6
 8009250:	f7f6 ffc6 	bl	80001e0 <memchr>
 8009254:	2800      	cmp	r0, #0
 8009256:	d03f      	beq.n	80092d8 <_vfiprintf_r+0x22c>
 8009258:	4b29      	ldr	r3, [pc, #164]	; (8009300 <_vfiprintf_r+0x254>)
 800925a:	bb1b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x1f8>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	3307      	adds	r3, #7
 8009260:	f023 0307 	bic.w	r3, r3, #7
 8009264:	3308      	adds	r3, #8
 8009266:	9303      	str	r3, [sp, #12]
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	443b      	add	r3, r7
 800926c:	9309      	str	r3, [sp, #36]	; 0x24
 800926e:	e767      	b.n	8009140 <_vfiprintf_r+0x94>
 8009270:	fb0c 3202 	mla	r2, ip, r2, r3
 8009274:	460c      	mov	r4, r1
 8009276:	2001      	movs	r0, #1
 8009278:	e7a5      	b.n	80091c6 <_vfiprintf_r+0x11a>
 800927a:	2300      	movs	r3, #0
 800927c:	3401      	adds	r4, #1
 800927e:	9305      	str	r3, [sp, #20]
 8009280:	4619      	mov	r1, r3
 8009282:	f04f 0c0a 	mov.w	ip, #10
 8009286:	4620      	mov	r0, r4
 8009288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800928c:	3a30      	subs	r2, #48	; 0x30
 800928e:	2a09      	cmp	r2, #9
 8009290:	d903      	bls.n	800929a <_vfiprintf_r+0x1ee>
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0c5      	beq.n	8009222 <_vfiprintf_r+0x176>
 8009296:	9105      	str	r1, [sp, #20]
 8009298:	e7c3      	b.n	8009222 <_vfiprintf_r+0x176>
 800929a:	fb0c 2101 	mla	r1, ip, r1, r2
 800929e:	4604      	mov	r4, r0
 80092a0:	2301      	movs	r3, #1
 80092a2:	e7f0      	b.n	8009286 <_vfiprintf_r+0x1da>
 80092a4:	ab03      	add	r3, sp, #12
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	462a      	mov	r2, r5
 80092aa:	4b16      	ldr	r3, [pc, #88]	; (8009304 <_vfiprintf_r+0x258>)
 80092ac:	a904      	add	r1, sp, #16
 80092ae:	4630      	mov	r0, r6
 80092b0:	f3af 8000 	nop.w
 80092b4:	4607      	mov	r7, r0
 80092b6:	1c78      	adds	r0, r7, #1
 80092b8:	d1d6      	bne.n	8009268 <_vfiprintf_r+0x1bc>
 80092ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092bc:	07d9      	lsls	r1, r3, #31
 80092be:	d405      	bmi.n	80092cc <_vfiprintf_r+0x220>
 80092c0:	89ab      	ldrh	r3, [r5, #12]
 80092c2:	059a      	lsls	r2, r3, #22
 80092c4:	d402      	bmi.n	80092cc <_vfiprintf_r+0x220>
 80092c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c8:	f000 faa1 	bl	800980e <__retarget_lock_release_recursive>
 80092cc:	89ab      	ldrh	r3, [r5, #12]
 80092ce:	065b      	lsls	r3, r3, #25
 80092d0:	f53f af12 	bmi.w	80090f8 <_vfiprintf_r+0x4c>
 80092d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d6:	e711      	b.n	80090fc <_vfiprintf_r+0x50>
 80092d8:	ab03      	add	r3, sp, #12
 80092da:	9300      	str	r3, [sp, #0]
 80092dc:	462a      	mov	r2, r5
 80092de:	4b09      	ldr	r3, [pc, #36]	; (8009304 <_vfiprintf_r+0x258>)
 80092e0:	a904      	add	r1, sp, #16
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff fc86 	bl	8008bf4 <_printf_i>
 80092e8:	e7e4      	b.n	80092b4 <_vfiprintf_r+0x208>
 80092ea:	bf00      	nop
 80092ec:	08009f9c 	.word	0x08009f9c
 80092f0:	08009fbc 	.word	0x08009fbc
 80092f4:	08009f7c 	.word	0x08009f7c
 80092f8:	08009e0c 	.word	0x08009e0c
 80092fc:	08009e16 	.word	0x08009e16
 8009300:	00000000 	.word	0x00000000
 8009304:	08009087 	.word	0x08009087
 8009308:	08009e12 	.word	0x08009e12

0800930c <__swbuf_r>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	460e      	mov	r6, r1
 8009310:	4614      	mov	r4, r2
 8009312:	4605      	mov	r5, r0
 8009314:	b118      	cbz	r0, 800931e <__swbuf_r+0x12>
 8009316:	6983      	ldr	r3, [r0, #24]
 8009318:	b90b      	cbnz	r3, 800931e <__swbuf_r+0x12>
 800931a:	f000 f9d9 	bl	80096d0 <__sinit>
 800931e:	4b21      	ldr	r3, [pc, #132]	; (80093a4 <__swbuf_r+0x98>)
 8009320:	429c      	cmp	r4, r3
 8009322:	d12b      	bne.n	800937c <__swbuf_r+0x70>
 8009324:	686c      	ldr	r4, [r5, #4]
 8009326:	69a3      	ldr	r3, [r4, #24]
 8009328:	60a3      	str	r3, [r4, #8]
 800932a:	89a3      	ldrh	r3, [r4, #12]
 800932c:	071a      	lsls	r2, r3, #28
 800932e:	d52f      	bpl.n	8009390 <__swbuf_r+0x84>
 8009330:	6923      	ldr	r3, [r4, #16]
 8009332:	b36b      	cbz	r3, 8009390 <__swbuf_r+0x84>
 8009334:	6923      	ldr	r3, [r4, #16]
 8009336:	6820      	ldr	r0, [r4, #0]
 8009338:	1ac0      	subs	r0, r0, r3
 800933a:	6963      	ldr	r3, [r4, #20]
 800933c:	b2f6      	uxtb	r6, r6
 800933e:	4283      	cmp	r3, r0
 8009340:	4637      	mov	r7, r6
 8009342:	dc04      	bgt.n	800934e <__swbuf_r+0x42>
 8009344:	4621      	mov	r1, r4
 8009346:	4628      	mov	r0, r5
 8009348:	f000 f92e 	bl	80095a8 <_fflush_r>
 800934c:	bb30      	cbnz	r0, 800939c <__swbuf_r+0x90>
 800934e:	68a3      	ldr	r3, [r4, #8]
 8009350:	3b01      	subs	r3, #1
 8009352:	60a3      	str	r3, [r4, #8]
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	1c5a      	adds	r2, r3, #1
 8009358:	6022      	str	r2, [r4, #0]
 800935a:	701e      	strb	r6, [r3, #0]
 800935c:	6963      	ldr	r3, [r4, #20]
 800935e:	3001      	adds	r0, #1
 8009360:	4283      	cmp	r3, r0
 8009362:	d004      	beq.n	800936e <__swbuf_r+0x62>
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	07db      	lsls	r3, r3, #31
 8009368:	d506      	bpl.n	8009378 <__swbuf_r+0x6c>
 800936a:	2e0a      	cmp	r6, #10
 800936c:	d104      	bne.n	8009378 <__swbuf_r+0x6c>
 800936e:	4621      	mov	r1, r4
 8009370:	4628      	mov	r0, r5
 8009372:	f000 f919 	bl	80095a8 <_fflush_r>
 8009376:	b988      	cbnz	r0, 800939c <__swbuf_r+0x90>
 8009378:	4638      	mov	r0, r7
 800937a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937c:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <__swbuf_r+0x9c>)
 800937e:	429c      	cmp	r4, r3
 8009380:	d101      	bne.n	8009386 <__swbuf_r+0x7a>
 8009382:	68ac      	ldr	r4, [r5, #8]
 8009384:	e7cf      	b.n	8009326 <__swbuf_r+0x1a>
 8009386:	4b09      	ldr	r3, [pc, #36]	; (80093ac <__swbuf_r+0xa0>)
 8009388:	429c      	cmp	r4, r3
 800938a:	bf08      	it	eq
 800938c:	68ec      	ldreq	r4, [r5, #12]
 800938e:	e7ca      	b.n	8009326 <__swbuf_r+0x1a>
 8009390:	4621      	mov	r1, r4
 8009392:	4628      	mov	r0, r5
 8009394:	f000 f80c 	bl	80093b0 <__swsetup_r>
 8009398:	2800      	cmp	r0, #0
 800939a:	d0cb      	beq.n	8009334 <__swbuf_r+0x28>
 800939c:	f04f 37ff 	mov.w	r7, #4294967295
 80093a0:	e7ea      	b.n	8009378 <__swbuf_r+0x6c>
 80093a2:	bf00      	nop
 80093a4:	08009f9c 	.word	0x08009f9c
 80093a8:	08009fbc 	.word	0x08009fbc
 80093ac:	08009f7c 	.word	0x08009f7c

080093b0 <__swsetup_r>:
 80093b0:	4b32      	ldr	r3, [pc, #200]	; (800947c <__swsetup_r+0xcc>)
 80093b2:	b570      	push	{r4, r5, r6, lr}
 80093b4:	681d      	ldr	r5, [r3, #0]
 80093b6:	4606      	mov	r6, r0
 80093b8:	460c      	mov	r4, r1
 80093ba:	b125      	cbz	r5, 80093c6 <__swsetup_r+0x16>
 80093bc:	69ab      	ldr	r3, [r5, #24]
 80093be:	b913      	cbnz	r3, 80093c6 <__swsetup_r+0x16>
 80093c0:	4628      	mov	r0, r5
 80093c2:	f000 f985 	bl	80096d0 <__sinit>
 80093c6:	4b2e      	ldr	r3, [pc, #184]	; (8009480 <__swsetup_r+0xd0>)
 80093c8:	429c      	cmp	r4, r3
 80093ca:	d10f      	bne.n	80093ec <__swsetup_r+0x3c>
 80093cc:	686c      	ldr	r4, [r5, #4]
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093d4:	0719      	lsls	r1, r3, #28
 80093d6:	d42c      	bmi.n	8009432 <__swsetup_r+0x82>
 80093d8:	06dd      	lsls	r5, r3, #27
 80093da:	d411      	bmi.n	8009400 <__swsetup_r+0x50>
 80093dc:	2309      	movs	r3, #9
 80093de:	6033      	str	r3, [r6, #0]
 80093e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093e4:	81a3      	strh	r3, [r4, #12]
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	e03e      	b.n	800946a <__swsetup_r+0xba>
 80093ec:	4b25      	ldr	r3, [pc, #148]	; (8009484 <__swsetup_r+0xd4>)
 80093ee:	429c      	cmp	r4, r3
 80093f0:	d101      	bne.n	80093f6 <__swsetup_r+0x46>
 80093f2:	68ac      	ldr	r4, [r5, #8]
 80093f4:	e7eb      	b.n	80093ce <__swsetup_r+0x1e>
 80093f6:	4b24      	ldr	r3, [pc, #144]	; (8009488 <__swsetup_r+0xd8>)
 80093f8:	429c      	cmp	r4, r3
 80093fa:	bf08      	it	eq
 80093fc:	68ec      	ldreq	r4, [r5, #12]
 80093fe:	e7e6      	b.n	80093ce <__swsetup_r+0x1e>
 8009400:	0758      	lsls	r0, r3, #29
 8009402:	d512      	bpl.n	800942a <__swsetup_r+0x7a>
 8009404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009406:	b141      	cbz	r1, 800941a <__swsetup_r+0x6a>
 8009408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800940c:	4299      	cmp	r1, r3
 800940e:	d002      	beq.n	8009416 <__swsetup_r+0x66>
 8009410:	4630      	mov	r0, r6
 8009412:	f7ff fdab 	bl	8008f6c <_free_r>
 8009416:	2300      	movs	r3, #0
 8009418:	6363      	str	r3, [r4, #52]	; 0x34
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009420:	81a3      	strh	r3, [r4, #12]
 8009422:	2300      	movs	r3, #0
 8009424:	6063      	str	r3, [r4, #4]
 8009426:	6923      	ldr	r3, [r4, #16]
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f043 0308 	orr.w	r3, r3, #8
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	b94b      	cbnz	r3, 800944a <__swsetup_r+0x9a>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800943c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009440:	d003      	beq.n	800944a <__swsetup_r+0x9a>
 8009442:	4621      	mov	r1, r4
 8009444:	4630      	mov	r0, r6
 8009446:	f000 fa07 	bl	8009858 <__smakebuf_r>
 800944a:	89a0      	ldrh	r0, [r4, #12]
 800944c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009450:	f010 0301 	ands.w	r3, r0, #1
 8009454:	d00a      	beq.n	800946c <__swsetup_r+0xbc>
 8009456:	2300      	movs	r3, #0
 8009458:	60a3      	str	r3, [r4, #8]
 800945a:	6963      	ldr	r3, [r4, #20]
 800945c:	425b      	negs	r3, r3
 800945e:	61a3      	str	r3, [r4, #24]
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	b943      	cbnz	r3, 8009476 <__swsetup_r+0xc6>
 8009464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009468:	d1ba      	bne.n	80093e0 <__swsetup_r+0x30>
 800946a:	bd70      	pop	{r4, r5, r6, pc}
 800946c:	0781      	lsls	r1, r0, #30
 800946e:	bf58      	it	pl
 8009470:	6963      	ldrpl	r3, [r4, #20]
 8009472:	60a3      	str	r3, [r4, #8]
 8009474:	e7f4      	b.n	8009460 <__swsetup_r+0xb0>
 8009476:	2000      	movs	r0, #0
 8009478:	e7f7      	b.n	800946a <__swsetup_r+0xba>
 800947a:	bf00      	nop
 800947c:	20000010 	.word	0x20000010
 8009480:	08009f9c 	.word	0x08009f9c
 8009484:	08009fbc 	.word	0x08009fbc
 8009488:	08009f7c 	.word	0x08009f7c

0800948c <abort>:
 800948c:	b508      	push	{r3, lr}
 800948e:	2006      	movs	r0, #6
 8009490:	f000 fa52 	bl	8009938 <raise>
 8009494:	2001      	movs	r0, #1
 8009496:	f7f8 fc25 	bl	8001ce4 <_exit>
	...

0800949c <__sflush_r>:
 800949c:	898a      	ldrh	r2, [r1, #12]
 800949e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a2:	4605      	mov	r5, r0
 80094a4:	0710      	lsls	r0, r2, #28
 80094a6:	460c      	mov	r4, r1
 80094a8:	d458      	bmi.n	800955c <__sflush_r+0xc0>
 80094aa:	684b      	ldr	r3, [r1, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	dc05      	bgt.n	80094bc <__sflush_r+0x20>
 80094b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dc02      	bgt.n	80094bc <__sflush_r+0x20>
 80094b6:	2000      	movs	r0, #0
 80094b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094be:	2e00      	cmp	r6, #0
 80094c0:	d0f9      	beq.n	80094b6 <__sflush_r+0x1a>
 80094c2:	2300      	movs	r3, #0
 80094c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094c8:	682f      	ldr	r7, [r5, #0]
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	d032      	beq.n	8009534 <__sflush_r+0x98>
 80094ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	075a      	lsls	r2, r3, #29
 80094d4:	d505      	bpl.n	80094e2 <__sflush_r+0x46>
 80094d6:	6863      	ldr	r3, [r4, #4]
 80094d8:	1ac0      	subs	r0, r0, r3
 80094da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094dc:	b10b      	cbz	r3, 80094e2 <__sflush_r+0x46>
 80094de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094e0:	1ac0      	subs	r0, r0, r3
 80094e2:	2300      	movs	r3, #0
 80094e4:	4602      	mov	r2, r0
 80094e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094e8:	6a21      	ldr	r1, [r4, #32]
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b0      	blx	r6
 80094ee:	1c43      	adds	r3, r0, #1
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	d106      	bne.n	8009502 <__sflush_r+0x66>
 80094f4:	6829      	ldr	r1, [r5, #0]
 80094f6:	291d      	cmp	r1, #29
 80094f8:	d82c      	bhi.n	8009554 <__sflush_r+0xb8>
 80094fa:	4a2a      	ldr	r2, [pc, #168]	; (80095a4 <__sflush_r+0x108>)
 80094fc:	40ca      	lsrs	r2, r1
 80094fe:	07d6      	lsls	r6, r2, #31
 8009500:	d528      	bpl.n	8009554 <__sflush_r+0xb8>
 8009502:	2200      	movs	r2, #0
 8009504:	6062      	str	r2, [r4, #4]
 8009506:	04d9      	lsls	r1, r3, #19
 8009508:	6922      	ldr	r2, [r4, #16]
 800950a:	6022      	str	r2, [r4, #0]
 800950c:	d504      	bpl.n	8009518 <__sflush_r+0x7c>
 800950e:	1c42      	adds	r2, r0, #1
 8009510:	d101      	bne.n	8009516 <__sflush_r+0x7a>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b903      	cbnz	r3, 8009518 <__sflush_r+0x7c>
 8009516:	6560      	str	r0, [r4, #84]	; 0x54
 8009518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800951a:	602f      	str	r7, [r5, #0]
 800951c:	2900      	cmp	r1, #0
 800951e:	d0ca      	beq.n	80094b6 <__sflush_r+0x1a>
 8009520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009524:	4299      	cmp	r1, r3
 8009526:	d002      	beq.n	800952e <__sflush_r+0x92>
 8009528:	4628      	mov	r0, r5
 800952a:	f7ff fd1f 	bl	8008f6c <_free_r>
 800952e:	2000      	movs	r0, #0
 8009530:	6360      	str	r0, [r4, #52]	; 0x34
 8009532:	e7c1      	b.n	80094b8 <__sflush_r+0x1c>
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	2301      	movs	r3, #1
 8009538:	4628      	mov	r0, r5
 800953a:	47b0      	blx	r6
 800953c:	1c41      	adds	r1, r0, #1
 800953e:	d1c7      	bne.n	80094d0 <__sflush_r+0x34>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0c4      	beq.n	80094d0 <__sflush_r+0x34>
 8009546:	2b1d      	cmp	r3, #29
 8009548:	d001      	beq.n	800954e <__sflush_r+0xb2>
 800954a:	2b16      	cmp	r3, #22
 800954c:	d101      	bne.n	8009552 <__sflush_r+0xb6>
 800954e:	602f      	str	r7, [r5, #0]
 8009550:	e7b1      	b.n	80094b6 <__sflush_r+0x1a>
 8009552:	89a3      	ldrh	r3, [r4, #12]
 8009554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	e7ad      	b.n	80094b8 <__sflush_r+0x1c>
 800955c:	690f      	ldr	r7, [r1, #16]
 800955e:	2f00      	cmp	r7, #0
 8009560:	d0a9      	beq.n	80094b6 <__sflush_r+0x1a>
 8009562:	0793      	lsls	r3, r2, #30
 8009564:	680e      	ldr	r6, [r1, #0]
 8009566:	bf08      	it	eq
 8009568:	694b      	ldreq	r3, [r1, #20]
 800956a:	600f      	str	r7, [r1, #0]
 800956c:	bf18      	it	ne
 800956e:	2300      	movne	r3, #0
 8009570:	eba6 0807 	sub.w	r8, r6, r7
 8009574:	608b      	str	r3, [r1, #8]
 8009576:	f1b8 0f00 	cmp.w	r8, #0
 800957a:	dd9c      	ble.n	80094b6 <__sflush_r+0x1a>
 800957c:	6a21      	ldr	r1, [r4, #32]
 800957e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009580:	4643      	mov	r3, r8
 8009582:	463a      	mov	r2, r7
 8009584:	4628      	mov	r0, r5
 8009586:	47b0      	blx	r6
 8009588:	2800      	cmp	r0, #0
 800958a:	dc06      	bgt.n	800959a <__sflush_r+0xfe>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	e78e      	b.n	80094b8 <__sflush_r+0x1c>
 800959a:	4407      	add	r7, r0
 800959c:	eba8 0800 	sub.w	r8, r8, r0
 80095a0:	e7e9      	b.n	8009576 <__sflush_r+0xda>
 80095a2:	bf00      	nop
 80095a4:	20400001 	.word	0x20400001

080095a8 <_fflush_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	690b      	ldr	r3, [r1, #16]
 80095ac:	4605      	mov	r5, r0
 80095ae:	460c      	mov	r4, r1
 80095b0:	b913      	cbnz	r3, 80095b8 <_fflush_r+0x10>
 80095b2:	2500      	movs	r5, #0
 80095b4:	4628      	mov	r0, r5
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	b118      	cbz	r0, 80095c2 <_fflush_r+0x1a>
 80095ba:	6983      	ldr	r3, [r0, #24]
 80095bc:	b90b      	cbnz	r3, 80095c2 <_fflush_r+0x1a>
 80095be:	f000 f887 	bl	80096d0 <__sinit>
 80095c2:	4b14      	ldr	r3, [pc, #80]	; (8009614 <_fflush_r+0x6c>)
 80095c4:	429c      	cmp	r4, r3
 80095c6:	d11b      	bne.n	8009600 <_fflush_r+0x58>
 80095c8:	686c      	ldr	r4, [r5, #4]
 80095ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0ef      	beq.n	80095b2 <_fflush_r+0xa>
 80095d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095d4:	07d0      	lsls	r0, r2, #31
 80095d6:	d404      	bmi.n	80095e2 <_fflush_r+0x3a>
 80095d8:	0599      	lsls	r1, r3, #22
 80095da:	d402      	bmi.n	80095e2 <_fflush_r+0x3a>
 80095dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095de:	f000 f915 	bl	800980c <__retarget_lock_acquire_recursive>
 80095e2:	4628      	mov	r0, r5
 80095e4:	4621      	mov	r1, r4
 80095e6:	f7ff ff59 	bl	800949c <__sflush_r>
 80095ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095ec:	07da      	lsls	r2, r3, #31
 80095ee:	4605      	mov	r5, r0
 80095f0:	d4e0      	bmi.n	80095b4 <_fflush_r+0xc>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	059b      	lsls	r3, r3, #22
 80095f6:	d4dd      	bmi.n	80095b4 <_fflush_r+0xc>
 80095f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095fa:	f000 f908 	bl	800980e <__retarget_lock_release_recursive>
 80095fe:	e7d9      	b.n	80095b4 <_fflush_r+0xc>
 8009600:	4b05      	ldr	r3, [pc, #20]	; (8009618 <_fflush_r+0x70>)
 8009602:	429c      	cmp	r4, r3
 8009604:	d101      	bne.n	800960a <_fflush_r+0x62>
 8009606:	68ac      	ldr	r4, [r5, #8]
 8009608:	e7df      	b.n	80095ca <_fflush_r+0x22>
 800960a:	4b04      	ldr	r3, [pc, #16]	; (800961c <_fflush_r+0x74>)
 800960c:	429c      	cmp	r4, r3
 800960e:	bf08      	it	eq
 8009610:	68ec      	ldreq	r4, [r5, #12]
 8009612:	e7da      	b.n	80095ca <_fflush_r+0x22>
 8009614:	08009f9c 	.word	0x08009f9c
 8009618:	08009fbc 	.word	0x08009fbc
 800961c:	08009f7c 	.word	0x08009f7c

08009620 <std>:
 8009620:	2300      	movs	r3, #0
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	e9c0 3300 	strd	r3, r3, [r0]
 800962a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800962e:	6083      	str	r3, [r0, #8]
 8009630:	8181      	strh	r1, [r0, #12]
 8009632:	6643      	str	r3, [r0, #100]	; 0x64
 8009634:	81c2      	strh	r2, [r0, #14]
 8009636:	6183      	str	r3, [r0, #24]
 8009638:	4619      	mov	r1, r3
 800963a:	2208      	movs	r2, #8
 800963c:	305c      	adds	r0, #92	; 0x5c
 800963e:	f7fd f9bf 	bl	80069c0 <memset>
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <std+0x38>)
 8009644:	6263      	str	r3, [r4, #36]	; 0x24
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <std+0x3c>)
 8009648:	62a3      	str	r3, [r4, #40]	; 0x28
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <std+0x40>)
 800964c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <std+0x44>)
 8009650:	6224      	str	r4, [r4, #32]
 8009652:	6323      	str	r3, [r4, #48]	; 0x30
 8009654:	bd10      	pop	{r4, pc}
 8009656:	bf00      	nop
 8009658:	08009971 	.word	0x08009971
 800965c:	08009993 	.word	0x08009993
 8009660:	080099cb 	.word	0x080099cb
 8009664:	080099ef 	.word	0x080099ef

08009668 <_cleanup_r>:
 8009668:	4901      	ldr	r1, [pc, #4]	; (8009670 <_cleanup_r+0x8>)
 800966a:	f000 b8af 	b.w	80097cc <_fwalk_reent>
 800966e:	bf00      	nop
 8009670:	080095a9 	.word	0x080095a9

08009674 <__sfmoreglue>:
 8009674:	b570      	push	{r4, r5, r6, lr}
 8009676:	1e4a      	subs	r2, r1, #1
 8009678:	2568      	movs	r5, #104	; 0x68
 800967a:	4355      	muls	r5, r2
 800967c:	460e      	mov	r6, r1
 800967e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009682:	f7ff f893 	bl	80087ac <_malloc_r>
 8009686:	4604      	mov	r4, r0
 8009688:	b140      	cbz	r0, 800969c <__sfmoreglue+0x28>
 800968a:	2100      	movs	r1, #0
 800968c:	e9c0 1600 	strd	r1, r6, [r0]
 8009690:	300c      	adds	r0, #12
 8009692:	60a0      	str	r0, [r4, #8]
 8009694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009698:	f7fd f992 	bl	80069c0 <memset>
 800969c:	4620      	mov	r0, r4
 800969e:	bd70      	pop	{r4, r5, r6, pc}

080096a0 <__sfp_lock_acquire>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__sfp_lock_acquire+0x8>)
 80096a2:	f000 b8b3 	b.w	800980c <__retarget_lock_acquire_recursive>
 80096a6:	bf00      	nop
 80096a8:	200003cc 	.word	0x200003cc

080096ac <__sfp_lock_release>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__sfp_lock_release+0x8>)
 80096ae:	f000 b8ae 	b.w	800980e <__retarget_lock_release_recursive>
 80096b2:	bf00      	nop
 80096b4:	200003cc 	.word	0x200003cc

080096b8 <__sinit_lock_acquire>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__sinit_lock_acquire+0x8>)
 80096ba:	f000 b8a7 	b.w	800980c <__retarget_lock_acquire_recursive>
 80096be:	bf00      	nop
 80096c0:	200003c7 	.word	0x200003c7

080096c4 <__sinit_lock_release>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__sinit_lock_release+0x8>)
 80096c6:	f000 b8a2 	b.w	800980e <__retarget_lock_release_recursive>
 80096ca:	bf00      	nop
 80096cc:	200003c7 	.word	0x200003c7

080096d0 <__sinit>:
 80096d0:	b510      	push	{r4, lr}
 80096d2:	4604      	mov	r4, r0
 80096d4:	f7ff fff0 	bl	80096b8 <__sinit_lock_acquire>
 80096d8:	69a3      	ldr	r3, [r4, #24]
 80096da:	b11b      	cbz	r3, 80096e4 <__sinit+0x14>
 80096dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e0:	f7ff bff0 	b.w	80096c4 <__sinit_lock_release>
 80096e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096e8:	6523      	str	r3, [r4, #80]	; 0x50
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <__sinit+0x68>)
 80096ec:	4a13      	ldr	r2, [pc, #76]	; (800973c <__sinit+0x6c>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	bf04      	itt	eq
 80096f6:	2301      	moveq	r3, #1
 80096f8:	61a3      	streq	r3, [r4, #24]
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 f820 	bl	8009740 <__sfp>
 8009700:	6060      	str	r0, [r4, #4]
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f81c 	bl	8009740 <__sfp>
 8009708:	60a0      	str	r0, [r4, #8]
 800970a:	4620      	mov	r0, r4
 800970c:	f000 f818 	bl	8009740 <__sfp>
 8009710:	2200      	movs	r2, #0
 8009712:	60e0      	str	r0, [r4, #12]
 8009714:	2104      	movs	r1, #4
 8009716:	6860      	ldr	r0, [r4, #4]
 8009718:	f7ff ff82 	bl	8009620 <std>
 800971c:	68a0      	ldr	r0, [r4, #8]
 800971e:	2201      	movs	r2, #1
 8009720:	2109      	movs	r1, #9
 8009722:	f7ff ff7d 	bl	8009620 <std>
 8009726:	68e0      	ldr	r0, [r4, #12]
 8009728:	2202      	movs	r2, #2
 800972a:	2112      	movs	r1, #18
 800972c:	f7ff ff78 	bl	8009620 <std>
 8009730:	2301      	movs	r3, #1
 8009732:	61a3      	str	r3, [r4, #24]
 8009734:	e7d2      	b.n	80096dc <__sinit+0xc>
 8009736:	bf00      	nop
 8009738:	08009b7c 	.word	0x08009b7c
 800973c:	08009669 	.word	0x08009669

08009740 <__sfp>:
 8009740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009742:	4607      	mov	r7, r0
 8009744:	f7ff ffac 	bl	80096a0 <__sfp_lock_acquire>
 8009748:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <__sfp+0x84>)
 800974a:	681e      	ldr	r6, [r3, #0]
 800974c:	69b3      	ldr	r3, [r6, #24]
 800974e:	b913      	cbnz	r3, 8009756 <__sfp+0x16>
 8009750:	4630      	mov	r0, r6
 8009752:	f7ff ffbd 	bl	80096d0 <__sinit>
 8009756:	3648      	adds	r6, #72	; 0x48
 8009758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800975c:	3b01      	subs	r3, #1
 800975e:	d503      	bpl.n	8009768 <__sfp+0x28>
 8009760:	6833      	ldr	r3, [r6, #0]
 8009762:	b30b      	cbz	r3, 80097a8 <__sfp+0x68>
 8009764:	6836      	ldr	r6, [r6, #0]
 8009766:	e7f7      	b.n	8009758 <__sfp+0x18>
 8009768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800976c:	b9d5      	cbnz	r5, 80097a4 <__sfp+0x64>
 800976e:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <__sfp+0x88>)
 8009770:	60e3      	str	r3, [r4, #12]
 8009772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009776:	6665      	str	r5, [r4, #100]	; 0x64
 8009778:	f000 f847 	bl	800980a <__retarget_lock_init_recursive>
 800977c:	f7ff ff96 	bl	80096ac <__sfp_lock_release>
 8009780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009788:	6025      	str	r5, [r4, #0]
 800978a:	61a5      	str	r5, [r4, #24]
 800978c:	2208      	movs	r2, #8
 800978e:	4629      	mov	r1, r5
 8009790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009794:	f7fd f914 	bl	80069c0 <memset>
 8009798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800979c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097a0:	4620      	mov	r0, r4
 80097a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a4:	3468      	adds	r4, #104	; 0x68
 80097a6:	e7d9      	b.n	800975c <__sfp+0x1c>
 80097a8:	2104      	movs	r1, #4
 80097aa:	4638      	mov	r0, r7
 80097ac:	f7ff ff62 	bl	8009674 <__sfmoreglue>
 80097b0:	4604      	mov	r4, r0
 80097b2:	6030      	str	r0, [r6, #0]
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1d5      	bne.n	8009764 <__sfp+0x24>
 80097b8:	f7ff ff78 	bl	80096ac <__sfp_lock_release>
 80097bc:	230c      	movs	r3, #12
 80097be:	603b      	str	r3, [r7, #0]
 80097c0:	e7ee      	b.n	80097a0 <__sfp+0x60>
 80097c2:	bf00      	nop
 80097c4:	08009b7c 	.word	0x08009b7c
 80097c8:	ffff0001 	.word	0xffff0001

080097cc <_fwalk_reent>:
 80097cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d0:	4606      	mov	r6, r0
 80097d2:	4688      	mov	r8, r1
 80097d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097d8:	2700      	movs	r7, #0
 80097da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097de:	f1b9 0901 	subs.w	r9, r9, #1
 80097e2:	d505      	bpl.n	80097f0 <_fwalk_reent+0x24>
 80097e4:	6824      	ldr	r4, [r4, #0]
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	d1f7      	bne.n	80097da <_fwalk_reent+0xe>
 80097ea:	4638      	mov	r0, r7
 80097ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f0:	89ab      	ldrh	r3, [r5, #12]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d907      	bls.n	8009806 <_fwalk_reent+0x3a>
 80097f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097fa:	3301      	adds	r3, #1
 80097fc:	d003      	beq.n	8009806 <_fwalk_reent+0x3a>
 80097fe:	4629      	mov	r1, r5
 8009800:	4630      	mov	r0, r6
 8009802:	47c0      	blx	r8
 8009804:	4307      	orrs	r7, r0
 8009806:	3568      	adds	r5, #104	; 0x68
 8009808:	e7e9      	b.n	80097de <_fwalk_reent+0x12>

0800980a <__retarget_lock_init_recursive>:
 800980a:	4770      	bx	lr

0800980c <__retarget_lock_acquire_recursive>:
 800980c:	4770      	bx	lr

0800980e <__retarget_lock_release_recursive>:
 800980e:	4770      	bx	lr

08009810 <__swhatbuf_r>:
 8009810:	b570      	push	{r4, r5, r6, lr}
 8009812:	460e      	mov	r6, r1
 8009814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009818:	2900      	cmp	r1, #0
 800981a:	b096      	sub	sp, #88	; 0x58
 800981c:	4614      	mov	r4, r2
 800981e:	461d      	mov	r5, r3
 8009820:	da07      	bge.n	8009832 <__swhatbuf_r+0x22>
 8009822:	2300      	movs	r3, #0
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	89b3      	ldrh	r3, [r6, #12]
 8009828:	061a      	lsls	r2, r3, #24
 800982a:	d410      	bmi.n	800984e <__swhatbuf_r+0x3e>
 800982c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009830:	e00e      	b.n	8009850 <__swhatbuf_r+0x40>
 8009832:	466a      	mov	r2, sp
 8009834:	f000 f902 	bl	8009a3c <_fstat_r>
 8009838:	2800      	cmp	r0, #0
 800983a:	dbf2      	blt.n	8009822 <__swhatbuf_r+0x12>
 800983c:	9a01      	ldr	r2, [sp, #4]
 800983e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009842:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009846:	425a      	negs	r2, r3
 8009848:	415a      	adcs	r2, r3
 800984a:	602a      	str	r2, [r5, #0]
 800984c:	e7ee      	b.n	800982c <__swhatbuf_r+0x1c>
 800984e:	2340      	movs	r3, #64	; 0x40
 8009850:	2000      	movs	r0, #0
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	b016      	add	sp, #88	; 0x58
 8009856:	bd70      	pop	{r4, r5, r6, pc}

08009858 <__smakebuf_r>:
 8009858:	898b      	ldrh	r3, [r1, #12]
 800985a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800985c:	079d      	lsls	r5, r3, #30
 800985e:	4606      	mov	r6, r0
 8009860:	460c      	mov	r4, r1
 8009862:	d507      	bpl.n	8009874 <__smakebuf_r+0x1c>
 8009864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	6123      	str	r3, [r4, #16]
 800986c:	2301      	movs	r3, #1
 800986e:	6163      	str	r3, [r4, #20]
 8009870:	b002      	add	sp, #8
 8009872:	bd70      	pop	{r4, r5, r6, pc}
 8009874:	ab01      	add	r3, sp, #4
 8009876:	466a      	mov	r2, sp
 8009878:	f7ff ffca 	bl	8009810 <__swhatbuf_r>
 800987c:	9900      	ldr	r1, [sp, #0]
 800987e:	4605      	mov	r5, r0
 8009880:	4630      	mov	r0, r6
 8009882:	f7fe ff93 	bl	80087ac <_malloc_r>
 8009886:	b948      	cbnz	r0, 800989c <__smakebuf_r+0x44>
 8009888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800988c:	059a      	lsls	r2, r3, #22
 800988e:	d4ef      	bmi.n	8009870 <__smakebuf_r+0x18>
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	f043 0302 	orr.w	r3, r3, #2
 8009898:	81a3      	strh	r3, [r4, #12]
 800989a:	e7e3      	b.n	8009864 <__smakebuf_r+0xc>
 800989c:	4b0d      	ldr	r3, [pc, #52]	; (80098d4 <__smakebuf_r+0x7c>)
 800989e:	62b3      	str	r3, [r6, #40]	; 0x28
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	6020      	str	r0, [r4, #0]
 80098a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	6163      	str	r3, [r4, #20]
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	6120      	str	r0, [r4, #16]
 80098b2:	b15b      	cbz	r3, 80098cc <__smakebuf_r+0x74>
 80098b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 f8d1 	bl	8009a60 <_isatty_r>
 80098be:	b128      	cbz	r0, 80098cc <__smakebuf_r+0x74>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f023 0303 	bic.w	r3, r3, #3
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	81a3      	strh	r3, [r4, #12]
 80098cc:	89a0      	ldrh	r0, [r4, #12]
 80098ce:	4305      	orrs	r5, r0
 80098d0:	81a5      	strh	r5, [r4, #12]
 80098d2:	e7cd      	b.n	8009870 <__smakebuf_r+0x18>
 80098d4:	08009669 	.word	0x08009669

080098d8 <_malloc_usable_size_r>:
 80098d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098dc:	1f18      	subs	r0, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	bfbc      	itt	lt
 80098e2:	580b      	ldrlt	r3, [r1, r0]
 80098e4:	18c0      	addlt	r0, r0, r3
 80098e6:	4770      	bx	lr

080098e8 <_raise_r>:
 80098e8:	291f      	cmp	r1, #31
 80098ea:	b538      	push	{r3, r4, r5, lr}
 80098ec:	4604      	mov	r4, r0
 80098ee:	460d      	mov	r5, r1
 80098f0:	d904      	bls.n	80098fc <_raise_r+0x14>
 80098f2:	2316      	movs	r3, #22
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	f04f 30ff 	mov.w	r0, #4294967295
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098fe:	b112      	cbz	r2, 8009906 <_raise_r+0x1e>
 8009900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009904:	b94b      	cbnz	r3, 800991a <_raise_r+0x32>
 8009906:	4620      	mov	r0, r4
 8009908:	f000 f830 	bl	800996c <_getpid_r>
 800990c:	462a      	mov	r2, r5
 800990e:	4601      	mov	r1, r0
 8009910:	4620      	mov	r0, r4
 8009912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009916:	f000 b817 	b.w	8009948 <_kill_r>
 800991a:	2b01      	cmp	r3, #1
 800991c:	d00a      	beq.n	8009934 <_raise_r+0x4c>
 800991e:	1c59      	adds	r1, r3, #1
 8009920:	d103      	bne.n	800992a <_raise_r+0x42>
 8009922:	2316      	movs	r3, #22
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	2001      	movs	r0, #1
 8009928:	e7e7      	b.n	80098fa <_raise_r+0x12>
 800992a:	2400      	movs	r4, #0
 800992c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009930:	4628      	mov	r0, r5
 8009932:	4798      	blx	r3
 8009934:	2000      	movs	r0, #0
 8009936:	e7e0      	b.n	80098fa <_raise_r+0x12>

08009938 <raise>:
 8009938:	4b02      	ldr	r3, [pc, #8]	; (8009944 <raise+0xc>)
 800993a:	4601      	mov	r1, r0
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	f7ff bfd3 	b.w	80098e8 <_raise_r>
 8009942:	bf00      	nop
 8009944:	20000010 	.word	0x20000010

08009948 <_kill_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d07      	ldr	r5, [pc, #28]	; (8009968 <_kill_r+0x20>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	4611      	mov	r1, r2
 8009954:	602b      	str	r3, [r5, #0]
 8009956:	f7f8 f9b5 	bl	8001cc4 <_kill>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d102      	bne.n	8009964 <_kill_r+0x1c>
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	b103      	cbz	r3, 8009964 <_kill_r+0x1c>
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	bd38      	pop	{r3, r4, r5, pc}
 8009966:	bf00      	nop
 8009968:	200003c0 	.word	0x200003c0

0800996c <_getpid_r>:
 800996c:	f7f8 b9a2 	b.w	8001cb4 <_getpid>

08009970 <__sread>:
 8009970:	b510      	push	{r4, lr}
 8009972:	460c      	mov	r4, r1
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	f000 f894 	bl	8009aa4 <_read_r>
 800997c:	2800      	cmp	r0, #0
 800997e:	bfab      	itete	ge
 8009980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009982:	89a3      	ldrhlt	r3, [r4, #12]
 8009984:	181b      	addge	r3, r3, r0
 8009986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800998a:	bfac      	ite	ge
 800998c:	6563      	strge	r3, [r4, #84]	; 0x54
 800998e:	81a3      	strhlt	r3, [r4, #12]
 8009990:	bd10      	pop	{r4, pc}

08009992 <__swrite>:
 8009992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	461f      	mov	r7, r3
 8009998:	898b      	ldrh	r3, [r1, #12]
 800999a:	05db      	lsls	r3, r3, #23
 800999c:	4605      	mov	r5, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	4616      	mov	r6, r2
 80099a2:	d505      	bpl.n	80099b0 <__swrite+0x1e>
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	2302      	movs	r3, #2
 80099aa:	2200      	movs	r2, #0
 80099ac:	f000 f868 	bl	8009a80 <_lseek_r>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	4632      	mov	r2, r6
 80099be:	463b      	mov	r3, r7
 80099c0:	4628      	mov	r0, r5
 80099c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	f000 b817 	b.w	80099f8 <_write_r>

080099ca <__sseek>:
 80099ca:	b510      	push	{r4, lr}
 80099cc:	460c      	mov	r4, r1
 80099ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d2:	f000 f855 	bl	8009a80 <_lseek_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	bf15      	itete	ne
 80099dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80099de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099e6:	81a3      	strheq	r3, [r4, #12]
 80099e8:	bf18      	it	ne
 80099ea:	81a3      	strhne	r3, [r4, #12]
 80099ec:	bd10      	pop	{r4, pc}

080099ee <__sclose>:
 80099ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f2:	f000 b813 	b.w	8009a1c <_close_r>
	...

080099f8 <_write_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	; (8009a18 <_write_r+0x20>)
 80099fc:	4604      	mov	r4, r0
 80099fe:	4608      	mov	r0, r1
 8009a00:	4611      	mov	r1, r2
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	f7f8 f993 	bl	8001d32 <_write>
 8009a0c:	1c43      	adds	r3, r0, #1
 8009a0e:	d102      	bne.n	8009a16 <_write_r+0x1e>
 8009a10:	682b      	ldr	r3, [r5, #0]
 8009a12:	b103      	cbz	r3, 8009a16 <_write_r+0x1e>
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	200003c0 	.word	0x200003c0

08009a1c <_close_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d06      	ldr	r5, [pc, #24]	; (8009a38 <_close_r+0x1c>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	f7f8 f99f 	bl	8001d6a <_close>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_close_r+0x1a>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_close_r+0x1a>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	200003c0 	.word	0x200003c0

08009a3c <_fstat_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d07      	ldr	r5, [pc, #28]	; (8009a5c <_fstat_r+0x20>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	602b      	str	r3, [r5, #0]
 8009a4a:	f7f8 f99a 	bl	8001d82 <_fstat>
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	d102      	bne.n	8009a58 <_fstat_r+0x1c>
 8009a52:	682b      	ldr	r3, [r5, #0]
 8009a54:	b103      	cbz	r3, 8009a58 <_fstat_r+0x1c>
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	bd38      	pop	{r3, r4, r5, pc}
 8009a5a:	bf00      	nop
 8009a5c:	200003c0 	.word	0x200003c0

08009a60 <_isatty_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	4d06      	ldr	r5, [pc, #24]	; (8009a7c <_isatty_r+0x1c>)
 8009a64:	2300      	movs	r3, #0
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	f7f8 f999 	bl	8001da2 <_isatty>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_isatty_r+0x1a>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_isatty_r+0x1a>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	200003c0 	.word	0x200003c0

08009a80 <_lseek_r>:
 8009a80:	b538      	push	{r3, r4, r5, lr}
 8009a82:	4d07      	ldr	r5, [pc, #28]	; (8009aa0 <_lseek_r+0x20>)
 8009a84:	4604      	mov	r4, r0
 8009a86:	4608      	mov	r0, r1
 8009a88:	4611      	mov	r1, r2
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	602a      	str	r2, [r5, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f7f8 f992 	bl	8001db8 <_lseek>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_lseek_r+0x1e>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_lseek_r+0x1e>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	200003c0 	.word	0x200003c0

08009aa4 <_read_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4d07      	ldr	r5, [pc, #28]	; (8009ac4 <_read_r+0x20>)
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	4608      	mov	r0, r1
 8009aac:	4611      	mov	r1, r2
 8009aae:	2200      	movs	r2, #0
 8009ab0:	602a      	str	r2, [r5, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f7f8 f920 	bl	8001cf8 <_read>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_read_r+0x1e>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_read_r+0x1e>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	200003c0 	.word	0x200003c0

08009ac8 <_init>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	bf00      	nop
 8009acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ace:	bc08      	pop	{r3}
 8009ad0:	469e      	mov	lr, r3
 8009ad2:	4770      	bx	lr

08009ad4 <_fini>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr
